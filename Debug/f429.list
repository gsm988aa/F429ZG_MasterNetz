
f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006694  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b28  08006b28  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b30  08006b30  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200000b8  08006bf0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  08006bf0  00020dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f20a  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb5  00000000  00000000  0002f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00031ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00032b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024817  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f902  00000000  00000000  00057ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d85d3  00000000  00000000  000677c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fd9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  0013fdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800682c 	.word	0x0800682c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	0800682c 	.word	0x0800682c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_DMA_Init+0xa8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_DMA_Init+0xa8>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_DMA_Init+0xa8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_DMA_Init+0xa8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200b      	movs	r0, #11
 80005cc:	f002 ff67 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005d0:	200b      	movs	r0, #11
 80005d2:	f002 ff80 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	200f      	movs	r0, #15
 80005dc:	f002 ff5f 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e0:	200f      	movs	r0, #15
 80005e2:	f002 ff78 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2038      	movs	r0, #56	; 0x38
 80005ec:	f002 ff57 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005f0:	2038      	movs	r0, #56	; 0x38
 80005f2:	f002 ff70 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	203b      	movs	r0, #59	; 0x3b
 80005fc:	f002 ff4f 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000600:	203b      	movs	r0, #59	; 0x3b
 8000602:	f002 ff68 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2044      	movs	r0, #68	; 0x44
 800060c:	f002 ff47 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000610:	2044      	movs	r0, #68	; 0x44
 8000612:	f002 ff60 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2045      	movs	r0, #69	; 0x45
 800061c:	f002 ff3f 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000620:	2045      	movs	r0, #69	; 0x45
 8000622:	f002 ff58 	bl	80034d6 <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a3b      	ldr	r2, [pc, #236]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MX_GPIO_Init+0x10c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_GPIO_Init+0x10c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a34      	ldr	r2, [pc, #208]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a2d      	ldr	r2, [pc, #180]	; (8000740 <MX_GPIO_Init+0x10c>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_GPIO_Init+0x110>)
 8000714:	f003 fb90 	bl	8003e38 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800071c:	2301      	movs	r3, #1
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0x110>)
 8000734:	f003 f9d4 	bl	8003ae0 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	; 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40021800 	.word	0x40021800

08000748 <loopback_udps>:
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b089      	sub	sp, #36	; 0x24
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	80bb      	strh	r3, [r7, #4]
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	3301      	adds	r3, #1
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fc7f 	bl	8002068 <WIZCHIP_READ>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d052      	beq.n	8000816 <loopback_udps+0xce>
 8000770:	2b22      	cmp	r3, #34	; 0x22
 8000772:	d165      	bne.n	8000840 <loopback_udps+0xf8>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fe1b 	bl	80023b2 <getSn_RX_RSR>
 800077c:	4603      	mov	r3, r0
 800077e:	82fb      	strh	r3, [r7, #22]
 8000780:	8afb      	ldrh	r3, [r7, #22]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d05e      	beq.n	8000844 <loopback_udps+0xfc>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8000786:	8afb      	ldrh	r3, [r7, #22]
 8000788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800078c:	d902      	bls.n	8000794 <loopback_udps+0x4c>
 800078e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000792:	82fb      	strh	r3, [r7, #22]
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
 8000794:	f107 010c 	add.w	r1, r7, #12
 8000798:	8afa      	ldrh	r2, [r7, #22]
 800079a:	79f8      	ldrb	r0, [r7, #7]
 800079c:	f107 030a 	add.w	r3, r7, #10
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	460b      	mov	r3, r1
 80007a4:	6839      	ldr	r1, [r7, #0]
 80007a6:	f000 fce7 	bl	8001178 <recvfrom>
 80007aa:	6138      	str	r0, [r7, #16]
            if(ret <= 0)
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	dc07      	bgt.n	80007c2 <loopback_udps+0x7a>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4825      	ldr	r0, [pc, #148]	; (8000850 <loopback_udps+0x108>)
 80007ba:	f005 f86b 	bl	8005894 <iprintf>
#endif
               return ret;
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	e042      	b.n	8000848 <loopback_udps+0x100>
            }
            size = (uint16_t) ret;
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	82fb      	strh	r3, [r7, #22]
            sentsize = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 80007ca:	e01f      	b.n	800080c <loopback_udps+0xc4>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
 80007cc:	8abb      	ldrh	r3, [r7, #20]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	18d1      	adds	r1, r2, r3
 80007d2:	8afa      	ldrh	r2, [r7, #22]
 80007d4:	8abb      	ldrh	r3, [r7, #20]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b29a      	uxth	r2, r3
 80007da:	897b      	ldrh	r3, [r7, #10]
 80007dc:	f107 040c 	add.w	r4, r7, #12
 80007e0:	79f8      	ldrb	r0, [r7, #7]
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	4623      	mov	r3, r4
 80007e6:	f000 fb91 	bl	8000f0c <sendto>
 80007ea:	6138      	str	r0, [r7, #16]
               if(ret < 0)
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da07      	bge.n	8000802 <loopback_udps+0xba>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4816      	ldr	r0, [pc, #88]	; (8000854 <loopback_udps+0x10c>)
 80007fa:	f005 f84b 	bl	8005894 <iprintf>
#endif
                  return ret;
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	e022      	b.n	8000848 <loopback_udps+0x100>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	b29a      	uxth	r2, r3
 8000806:	8abb      	ldrh	r3, [r7, #20]
 8000808:	4413      	add	r3, r2
 800080a:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 800080c:	8aba      	ldrh	r2, [r7, #20]
 800080e:	8afb      	ldrh	r3, [r7, #22]
 8000810:	429a      	cmp	r2, r3
 8000812:	d1db      	bne.n	80007cc <loopback_udps+0x84>
            }
         }
         break;
 8000814:	e016      	b.n	8000844 <loopback_udps+0xfc>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 8000816:	88ba      	ldrh	r2, [r7, #4]
 8000818:	79f8      	ldrb	r0, [r7, #7]
 800081a:	2300      	movs	r3, #0
 800081c:	2102      	movs	r1, #2
 800081e:	f000 f9f1 	bl	8000c04 <socket>
 8000822:	4603      	mov	r3, r0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	429a      	cmp	r2, r3
 800082c:	d001      	beq.n	8000832 <loopback_udps+0xea>
            return ret;
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	e00a      	b.n	8000848 <loopback_udps+0x100>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	88ba      	ldrh	r2, [r7, #4]
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <loopback_udps+0x110>)
 800083a:	f005 f82b 	bl	8005894 <iprintf>
#endif
         break;
 800083e:	e002      	b.n	8000846 <loopback_udps+0xfe>
      default :
         break;
 8000840:	bf00      	nop
 8000842:	e000      	b.n	8000846 <loopback_udps+0xfe>
         break;
 8000844:	bf00      	nop
   }
   return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	371c      	adds	r7, #28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	080068fc 	.word	0x080068fc
 8000854:	08006918 	.word	0x08006918
 8000858:	08006930 	.word	0x08006930

0800085c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4 , (uint8_t *)&ch, 1, 0xFFFF);
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086a:	2201      	movs	r2, #1
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <__io_putchar+0x20>)
 800086e:	f004 fd3a 	bl	80052e6 <HAL_UART_Transmit>
  return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000d54 	.word	0x20000d54

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint8_t tmp;
 int32_t retr = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <main+0xc4>)
 800088c:	463c      	mov	r4, r7
 800088e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f002 fc92 	bl	80031bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f86c 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f7ff feca 	bl	8000634 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a0:	f7ff fe72 	bl	8000588 <MX_DMA_Init>
  MX_SPI1_Init();
 80008a4:	f000 fe56 	bl	8001554 <MX_SPI1_Init>
  MX_SPI2_Init();
 80008a8:	f000 fe86 	bl	80015b8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80008ac:	f000 feba 	bl	8001624 <MX_SPI3_Init>
  MX_SPI4_Init();
 80008b0:	f000 feea 	bl	8001688 <MX_SPI4_Init>
  MX_SPI5_Init();
 80008b4:	f000 ff1a 	bl	80016ec <MX_SPI5_Init>
  MX_SPI6_Init();
 80008b8:	f000 ff4a 	bl	8001750 <MX_SPI6_Init>
  MX_UART4_Init();
 80008bc:	f001 fb62 	bl	8001f84 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80008c0:	4921      	ldr	r1, [pc, #132]	; (8000948 <main+0xc8>)
 80008c2:	4822      	ldr	r0, [pc, #136]	; (800094c <main+0xcc>)
 80008c4:	f001 ff24 	bl	8002710 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80008c8:	4921      	ldr	r1, [pc, #132]	; (8000950 <main+0xd0>)
 80008ca:	4822      	ldr	r0, [pc, #136]	; (8000954 <main+0xd4>)
 80008cc:	f001 ff46 	bl	800275c <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80008d0:	4921      	ldr	r1, [pc, #132]	; (8000958 <main+0xd8>)
 80008d2:	4822      	ldr	r0, [pc, #136]	; (800095c <main+0xdc>)
 80008d4:	f001 ff6e 	bl	80027b4 <reg_wizchip_spiburst_cbfunc>
  
  
  
  /* WIZCHIP SOCKET Buffer initialize */
  if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	2001      	movs	r0, #1
 80008de:	f001 ff95 	bl	800280c <ctlwizchip>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e8:	d103      	bne.n	80008f2 <main+0x72>
  {
     printf("WIZCHIP Initialized fail.\r\n");
 80008ea:	481d      	ldr	r0, [pc, #116]	; (8000960 <main+0xe0>)
 80008ec:	f005 f858 	bl	80059a0 <puts>
     while(1);
 80008f0:	e7fe      	b.n	80008f0 <main+0x70>
  }

  /* PHY link status check */
  do
  {
     if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 80008f2:	f107 0313 	add.w	r3, r7, #19
 80008f6:	4619      	mov	r1, r3
 80008f8:	200f      	movs	r0, #15
 80008fa:	f001 ff87 	bl	800280c <ctlwizchip>
 80008fe:	4603      	mov	r3, r0
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d102      	bne.n	800090c <main+0x8c>
        printf("Unknown PHY Link stauts.\r\n");
 8000906:	4817      	ldr	r0, [pc, #92]	; (8000964 <main+0xe4>)
 8000908:	f005 f84a 	bl	80059a0 <puts>
  }while(tmp == PHY_LINK_OFF);
 800090c:	7cfb      	ldrb	r3, [r7, #19]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0ef      	beq.n	80008f2 <main+0x72>
  printf("SOCKET ERROR =1");
 8000912:	4815      	ldr	r0, [pc, #84]	; (8000968 <main+0xe8>)
 8000914:	f004 ffbe 	bl	8005894 <iprintf>
  network_init();
 8000918:	f000 f8e8 	bl	8000aec <network_init>
  {




      HAL_Delay(500);
 800091c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000920:	f002 fcbe 	bl	80032a0 <HAL_Delay>
     
//    DHT_data d = DHT_getData(DHT22);
//     printf("Temp: %2.1f \r\n", d.temp );
 
    
    if( (retr = loopback_udps(SOCK_UDP, gDATABUF, 5000)) < 0) {
 8000924:	f241 3288 	movw	r2, #5000	; 0x1388
 8000928:	4910      	ldr	r1, [pc, #64]	; (800096c <main+0xec>)
 800092a:	2022      	movs	r0, #34	; 0x22
 800092c:	f7ff ff0c 	bl	8000748 <loopback_udps>
 8000930:	6178      	str	r0, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2b00      	cmp	r3, #0
 8000936:	daf1      	bge.n	800091c <main+0x9c>
      printf("SOCKET ERROR : %ld\r\n", retr);
 8000938:	6979      	ldr	r1, [r7, #20]
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <main+0xf0>)
 800093c:	f004 ffaa 	bl	8005894 <iprintf>
      HAL_Delay(500);
 8000940:	e7ec      	b.n	800091c <main+0x9c>
 8000942:	bf00      	nop
 8000944:	080069b8 	.word	0x080069b8
 8000948:	08000a4d 	.word	0x08000a4d
 800094c:	08000a35 	.word	0x08000a35
 8000950:	08000acf 	.word	0x08000acf
 8000954:	08000ab5 	.word	0x08000ab5
 8000958:	08000a8d 	.word	0x08000a8d
 800095c:	08000a65 	.word	0x08000a65
 8000960:	08006958 	.word	0x08006958
 8000964:	08006974 	.word	0x08006974
 8000968:	08006990 	.word	0x08006990
 800096c:	20000104 	.word	0x20000104
 8000970:	080069a0 	.word	0x080069a0

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f004 ff7e 	bl	8005884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <SystemClock_Config+0xb8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <SystemClock_Config+0xb8>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <SystemClock_Config+0xb8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <SystemClock_Config+0xbc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <SystemClock_Config+0xbc>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <SystemClock_Config+0xbc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	2310      	movs	r3, #16
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fa3f 	bl	8003e6c <HAL_RCC_OscConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009f4:	f000 f900 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f8:	230f      	movs	r3, #15
 80009fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fca2 	bl	800435c <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a1e:	f000 f8eb 	bl	8000bf8 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3750      	adds	r7, #80	; 0x50
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <W5500_Select>:

/* USER CODE BEGIN 4 */
void W5500_Select(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <W5500_Select+0x14>)
 8000a3e:	f003 f9fb 	bl	8003e38 <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021800 	.word	0x40021800

08000a4c <W5500_Unselect>:

void W5500_Unselect(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <W5500_Unselect+0x14>)
 8000a56:	f003 f9ef 	bl	8003e38 <HAL_GPIO_WritePin>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021800 	.word	0x40021800

08000a64 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8000a70:	887a      	ldrh	r2, [r7, #2]
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <W5500_ReadBuff+0x24>)
 8000a7a:	f004 f804 	bl	8004a86 <HAL_SPI_Receive>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000904 	.word	0x20000904

08000a8c <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8000a98:	887a      	ldrh	r2, [r7, #2]
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <W5500_WriteBuff+0x24>)
 8000aa2:	f003 feb4 	bl	800480e <HAL_SPI_Transmit>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000904 	.word	0x20000904

08000ab4 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  uint8_t byte;
  W5500_ReadBuff(&byte, sizeof(byte));
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ffd0 	bl	8000a64 <W5500_ReadBuff>
  return byte;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	71fb      	strb	r3, [r7, #7]
  W5500_WriteBuff(&byte, sizeof(byte));
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	2101      	movs	r1, #1
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffd5 	bl	8000a8c <W5500_WriteBuff>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <network_init>:

void network_init(void)
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af04      	add	r7, sp, #16
  uint8_t tmpstr[6];
  ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000af2:	4939      	ldr	r1, [pc, #228]	; (8000bd8 <network_init+0xec>)
 8000af4:	2000      	movs	r0, #0
 8000af6:	f001 ff67 	bl	80029c8 <ctlnetwork>
  ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8000afa:	4937      	ldr	r1, [pc, #220]	; (8000bd8 <network_init+0xec>)
 8000afc:	2001      	movs	r0, #1
 8000afe:	f001 ff63 	bl	80029c8 <ctlnetwork>

  // Display Network Information
  ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000b02:	463b      	mov	r3, r7
 8000b04:	4619      	mov	r1, r3
 8000b06:	2008      	movs	r0, #8
 8000b08:	f001 fe80 	bl	800280c <ctlwizchip>
  printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4832      	ldr	r0, [pc, #200]	; (8000bdc <network_init+0xf0>)
 8000b12:	f004 febf 	bl	8005894 <iprintf>
  printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000b16:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <network_init+0xec>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <network_init+0xec>)
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	461c      	mov	r4, r3
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <network_init+0xec>)
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	461d      	mov	r5, r3
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <network_init+0xec>)
 8000b2a:	78db      	ldrb	r3, [r3, #3]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <network_init+0xec>)
 8000b30:	791b      	ldrb	r3, [r3, #4]
 8000b32:	4619      	mov	r1, r3
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <network_init+0xec>)
 8000b36:	795b      	ldrb	r3, [r3, #5]
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	9101      	str	r1, [sp, #4]
 8000b3c:	9200      	str	r2, [sp, #0]
 8000b3e:	462b      	mov	r3, r5
 8000b40:	4622      	mov	r2, r4
 8000b42:	4601      	mov	r1, r0
 8000b44:	4826      	ldr	r0, [pc, #152]	; (8000be0 <network_init+0xf4>)
 8000b46:	f004 fea5 	bl	8005894 <iprintf>
  printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <network_init+0xec>)
 8000b4c:	799b      	ldrb	r3, [r3, #6]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <network_init+0xec>)
 8000b52:	79db      	ldrb	r3, [r3, #7]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <network_init+0xec>)
 8000b58:	7a1b      	ldrb	r3, [r3, #8]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <network_init+0xec>)
 8000b5e:	7a5b      	ldrb	r3, [r3, #9]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	4603      	mov	r3, r0
 8000b64:	481f      	ldr	r0, [pc, #124]	; (8000be4 <network_init+0xf8>)
 8000b66:	f004 fe95 	bl	8005894 <iprintf>
  printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <network_init+0xec>)
 8000b6c:	7b9b      	ldrb	r3, [r3, #14]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <network_init+0xec>)
 8000b72:	7bdb      	ldrb	r3, [r3, #15]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <network_init+0xec>)
 8000b78:	7c1b      	ldrb	r3, [r3, #16]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <network_init+0xec>)
 8000b7e:	7c5b      	ldrb	r3, [r3, #17]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	4603      	mov	r3, r0
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <network_init+0xfc>)
 8000b86:	f004 fe85 	bl	8005894 <iprintf>
  printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <network_init+0xec>)
 8000b8c:	7a9b      	ldrb	r3, [r3, #10]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <network_init+0xec>)
 8000b92:	7adb      	ldrb	r3, [r3, #11]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <network_init+0xec>)
 8000b98:	7b1b      	ldrb	r3, [r3, #12]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <network_init+0xec>)
 8000b9e:	7b5b      	ldrb	r3, [r3, #13]
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <network_init+0x100>)
 8000ba6:	f004 fe75 	bl	8005894 <iprintf>
  printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <network_init+0xec>)
 8000bac:	7c9b      	ldrb	r3, [r3, #18]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <network_init+0xec>)
 8000bb2:	7cdb      	ldrb	r3, [r3, #19]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <network_init+0xec>)
 8000bb8:	7d1b      	ldrb	r3, [r3, #20]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <network_init+0xec>)
 8000bbe:	7d5b      	ldrb	r3, [r3, #21]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <network_init+0x104>)
 8000bc6:	f004 fe65 	bl	8005894 <iprintf>
  printf("======================\r\n");
 8000bca:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <network_init+0x108>)
 8000bcc:	f004 fee8 	bl	80059a0 <puts>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	080069c8 	.word	0x080069c8
 8000be0:	080069e0 	.word	0x080069e0
 8000be4:	08006a08 	.word	0x08006a08
 8000be8:	08006a1c 	.word	0x08006a1c
 8000bec:	08006a30 	.word	0x08006a30
 8000bf0:	08006a44 	.word	0x08006a44
 8000bf4:	08006a58 	.word	0x08006a58

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4623      	mov	r3, r4
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	4603      	mov	r3, r0
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	80bb      	strh	r3, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b08      	cmp	r3, #8
 8000c26:	d902      	bls.n	8000c2e <socket+0x2a>
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	e0f2      	b.n	8000e14 <socket+0x210>
	switch(protocol)
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d005      	beq.n	8000c40 <socket+0x3c>
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	dd11      	ble.n	8000c5c <socket+0x58>
 8000c38:	3b02      	subs	r3, #2
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d80e      	bhi.n	8000c5c <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000c3e:	e010      	b.n	8000c62 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2204      	movs	r2, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000c4c:	f001 faa6 	bl	800219c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d105      	bne.n	8000c62 <socket+0x5e>
 8000c56:	f06f 0302 	mvn.w	r3, #2
 8000c5a:	e0db      	b.n	8000e14 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000c5c:	f06f 0304 	mvn.w	r3, #4
 8000c60:	e0d8      	b.n	8000e14 <socket+0x210>
         break;
 8000c62:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <socket+0x70>
 8000c6e:	f06f 0305 	mvn.w	r3, #5
 8000c72:	e0cf      	b.n	8000e14 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d025      	beq.n	8000cc6 <socket+0xc2>
	{
   	switch(protocol)
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d002      	beq.n	8000c86 <socket+0x82>
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d008      	beq.n	8000c96 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000c84:	e024      	b.n	8000cd0 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d11c      	bne.n	8000cca <socket+0xc6>
 8000c90:	f06f 0305 	mvn.w	r3, #5
 8000c94:	e0be      	b.n	8000e14 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	f003 0320 	and.w	r3, r3, #32
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db02      	blt.n	8000cae <socket+0xaa>
 8000ca8:	f06f 0305 	mvn.w	r3, #5
 8000cac:	e0b2      	b.n	8000e14 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00a      	beq.n	8000cce <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db06      	blt.n	8000cce <socket+0xca>
 8000cc0:	f06f 0305 	mvn.w	r3, #5
 8000cc4:	e0a6      	b.n	8000e14 <socket+0x210>
   	}
   }
 8000cc6:	bf00      	nop
 8000cc8:	e002      	b.n	8000cd0 <socket+0xcc>
   	      break;
 8000cca:	bf00      	nop
 8000ccc:	e000      	b.n	8000cd0 <socket+0xcc>
   	      break;
 8000cce:	bf00      	nop
	close(sn);
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f8ac 	bl	8000e30 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	3301      	adds	r3, #1
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ce6:	f023 030f 	bic.w	r3, r3, #15
 8000cea:	b25a      	sxtb	r2, r3
 8000cec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f001 fa02 	bl	8002100 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d110      	bne.n	8000d24 <socket+0x120>
	{
	   port = sock_any_port++;
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <socket+0x218>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	b291      	uxth	r1, r2
 8000d0a:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <socket+0x218>)
 8000d0c:	8011      	strh	r1, [r2, #0]
 8000d0e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000d10:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <socket+0x218>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d103      	bne.n	8000d24 <socket+0x120>
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <socket+0x218>)
 8000d1e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d22:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	3301      	adds	r3, #1
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d30:	461a      	mov	r2, r3
 8000d32:	88bb      	ldrh	r3, [r7, #4]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	f001 f9df 	bl	8002100 <WIZCHIP_WRITE>
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	3301      	adds	r3, #1
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d4e:	461a      	mov	r2, r3
 8000d50:	88bb      	ldrh	r3, [r7, #4]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4619      	mov	r1, r3
 8000d56:	4610      	mov	r0, r2
 8000d58:	f001 f9d2 	bl	8002100 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	3301      	adds	r3, #1
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 f9c8 	bl	8002100 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000d70:	bf00      	nop
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	3301      	adds	r3, #1
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f972 	bl	8002068 <WIZCHIP_READ>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f3      	bne.n	8000d72 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <socket+0x21c>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4013      	ands	r3, r2
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <socket+0x21c>)
 8000da6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	f003 0201 	and.w	r2, r3, #1
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <socket+0x21c>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <socket+0x21c>)
 8000dc4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <socket+0x220>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <socket+0x220>)
 8000de2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <socket+0x224>)
 8000de8:	2100      	movs	r1, #0
 8000dea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <socket+0x228>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000df6:	bf00      	nop
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f92f 	bl	8002068 <WIZCHIP_READ>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f3      	beq.n	8000df8 <socket+0x1f4>
   return (int8_t)sn;
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	20000018 	.word	0x20000018
 8000e20:	200000d4 	.word	0x200000d4
 8000e24:	200000d6 	.word	0x200000d6
 8000e28:	200000d8 	.word	0x200000d8
 8000e2c:	200000e8 	.word	0x200000e8

08000e30 <close>:

int8_t close(uint8_t sn)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d902      	bls.n	8000e46 <close+0x16>
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	e055      	b.n	8000ef2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e52:	2110      	movs	r1, #16
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 f953 	bl	8002100 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000e5a:	bf00      	nop
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	3301      	adds	r3, #1
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 f8fd 	bl	8002068 <WIZCHIP_READ>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f3      	bne.n	8000e5c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	3301      	adds	r3, #1
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e80:	211f      	movs	r1, #31
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f93c 	bl	8002100 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <close+0xcc>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <close+0xcc>)
 8000ea4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <close+0xd0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <close+0xd0>)
 8000ec2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <close+0xd4>)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <close+0xd8>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000ed6:	bf00      	nop
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	3301      	adds	r3, #1
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 f8bf 	bl	8002068 <WIZCHIP_READ>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f3      	bne.n	8000ed8 <close+0xa8>
	return SOCK_OK;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000d4 	.word	0x200000d4
 8000f00:	200000d6 	.word	0x200000d6
 8000f04:	200000d8 	.word	0x200000d8
 8000f08:	200000e8 	.word	0x200000e8

08000f0c <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d902      	bls.n	8000f32 <sendto+0x26>
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	e11b      	b.n	800116a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	3301      	adds	r3, #1
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 f894 	bl	8002068 <WIZCHIP_READ>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b02      	subs	r3, #2
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d902      	bls.n	8000f52 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8000f4c:	f06f 0304 	mvn.w	r3, #4
 8000f50:	e10b      	b.n	800116a <sendto+0x25e>
         break;
 8000f52:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8000f54:	89bb      	ldrh	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <sendto+0x54>
 8000f5a:	f06f 030d 	mvn.w	r3, #13
 8000f5e:	e104      	b.n	800116a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	3201      	adds	r2, #1
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	3202      	adds	r2, #2
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	3203      	adds	r2, #3
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10e      	bne.n	8000fb4 <sendto+0xa8>
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f862 	bl	8002068 <WIZCHIP_READ>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d002      	beq.n	8000fb4 <sendto+0xa8>
 8000fae:	f06f 030b 	mvn.w	r3, #11
 8000fb2:	e0da      	b.n	800116a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10e      	bne.n	8000fd8 <sendto+0xcc>
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 f850 	bl	8002068 <WIZCHIP_READ>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d002      	beq.n	8000fd8 <sendto+0xcc>
 8000fd2:	f06f 030a 	mvn.w	r3, #10
 8000fd6:	e0c8      	b.n	800116a <sendto+0x25e>
   tmp = getSn_SR(sn);
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	3301      	adds	r3, #1
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f83f 	bl	8002068 <WIZCHIP_READ>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	2b42      	cmp	r3, #66	; 0x42
 8000ff2:	d008      	beq.n	8001006 <sendto+0xfa>
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b22      	cmp	r3, #34	; 0x22
 8000ff8:	d005      	beq.n	8001006 <sendto+0xfa>
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	2b32      	cmp	r3, #50	; 0x32
 8000ffe:	d002      	beq.n	8001006 <sendto+0xfa>
 8001000:	f06f 0306 	mvn.w	r3, #6
 8001004:	e0b1      	b.n	800116a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	3301      	adds	r3, #1
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001012:	2204      	movs	r2, #4
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f001 f920 	bl	800225c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	3301      	adds	r3, #1
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001028:	461a      	mov	r2, r3
 800102a:	8c3b      	ldrh	r3, [r7, #32]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b29b      	uxth	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	4610      	mov	r0, r2
 8001036:	f001 f863 	bl	8002100 <WIZCHIP_WRITE>
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	3301      	adds	r3, #1
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001046:	461a      	mov	r2, r3
 8001048:	8c3b      	ldrh	r3, [r7, #32]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f001 f856 	bl	8002100 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	3301      	adds	r3, #1
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f801 	bl	8002068 <WIZCHIP_READ>
 8001066:	4603      	mov	r3, r0
 8001068:	b29b      	uxth	r3, r3
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800106e:	89ba      	ldrh	r2, [r7, #12]
 8001070:	8abb      	ldrh	r3, [r7, #20]
 8001072:	429a      	cmp	r2, r3
 8001074:	d901      	bls.n	800107a <sendto+0x16e>
 8001076:	8abb      	ldrh	r3, [r7, #20]
 8001078:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4618      	mov	r0, r3
 800107e:	f001 f94d 	bl	800231c <getSn_TX_FSR>
 8001082:	4603      	mov	r3, r0
 8001084:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	3301      	adds	r3, #1
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001092:	4618      	mov	r0, r3
 8001094:	f000 ffe8 	bl	8002068 <WIZCHIP_READ>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <sendto+0x198>
 800109e:	f06f 0303 	mvn.w	r3, #3
 80010a2:	e062      	b.n	800116a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80010a4:	4b33      	ldr	r3, [pc, #204]	; (8001174 <sendto+0x268>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	fa42 f303 	asr.w	r3, r2, r3
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <sendto+0x1b8>
 80010b8:	89ba      	ldrh	r2, [r7, #12]
 80010ba:	8abb      	ldrh	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d901      	bls.n	80010c4 <sendto+0x1b8>
 80010c0:	2300      	movs	r3, #0
 80010c2:	e052      	b.n	800116a <sendto+0x25e>
      if(len <= freesize) break;
 80010c4:	89ba      	ldrh	r2, [r7, #12]
 80010c6:	8abb      	ldrh	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d900      	bls.n	80010ce <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80010cc:	e7d5      	b.n	800107a <sendto+0x16e>
      if(len <= freesize) break;
 80010ce:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80010d0:	89ba      	ldrh	r2, [r7, #12]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f9b6 	bl	8002448 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3301      	adds	r3, #1
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010e8:	2120      	movs	r1, #32
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 f808 	bl	8002100 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80010f0:	bf00      	nop
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	3301      	adds	r3, #1
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 ffb2 	bl	8002068 <WIZCHIP_READ>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f3      	bne.n	80010f2 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	3301      	adds	r3, #1
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001116:	4618      	mov	r0, r3
 8001118:	f000 ffa6 	bl	8002068 <WIZCHIP_READ>
 800111c:	4603      	mov	r3, r0
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00c      	beq.n	8001148 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	3301      	adds	r3, #1
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800113a:	2110      	movs	r1, #16
 800113c:	4618      	mov	r0, r3
 800113e:	f000 ffdf 	bl	8002100 <WIZCHIP_WRITE>
         break;
 8001142:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	e010      	b.n	800116a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0db      	beq.n	800110a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	3301      	adds	r3, #1
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800115e:	2108      	movs	r1, #8
 8001160:	4618      	mov	r0, r3
 8001162:	f000 ffcd 	bl	8002100 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001166:	f06f 030c 	mvn.w	r3, #12
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000d4 	.word	0x200000d4

08001178 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	4613      	mov	r3, r2
 8001188:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800118a:	2300      	movs	r3, #0
 800118c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d902      	bls.n	800119a <recvfrom+0x22>
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	e1d4      	b.n	8001544 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	3301      	adds	r3, #1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ff60 	bl	8002068 <WIZCHIP_READ>
 80011a8:	4603      	mov	r3, r0
 80011aa:	777b      	strb	r3, [r7, #29]
 80011ac:	7f7b      	ldrb	r3, [r7, #29]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b02      	subs	r3, #2
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d902      	bls.n	80011be <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80011b8:	f06f 0304 	mvn.w	r3, #4
 80011bc:	e1c2      	b.n	8001544 <recvfrom+0x3cc>
         break;
 80011be:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80011c0:	89bb      	ldrh	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <recvfrom+0x54>
 80011c6:	f06f 030d 	mvn.w	r3, #13
 80011ca:	e1bb      	b.n	8001544 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	4a88      	ldr	r2, [pc, #544]	; (80013f0 <recvfrom+0x278>)
 80011d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d128      	bne.n	800122a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f8e9 	bl	80023b2 <getSn_RX_RSR>
 80011e0:	4603      	mov	r3, r0
 80011e2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	3301      	adds	r3, #1
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 ff39 	bl	8002068 <WIZCHIP_READ>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <recvfrom+0x8a>
 80011fc:	f06f 0303 	mvn.w	r3, #3
 8001200:	e1a0      	b.n	8001544 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8001202:	4b7c      	ldr	r3, [pc, #496]	; (80013f4 <recvfrom+0x27c>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	fa42 f303 	asr.w	r3, r2, r3
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <recvfrom+0xa8>
 8001216:	8bfb      	ldrh	r3, [r7, #30]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <recvfrom+0xa8>
 800121c:	2300      	movs	r3, #0
 800121e:	e191      	b.n	8001544 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8001220:	8bfb      	ldrh	r3, [r7, #30]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8001226:	e7d7      	b.n	80011d8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8001228:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800122a:	7f7b      	ldrb	r3, [r7, #29]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	2b04      	cmp	r3, #4
 8001232:	d079      	beq.n	8001328 <recvfrom+0x1b0>
 8001234:	2b04      	cmp	r3, #4
 8001236:	f300 8142 	bgt.w	80014be <recvfrom+0x346>
 800123a:	2b02      	cmp	r3, #2
 800123c:	d003      	beq.n	8001246 <recvfrom+0xce>
 800123e:	2b03      	cmp	r3, #3
 8001240:	f000 80dc 	beq.w	80013fc <recvfrom+0x284>
 8001244:	e13b      	b.n	80014be <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <recvfrom+0x278>)
 800124a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d152      	bne.n	80012f8 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8001252:	f107 0114 	add.w	r1, r7, #20
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2208      	movs	r2, #8
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f950 	bl	8002500 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	3301      	adds	r3, #1
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800126c:	2140      	movs	r1, #64	; 0x40
 800126e:	4618      	mov	r0, r3
 8001270:	f000 ff46 	bl	8002100 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001274:	bf00      	nop
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	3301      	adds	r3, #1
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fef0 	bl	8002068 <WIZCHIP_READ>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f3      	bne.n	8001276 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800128e:	7d3a      	ldrb	r2, [r7, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	7d7a      	ldrb	r2, [r7, #21]
 800129a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3302      	adds	r3, #2
 80012a0:	7dba      	ldrb	r2, [r7, #22]
 80012a2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3303      	adds	r3, #3
 80012a8:	7dfa      	ldrb	r2, [r7, #23]
 80012aa:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80012ac:	7e3b      	ldrb	r3, [r7, #24]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	7e7b      	ldrb	r3, [r7, #25]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80012c8:	7eba      	ldrb	r2, [r7, #26]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	b291      	uxth	r1, r2
 80012ce:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <recvfrom+0x278>)
 80012d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <recvfrom+0x278>)
 80012d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	b299      	uxth	r1, r3
 80012e0:	7efb      	ldrb	r3, [r7, #27]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	440a      	add	r2, r1
 80012e8:	b291      	uxth	r1, r2
 80012ea:	4a41      	ldr	r2, [pc, #260]	; (80013f0 <recvfrom+0x278>)
 80012ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	4a41      	ldr	r2, [pc, #260]	; (80013f8 <recvfrom+0x280>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <recvfrom+0x278>)
 80012fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001300:	89ba      	ldrh	r2, [r7, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d202      	bcs.n	800130c <recvfrom+0x194>
 8001306:	89bb      	ldrh	r3, [r7, #12]
 8001308:	83fb      	strh	r3, [r7, #30]
 800130a:	e004      	b.n	8001316 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <recvfrom+0x278>)
 8001310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001314:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8001316:	8bfb      	ldrh	r3, [r7, #30]
 8001318:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800131a:	8bfa      	ldrh	r2, [r7, #30]
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f001 f8ed 	bl	8002500 <wiz_recv_data>
			break;
 8001326:	e0d6      	b.n	80014d6 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <recvfrom+0x278>)
 800132c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d146      	bne.n	80013c2 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8001334:	f107 0114 	add.w	r1, r7, #20
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2202      	movs	r2, #2
 800133c:	4618      	mov	r0, r3
 800133e:	f001 f8df 	bl	8002500 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	3301      	adds	r3, #1
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800134e:	2140      	movs	r1, #64	; 0x40
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fed5 	bl	8002100 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8001356:	bf00      	nop
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	3301      	adds	r3, #1
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fe7f 	bl	8002068 <WIZCHIP_READ>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f3      	bne.n	8001358 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8001370:	7d3a      	ldrb	r2, [r7, #20]
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	b291      	uxth	r1, r2
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <recvfrom+0x278>)
 8001378:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <recvfrom+0x278>)
 8001380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b29a      	uxth	r2, r3
 8001388:	7d7b      	ldrb	r3, [r7, #21]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b29a      	uxth	r2, r3
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	3a02      	subs	r2, #2
 8001394:	b291      	uxth	r1, r2
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <recvfrom+0x278>)
 8001398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <recvfrom+0x278>)
 80013a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d906      	bls.n	80013ba <recvfrom+0x242>
   			{
   			   close(sn);
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fd3e 	bl	8000e30 <close>
   			   return SOCKFATAL_PACKLEN;
 80013b4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80013b8:	e0c4      	b.n	8001544 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <recvfrom+0x280>)
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <recvfrom+0x278>)
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	89ba      	ldrh	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d202      	bcs.n	80013d6 <recvfrom+0x25e>
 80013d0:	89bb      	ldrh	r3, [r7, #12]
 80013d2:	83fb      	strh	r3, [r7, #30]
 80013d4:	e004      	b.n	80013e0 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <recvfrom+0x278>)
 80013da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013de:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80013e0:	8bfa      	ldrh	r2, [r7, #30]
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 f88a 	bl	8002500 <wiz_recv_data>
		   break;
 80013ec:	e073      	b.n	80014d6 <recvfrom+0x35e>
 80013ee:	bf00      	nop
 80013f0:	200000d8 	.word	0x200000d8
 80013f4:	200000d4 	.word	0x200000d4
 80013f8:	200000e8 	.word	0x200000e8
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	4a53      	ldr	r2, [pc, #332]	; (800154c <recvfrom+0x3d4>)
 8001400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d144      	bne.n	8001492 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8001408:	f107 0114 	add.w	r1, r7, #20
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2206      	movs	r2, #6
 8001410:	4618      	mov	r0, r3
 8001412:	f001 f875 	bl	8002500 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	3301      	adds	r3, #1
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001422:	2140      	movs	r1, #64	; 0x40
 8001424:	4618      	mov	r0, r3
 8001426:	f000 fe6b 	bl	8002100 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800142a:	bf00      	nop
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	3301      	adds	r3, #1
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fe15 	bl	8002068 <WIZCHIP_READ>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f3      	bne.n	800142c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8001444:	7d3a      	ldrb	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3301      	adds	r3, #1
 800144e:	7d7a      	ldrb	r2, [r7, #21]
 8001450:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3302      	adds	r3, #2
 8001456:	7dba      	ldrb	r2, [r7, #22]
 8001458:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3303      	adds	r3, #3
 800145e:	7dfa      	ldrb	r2, [r7, #23]
 8001460:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8001462:	7e3a      	ldrb	r2, [r7, #24]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	b291      	uxth	r1, r2
 8001468:	4a38      	ldr	r2, [pc, #224]	; (800154c <recvfrom+0x3d4>)
 800146a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	4a36      	ldr	r2, [pc, #216]	; (800154c <recvfrom+0x3d4>)
 8001472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b299      	uxth	r1, r3
 800147a:	7e7b      	ldrb	r3, [r7, #25]
 800147c:	b29a      	uxth	r2, r3
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	440a      	add	r2, r1
 8001482:	b291      	uxth	r1, r2
 8001484:	4a31      	ldr	r2, [pc, #196]	; (800154c <recvfrom+0x3d4>)
 8001486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	4a30      	ldr	r2, [pc, #192]	; (8001550 <recvfrom+0x3d8>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	4a2d      	ldr	r2, [pc, #180]	; (800154c <recvfrom+0x3d4>)
 8001496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800149a:	89ba      	ldrh	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d202      	bcs.n	80014a6 <recvfrom+0x32e>
 80014a0:	89bb      	ldrh	r3, [r7, #12]
 80014a2:	83fb      	strh	r3, [r7, #30]
 80014a4:	e004      	b.n	80014b0 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <recvfrom+0x3d4>)
 80014aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014ae:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80014b0:	8bfa      	ldrh	r2, [r7, #30]
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f822 	bl	8002500 <wiz_recv_data>
			break;
 80014bc:	e00b      	b.n	80014d6 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80014be:	8bfa      	ldrh	r2, [r7, #30]
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 f877 	bl	80025b8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	491f      	ldr	r1, [pc, #124]	; (800154c <recvfrom+0x3d4>)
 80014ce:	8bfa      	ldrh	r2, [r7, #30]
 80014d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80014d4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	3301      	adds	r3, #1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014e2:	2140      	movs	r1, #64	; 0x40
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fe0b 	bl	8002100 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80014ea:	bf00      	nop
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	3301      	adds	r3, #1
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fdb5 	bl	8002068 <WIZCHIP_READ>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f3      	bne.n	80014ec <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	4a11      	ldr	r2, [pc, #68]	; (800154c <recvfrom+0x3d4>)
 8001508:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	8bfa      	ldrh	r2, [r7, #30]
 8001510:	1a8a      	subs	r2, r1, r2
 8001512:	b291      	uxth	r1, r2
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <recvfrom+0x3d4>)
 8001516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <recvfrom+0x3d4>)
 800151e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	4a09      	ldr	r2, [pc, #36]	; (8001550 <recvfrom+0x3d8>)
 800152a:	5cd2      	ldrb	r2, [r2, r3]
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	b2d1      	uxtb	r1, r2
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <recvfrom+0x3d8>)
 8001536:	54d1      	strb	r1, [r2, r3]
 8001538:	e003      	b.n	8001542 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <recvfrom+0x3d8>)
 800153e:	2100      	movs	r1, #0
 8001540:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8001542:	8bfb      	ldrh	r3, [r7, #30]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200000d8 	.word	0x200000d8
 8001550:	200000e8 	.word	0x200000e8

08001554 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi6_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_SPI1_Init+0x5c>)
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <MX_SPI1_Init+0x60>)
 800155c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_SPI1_Init+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_SPI1_Init+0x5c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_SPI1_Init+0x5c>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_SPI1_Init+0x5c>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_SPI1_Init+0x5c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_SPI1_Init+0x5c>)
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <MX_SPI1_Init+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_SPI1_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MX_SPI1_Init+0x5c>)
 8001592:	2200      	movs	r2, #0
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_SPI1_Init+0x5c>)
 8001598:	220a      	movs	r2, #10
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_SPI1_Init+0x5c>)
 800159e:	f003 f8ad 	bl	80046fc <HAL_SPI_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80015a8:	f7ff fb26 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000b7c 	.word	0x20000b7c
 80015b4:	40013000 	.word	0x40013000

080015b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_SPI2_Init+0x64>)
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <MX_SPI2_Init+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_SPI2_Init+0x64>)
 80015c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_SPI2_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_SPI2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_SPI2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_SPI2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_SPI2_Init+0x64>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SPI2_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_SPI2_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SPI2_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_SPI2_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI2_Init+0x64>)
 8001604:	220a      	movs	r2, #10
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_SPI2_Init+0x64>)
 800160a:	f003 f877 	bl	80046fc <HAL_SPI_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001614:	f7ff faf0 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000904 	.word	0x20000904
 8001620:	40003800 	.word	0x40003800

08001624 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_SPI3_Init+0x5c>)
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <MX_SPI3_Init+0x60>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_SPI3_Init+0x5c>)
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_SPI3_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_SPI3_Init+0x5c>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_SPI3_Init+0x5c>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_SPI3_Init+0x5c>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_SPI3_Init+0x5c>)
 800164e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001652:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_SPI3_Init+0x5c>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_SPI3_Init+0x5c>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_SPI3_Init+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_SPI3_Init+0x5c>)
 8001668:	220a      	movs	r2, #10
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_SPI3_Init+0x5c>)
 800166e:	f003 f845 	bl	80046fc <HAL_SPI_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8001678:	f7ff fabe 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000acc 	.word	0x20000acc
 8001684:	40003c00 	.word	0x40003c00

08001688 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_SPI4_Init+0x5c>)
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <MX_SPI4_Init+0x60>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_SPI4_Init+0x5c>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_SPI4_Init+0x5c>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016cc:	220a      	movs	r2, #10
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_SPI4_Init+0x5c>)
 80016d2:	f003 f813 	bl	80046fc <HAL_SPI_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_SPI4_Init+0x58>
  {
    Error_Handler();
 80016dc:	f7ff fa8c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000b24 	.word	0x20000b24
 80016e8:	40013400 	.word	0x40013400

080016ec <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MX_SPI5_Init+0x5c>)
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <MX_SPI5_Init+0x60>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI5_Init+0x5c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_SPI5_Init+0x5c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI5_Init+0x5c>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI5_Init+0x5c>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI5_Init+0x5c>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI5_Init+0x5c>)
 8001716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171a:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_SPI5_Init+0x5c>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI5_Init+0x5c>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_SPI5_Init+0x5c>)
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI5_Init+0x5c>)
 8001730:	220a      	movs	r2, #10
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_SPI5_Init+0x5c>)
 8001736:	f002 ffe1 	bl	80046fc <HAL_SPI_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_SPI5_Init+0x58>
  {
    Error_Handler();
 8001740:	f7ff fa5a 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000095c 	.word	0x2000095c
 800174c:	40015000 	.word	0x40015000

08001750 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_SPI6_Init+0x5c>)
 8001756:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <MX_SPI6_Init+0x60>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_SPI6_Init+0x5c>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_SPI6_Init+0x5c>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_SPI6_Init+0x5c>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_SPI6_Init+0x5c>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_SPI6_Init+0x5c>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_SPI6_Init+0x5c>)
 800177a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177e:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_SPI6_Init+0x5c>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_SPI6_Init+0x5c>)
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <MX_SPI6_Init+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_SPI6_Init+0x5c>)
 8001794:	220a      	movs	r2, #10
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_SPI6_Init+0x5c>)
 800179a:	f002 ffaf 	bl	80046fc <HAL_SPI_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_SPI6_Init+0x58>
  {
    Error_Handler();
 80017a4:	f7ff fa28 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000a74 	.word	0x20000a74
 80017b0:	40015400 	.word	0x40015400

080017b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b094      	sub	sp, #80	; 0x50
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a9d      	ldr	r2, [pc, #628]	; (8001a48 <HAL_SPI_MspInit+0x294>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d15a      	bne.n	800188c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80017da:	4b9c      	ldr	r3, [pc, #624]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a9b      	ldr	r2, [pc, #620]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80017e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b99      	ldr	r3, [pc, #612]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80017f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
 80017f6:	4b95      	ldr	r3, [pc, #596]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b92      	ldr	r3, [pc, #584]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23e0      	movs	r3, #224	; 0xe0
 8001810:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181e:	2305      	movs	r3, #5
 8001820:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001826:	4619      	mov	r1, r3
 8001828:	4889      	ldr	r0, [pc, #548]	; (8001a50 <HAL_SPI_MspInit+0x29c>)
 800182a:	f002 f959 	bl	8003ae0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800182e:	4b89      	ldr	r3, [pc, #548]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001830:	4a89      	ldr	r2, [pc, #548]	; (8001a58 <HAL_SPI_MspInit+0x2a4>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001834:	4b87      	ldr	r3, [pc, #540]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001836:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800183a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183c:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b84      	ldr	r3, [pc, #528]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b82      	ldr	r3, [pc, #520]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001850:	4b80      	ldr	r3, [pc, #512]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001856:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800185c:	4b7d      	ldr	r3, [pc, #500]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001868:	4b7a      	ldr	r3, [pc, #488]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800186e:	4879      	ldr	r0, [pc, #484]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001870:	f001 fe4c 	bl	800350c <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800187a:	f7ff f9bd 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a74      	ldr	r2, [pc, #464]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c
 8001884:	4a73      	ldr	r2, [pc, #460]	; (8001a54 <HAL_SPI_MspInit+0x2a0>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800188a:	e218      	b.n	8001cbe <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a72      	ldr	r2, [pc, #456]	; (8001a5c <HAL_SPI_MspInit+0x2a8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d178      	bne.n	8001988 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
 800189a:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a6b      	ldr	r2, [pc, #428]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b69      	ldr	r3, [pc, #420]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
 80018b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a64      	ldr	r2, [pc, #400]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d2:	4b5e      	ldr	r3, [pc, #376]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a5d      	ldr	r2, [pc, #372]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b5b      	ldr	r3, [pc, #364]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ea:	230c      	movs	r3, #12
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018fa:	2305      	movs	r3, #5
 80018fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001902:	4619      	mov	r1, r3
 8001904:	4856      	ldr	r0, [pc, #344]	; (8001a60 <HAL_SPI_MspInit+0x2ac>)
 8001906:	f002 f8eb 	bl	8003ae0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800190a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800191c:	2305      	movs	r3, #5
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001924:	4619      	mov	r1, r3
 8001926:	484f      	ldr	r0, [pc, #316]	; (8001a64 <HAL_SPI_MspInit+0x2b0>)
 8001928:	f002 f8da 	bl	8003ae0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 800192e:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_SPI_MspInit+0x2b8>)
 8001930:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001944:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 8001946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001952:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001958:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800196a:	483f      	ldr	r0, [pc, #252]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 800196c:	f001 fdce 	bl	800350c <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 8001976:	f7ff f93f 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 800197e:	649a      	str	r2, [r3, #72]	; 0x48
 8001980:	4a39      	ldr	r2, [pc, #228]	; (8001a68 <HAL_SPI_MspInit+0x2b4>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001986:	e19a      	b.n	8001cbe <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_SPI_MspInit+0x2bc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d174      	bne.n	8001a7c <HAL_SPI_MspInit+0x2c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 800199c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_SPI_MspInit+0x298>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019dc:	2306      	movs	r3, #6
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019e4:	4619      	mov	r1, r3
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <HAL_SPI_MspInit+0x2ac>)
 80019e8:	f002 f87a 	bl	8003ae0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_SPI_MspInit+0x2c4>)
 80019f0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001a2a:	4812      	ldr	r0, [pc, #72]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a2c:	f001 fd6e 	bl	800350c <HAL_DMA_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_SPI_MspInit+0x286>
      Error_Handler();
 8001a36:	f7ff f8df 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_SPI_MspInit+0x2c0>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a46:	e13a      	b.n	8001cbe <HAL_SPI_MspInit+0x50a>
 8001a48:	40013000 	.word	0x40013000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	20000bd4 	.word	0x20000bd4
 8001a58:	40026410 	.word	0x40026410
 8001a5c:	40003800 	.word	0x40003800
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020400 	.word	0x40020400
 8001a68:	20000c94 	.word	0x20000c94
 8001a6c:	40026070 	.word	0x40026070
 8001a70:	40003c00 	.word	0x40003c00
 8001a74:	20000cf4 	.word	0x20000cf4
 8001a78:	40026010 	.word	0x40026010
  else if(spiHandle->Instance==SPI4)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a91      	ldr	r2, [pc, #580]	; (8001cc8 <HAL_SPI_MspInit+0x514>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d15a      	bne.n	8001b3c <HAL_SPI_MspInit+0x388>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	4b90      	ldr	r3, [pc, #576]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a8f      	ldr	r2, [pc, #572]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	4b89      	ldr	r3, [pc, #548]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a88      	ldr	r2, [pc, #544]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001aac:	f043 0310 	orr.w	r3, r3, #16
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b86      	ldr	r3, [pc, #536]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001abe:	2364      	movs	r3, #100	; 0x64
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	487d      	ldr	r0, [pc, #500]	; (8001cd0 <HAL_SPI_MspInit+0x51c>)
 8001ada:	f002 f801 	bl	8003ae0 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001ade:	4b7d      	ldr	r3, [pc, #500]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001ae0:	4a7d      	ldr	r2, [pc, #500]	; (8001cd8 <HAL_SPI_MspInit+0x524>)
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8001ae4:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001ae6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001aea:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aec:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af2:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af8:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afe:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b00:	4b74      	ldr	r3, [pc, #464]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b06:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001b0c:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b18:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001b1e:	486d      	ldr	r0, [pc, #436]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b20:	f001 fcf4 	bl	800350c <HAL_DMA_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_SPI_MspInit+0x37a>
      Error_Handler();
 8001b2a:	f7ff f865 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a68      	ldr	r2, [pc, #416]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b32:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <HAL_SPI_MspInit+0x520>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b3a:	e0c0      	b.n	8001cbe <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI5)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <HAL_SPI_MspInit+0x528>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d15b      	bne.n	8001bfe <HAL_SPI_MspInit+0x44a>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a5f      	ldr	r2, [pc, #380]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b5d      	ldr	r3, [pc, #372]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a58      	ldr	r2, [pc, #352]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b7e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b90:	2305      	movs	r3, #5
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4851      	ldr	r0, [pc, #324]	; (8001ce0 <HAL_SPI_MspInit+0x52c>)
 8001b9c:	f001 ffa0 	bl	8003ae0 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream5;
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001ba2:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_SPI_MspInit+0x534>)
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
 8001ba6:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001ba8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001bac:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bae:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bba:	4b4a      	ldr	r3, [pc, #296]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc0:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc2:	4b48      	ldr	r3, [pc, #288]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8001bce:	4b45      	ldr	r3, [pc, #276]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd4:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bda:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8001be0:	4840      	ldr	r0, [pc, #256]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001be2:	f001 fc93 	bl	800350c <HAL_DMA_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_SPI_MspInit+0x43c>
      Error_Handler();
 8001bec:	f7ff f804 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bf6:	4a3b      	ldr	r2, [pc, #236]	; (8001ce4 <HAL_SPI_MspInit+0x530>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bfc:	e05f      	b.n	8001cbe <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI6)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_SPI_MspInit+0x538>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d15a      	bne.n	8001cbe <HAL_SPI_MspInit+0x50a>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	4a2e      	ldr	r2, [pc, #184]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c16:	6453      	str	r3, [r2, #68]	; 0x44
 8001c18:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_SPI_MspInit+0x518>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001c40:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001c52:	2305      	movs	r3, #5
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4824      	ldr	r0, [pc, #144]	; (8001cf0 <HAL_SPI_MspInit+0x53c>)
 8001c5e:	f001 ff3f 	bl	8003ae0 <HAL_GPIO_Init>
    hdma_spi6_rx.Instance = DMA2_Stream6;
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <HAL_SPI_MspInit+0x544>)
 8001c66:	601a      	str	r2, [r3, #0]
    hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
    hdma_spi6_rx.Init.Mode = DMA_NORMAL;
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
    hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
 8001ca2:	4814      	ldr	r0, [pc, #80]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001ca4:	f001 fc32 	bl	800350c <HAL_DMA_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_SPI_MspInit+0x4fe>
      Error_Handler();
 8001cae:	f7fe ffa3 	bl	8000bf8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001cb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_SPI_MspInit+0x540>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cbe:	bf00      	nop
 8001cc0:	3750      	adds	r7, #80	; 0x50
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013400 	.word	0x40013400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	20000a14 	.word	0x20000a14
 8001cd8:	40026458 	.word	0x40026458
 8001cdc:	40015000 	.word	0x40015000
 8001ce0:	40021400 	.word	0x40021400
 8001ce4:	200009b4 	.word	0x200009b4
 8001ce8:	40026488 	.word	0x40026488
 8001cec:	40015400 	.word	0x40015400
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	20000c34 	.word	0x20000c34
 8001cf8:	400264a0 	.word	0x400264a0

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f001 fa62 	bl	8003260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <DMA1_Stream0_IRQHandler+0x10>)
 8001da6:	f001 fc5f 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000cf4 	.word	0x20000cf4

08001db4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <DMA1_Stream4_IRQHandler+0x10>)
 8001dba:	f001 fc55 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000c94 	.word	0x20000c94

08001dc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <DMA2_Stream0_IRQHandler+0x10>)
 8001dce:	f001 fc4b 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000bd4 	.word	0x20000bd4

08001ddc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <DMA2_Stream3_IRQHandler+0x10>)
 8001de2:	f001 fc41 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000a14 	.word	0x20000a14

08001df0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <DMA2_Stream5_IRQHandler+0x10>)
 8001df6:	f001 fc37 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200009b4 	.word	0x200009b4

08001e04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <DMA2_Stream6_IRQHandler+0x10>)
 8001e0a:	f001 fc2d 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000c34 	.word	0x20000c34

08001e18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e00a      	b.n	8001e40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e2a:	f3af 8000 	nop.w
 8001e2e:	4601      	mov	r1, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf0      	blt.n	8001e2a <_read+0x12>
	}

return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e009      	b.n	8001e78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fcf5 	bl	800085c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf1      	blt.n	8001e64 <_write+0x12>
	}
	return len;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_close>:

int _close(int file)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	return -1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_isatty>:

int _isatty(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f003 fc84 	bl	8005830 <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20030000 	.word	0x20030000
 8001f54:	00000400 	.word	0x00000400
 8001f58:	200000f0 	.word	0x200000f0
 8001f5c:	20000db0 	.word	0x20000db0

08001f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <MX_UART4_Init+0x50>)
 8001f8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_UART4_Init+0x4c>)
 8001fbc:	f003 f946 	bl	800524c <HAL_UART_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001fc6:	f7fe fe17 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000d54 	.word	0x20000d54
 8001fd4:	40004c00 	.word	0x40004c00

08001fd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_UART_MspInit+0x84>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12b      	bne.n	8002052 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_UART_MspInit+0x88>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_UART_MspInit+0x88>)
 8002004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_UART_MspInit+0x88>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_UART_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_UART_MspInit+0x88>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_UART_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002032:	2303      	movs	r3, #3
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002042:	2308      	movs	r3, #8
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_UART_MspInit+0x8c>)
 800204e:	f001 fd47 	bl	8003ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40004c00 	.word	0x40004c00
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000

08002068 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <WIZCHIP_READ+0x94>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <WIZCHIP_READ+0x94>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <WIZCHIP_READ+0x94>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <WIZCHIP_READ+0x24>
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <WIZCHIP_READ+0x94>)
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d114      	bne.n	80020b6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <WIZCHIP_READ+0x94>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	0c12      	lsrs	r2, r2, #16
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	4610      	mov	r0, r2
 8002098:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <WIZCHIP_READ+0x94>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	0a12      	lsrs	r2, r2, #8
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	4610      	mov	r0, r2
 80020a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <WIZCHIP_READ+0x94>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	4610      	mov	r0, r2
 80020b2:	4798      	blx	r3
 80020b4:	e011      	b.n	80020da <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <WIZCHIP_READ+0x94>)
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f107 020c 	add.w	r2, r7, #12
 80020d4:	2103      	movs	r1, #3
 80020d6:	4610      	mov	r0, r2
 80020d8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <WIZCHIP_READ+0x94>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4798      	blx	r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <WIZCHIP_READ+0x94>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <WIZCHIP_READ+0x94>)
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	4798      	blx	r3
   return ret;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000020 	.word	0x20000020

08002100 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <WIZCHIP_WRITE+0x98>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <WIZCHIP_WRITE+0x98>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <WIZCHIP_WRITE+0x98>)
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d119      	bne.n	800215c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <WIZCHIP_WRITE+0x98>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	0c12      	lsrs	r2, r2, #16
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	4610      	mov	r0, r2
 8002134:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <WIZCHIP_WRITE+0x98>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	0a12      	lsrs	r2, r2, #8
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	4610      	mov	r0, r2
 8002142:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <WIZCHIP_WRITE+0x98>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	4610      	mov	r0, r2
 800214e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <WIZCHIP_WRITE+0x98>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	4610      	mov	r0, r2
 8002158:	4798      	blx	r3
 800215a:	e013      	b.n	8002184 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	b2db      	uxtb	r3, r3
 8002162:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	b2db      	uxtb	r3, r3
 800216a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <WIZCHIP_WRITE+0x98>)
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	f107 020c 	add.w	r2, r7, #12
 800217e:	2104      	movs	r1, #4
 8002180:	4610      	mov	r0, r2
 8002182:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <WIZCHIP_WRITE+0x98>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <WIZCHIP_WRITE+0x98>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	4798      	blx	r3
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000020 	.word	0x20000020

0800219c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4798      	blx	r3
   WIZCHIP.CS._select();
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <WIZCHIP_READ_BUF+0x2a>
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d126      	bne.n	8002214 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	0c12      	lsrs	r2, r2, #16
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	4610      	mov	r0, r2
 80021d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80021d4:	4b20      	ldr	r3, [pc, #128]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	0a12      	lsrs	r2, r2, #8
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	4610      	mov	r0, r2
 80021e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	4610      	mov	r0, r2
 80021ec:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	82fb      	strh	r3, [r7, #22]
 80021f2:	e00a      	b.n	800220a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	8afa      	ldrh	r2, [r7, #22]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	188c      	adds	r4, r1, r2
 80021fe:	4798      	blx	r3
 8002200:	4603      	mov	r3, r0
 8002202:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002204:	8afb      	ldrh	r3, [r7, #22]
 8002206:	3301      	adds	r3, #1
 8002208:	82fb      	strh	r3, [r7, #22]
 800220a:	8afa      	ldrh	r2, [r7, #22]
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3f0      	bcc.n	80021f4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002212:	e017      	b.n	8002244 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	b2db      	uxtb	r3, r3
 800221a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b2db      	uxtb	r3, r3
 8002222:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f107 0210 	add.w	r2, r7, #16
 8002232:	2103      	movs	r1, #3
 8002234:	4610      	mov	r0, r2
 8002236:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	4611      	mov	r1, r2
 8002240:	68b8      	ldr	r0, [r7, #8]
 8002242:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <WIZCHIP_READ_BUF+0xbc>)
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	4798      	blx	r3
}
 8002250:	bf00      	nop
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd90      	pop	{r4, r7, pc}
 8002258:	20000020 	.word	0x20000020

0800225c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d126      	bne.n	80022d4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	0c12      	lsrs	r2, r2, #16
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	4610      	mov	r0, r2
 8002292:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	0a12      	lsrs	r2, r2, #8
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4610      	mov	r0, r2
 80022a0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4610      	mov	r0, r2
 80022ac:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	82fb      	strh	r3, [r7, #22]
 80022b2:	e00a      	b.n	80022ca <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	8afa      	ldrh	r2, [r7, #22]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	440a      	add	r2, r1
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80022c4:	8afb      	ldrh	r3, [r7, #22]
 80022c6:	3301      	adds	r3, #1
 80022c8:	82fb      	strh	r3, [r7, #22]
 80022ca:	8afa      	ldrh	r2, [r7, #22]
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d3f0      	bcc.n	80022b4 <WIZCHIP_WRITE_BUF+0x58>
 80022d2:	e017      	b.n	8002304 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	f107 0210 	add.w	r2, r7, #16
 80022f2:	2103      	movs	r1, #3
 80022f4:	4610      	mov	r0, r2
 80022f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	4611      	mov	r1, r2
 8002300:	68b8      	ldr	r0, [r7, #8]
 8002302:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800230a:	4b03      	ldr	r3, [pc, #12]	; (8002318 <WIZCHIP_WRITE_BUF+0xbc>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	4798      	blx	r3
}
 8002310:	bf00      	nop
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000020 	.word	0x20000020

0800231c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002326:	2300      	movs	r3, #0
 8002328:	81fb      	strh	r3, [r7, #14]
 800232a:	2300      	movs	r3, #0
 800232c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	3301      	adds	r3, #1
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fe94 	bl	8002068 <WIZCHIP_READ>
 8002340:	4603      	mov	r3, r0
 8002342:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b29c      	uxth	r4, r3
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3301      	adds	r3, #1
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fe86 	bl	8002068 <WIZCHIP_READ>
 800235c:	4603      	mov	r3, r0
 800235e:	b29b      	uxth	r3, r3
 8002360:	4423      	add	r3, r4
 8002362:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002364:	89bb      	ldrh	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01a      	beq.n	80023a0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	3301      	adds	r3, #1
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe76 	bl	8002068 <WIZCHIP_READ>
 800237c:	4603      	mov	r3, r0
 800237e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	b29c      	uxth	r4, r3
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	3301      	adds	r3, #1
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe68 	bl	8002068 <WIZCHIP_READ>
 8002398:	4603      	mov	r3, r0
 800239a:	b29b      	uxth	r3, r3
 800239c:	4423      	add	r3, r4
 800239e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80023a0:	89fa      	ldrh	r2, [r7, #14]
 80023a2:	89bb      	ldrh	r3, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1c2      	bne.n	800232e <getSn_TX_FSR+0x12>
   return val;
 80023a8:	89fb      	ldrh	r3, [r7, #14]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd90      	pop	{r4, r7, pc}

080023b2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80023b2:	b590      	push	{r4, r7, lr}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80023bc:	2300      	movs	r3, #0
 80023be:	81fb      	strh	r3, [r7, #14]
 80023c0:	2300      	movs	r3, #0
 80023c2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	3301      	adds	r3, #1
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fe49 	bl	8002068 <WIZCHIP_READ>
 80023d6:	4603      	mov	r3, r0
 80023d8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80023da:	89bb      	ldrh	r3, [r7, #12]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b29c      	uxth	r4, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	3301      	adds	r3, #1
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe3b 	bl	8002068 <WIZCHIP_READ>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4423      	add	r3, r4
 80023f8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80023fa:	89bb      	ldrh	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01a      	beq.n	8002436 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	3301      	adds	r3, #1
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fe2b 	bl	8002068 <WIZCHIP_READ>
 8002412:	4603      	mov	r3, r0
 8002414:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	b29c      	uxth	r4, r3
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	3301      	adds	r3, #1
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe1d 	bl	8002068 <WIZCHIP_READ>
 800242e:	4603      	mov	r3, r0
 8002430:	b29b      	uxth	r3, r3
 8002432:	4423      	add	r3, r4
 8002434:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002436:	89fa      	ldrh	r2, [r7, #14]
 8002438:	89bb      	ldrh	r3, [r7, #12]
 800243a:	429a      	cmp	r2, r3
 800243c:	d1c2      	bne.n	80023c4 <getSn_RX_RSR+0x12>
   return val;
 800243e:	89fb      	ldrh	r3, [r7, #14]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}

08002448 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	4613      	mov	r3, r2
 8002456:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002460:	88bb      	ldrh	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d048      	beq.n	80024f8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	3301      	adds	r3, #1
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fdf8 	bl	8002068 <WIZCHIP_READ>
 8002478:	4603      	mov	r3, r0
 800247a:	b29b      	uxth	r3, r3
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b29c      	uxth	r4, r3
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	3301      	adds	r3, #1
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fdeb 	bl	8002068 <WIZCHIP_READ>
 8002492:	4603      	mov	r3, r0
 8002494:	b29b      	uxth	r3, r3
 8002496:	4423      	add	r3, r4
 8002498:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	79fa      	ldrb	r2, [r7, #7]
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	3202      	adds	r2, #2
 80024a4:	00d2      	lsls	r2, r2, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80024aa:	88bb      	ldrh	r3, [r7, #4]
 80024ac:	461a      	mov	r2, r3
 80024ae:	6839      	ldr	r1, [r7, #0]
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f7ff fed3 	bl	800225c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80024b6:	89fa      	ldrh	r2, [r7, #14]
 80024b8:	88bb      	ldrh	r3, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	3301      	adds	r3, #1
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80024ca:	461a      	mov	r2, r3
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f7ff fe12 	bl	8002100 <WIZCHIP_WRITE>
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	3301      	adds	r3, #1
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80024e8:	461a      	mov	r2, r3
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f7ff fe05 	bl	8002100 <WIZCHIP_WRITE>
 80024f6:	e000      	b.n	80024fa <wiz_send_data+0xb2>
   if(len == 0)  return;
 80024f8:	bf00      	nop
}
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d048      	beq.n	80025b0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	3301      	adds	r3, #1
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fd9c 	bl	8002068 <WIZCHIP_READ>
 8002530:	4603      	mov	r3, r0
 8002532:	b29b      	uxth	r3, r3
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	b29c      	uxth	r4, r3
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	3301      	adds	r3, #1
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd8f 	bl	8002068 <WIZCHIP_READ>
 800254a:	4603      	mov	r3, r0
 800254c:	b29b      	uxth	r3, r3
 800254e:	4423      	add	r3, r4
 8002550:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	79fa      	ldrb	r2, [r7, #7]
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	3203      	adds	r2, #3
 800255c:	00d2      	lsls	r2, r2, #3
 800255e:	4413      	add	r3, r2
 8002560:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002562:	88bb      	ldrh	r3, [r7, #4]
 8002564:	461a      	mov	r2, r3
 8002566:	6839      	ldr	r1, [r7, #0]
 8002568:	68b8      	ldr	r0, [r7, #8]
 800256a:	f7ff fe17 	bl	800219c <WIZCHIP_READ_BUF>
   ptr += len;
 800256e:	89fa      	ldrh	r2, [r7, #14]
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	3301      	adds	r3, #1
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002582:	461a      	mov	r2, r3
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	b29b      	uxth	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f7ff fdb6 	bl	8002100 <WIZCHIP_WRITE>
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3301      	adds	r3, #1
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80025a0:	461a      	mov	r2, r3
 80025a2:	89fb      	ldrh	r3, [r7, #14]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7ff fda9 	bl	8002100 <WIZCHIP_WRITE>
 80025ae:	e000      	b.n	80025b2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80025b0:	bf00      	nop
}
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd90      	pop	{r4, r7, pc}

080025b8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	460a      	mov	r2, r1
 80025c2:	71fb      	strb	r3, [r7, #7]
 80025c4:	4613      	mov	r3, r2
 80025c6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3301      	adds	r3, #1
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fd45 	bl	8002068 <WIZCHIP_READ>
 80025de:	4603      	mov	r3, r0
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	b29c      	uxth	r4, r3
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	3301      	adds	r3, #1
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fd38 	bl	8002068 <WIZCHIP_READ>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4423      	add	r3, r4
 80025fe:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002600:	89fa      	ldrh	r2, [r7, #14]
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	3301      	adds	r3, #1
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002614:	461a      	mov	r2, r3
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	b29b      	uxth	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f7ff fd6d 	bl	8002100 <WIZCHIP_WRITE>
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	3301      	adds	r3, #1
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002632:	461a      	mov	r2, r3
 8002634:	89fb      	ldrh	r3, [r7, #14]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f7ff fd60 	bl	8002100 <WIZCHIP_WRITE>
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bd90      	pop	{r4, r7, pc}

08002648 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	2300      	movs	r3, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	807b      	strh	r3, [r7, #2]
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <reg_wizchip_cs_cbfunc+0x16>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <reg_wizchip_cs_cbfunc+0x40>)
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <reg_wizchip_cs_cbfunc+0x44>)
 800272a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <reg_wizchip_cs_cbfunc+0x40>)
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <reg_wizchip_cs_cbfunc+0x48>)
 8002730:	619a      	str	r2, [r3, #24]
 8002732:	e006      	b.n	8002742 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <reg_wizchip_cs_cbfunc+0x40>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <reg_wizchip_cs_cbfunc+0x40>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6193      	str	r3, [r2, #24]
   }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000020 	.word	0x20000020
 8002754:	08002665 	.word	0x08002665
 8002758:	08002673 	.word	0x08002673

0800275c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002766:	bf00      	nop
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <reg_wizchip_spi_cbfunc+0x4c>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f9      	beq.n	8002768 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <reg_wizchip_spi_cbfunc+0x24>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <reg_wizchip_spi_cbfunc+0x4c>)
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <reg_wizchip_spi_cbfunc+0x50>)
 8002784:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <reg_wizchip_spi_cbfunc+0x4c>)
 8002788:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <reg_wizchip_spi_cbfunc+0x54>)
 800278a:	621a      	str	r2, [r3, #32]
 800278c:	e006      	b.n	800279c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800278e:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <reg_wizchip_spi_cbfunc+0x4c>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <reg_wizchip_spi_cbfunc+0x4c>)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6213      	str	r3, [r2, #32]
   }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	20000020 	.word	0x20000020
 80027ac:	080026b9 	.word	0x080026b9
 80027b0:	080026c9 	.word	0x080026c9

080027b4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80027be:	bf00      	nop
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f9      	beq.n	80027c0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <reg_wizchip_spiburst_cbfunc+0x24>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <reg_wizchip_spiburst_cbfunc+0x50>)
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <reg_wizchip_spiburst_cbfunc+0x54>)
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
 80027e4:	e006      	b.n	80027f4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80027e6:	4a06      	ldr	r2, [pc, #24]	; (8002800 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	20000020 	.word	0x20000020
 8002804:	080026df 	.word	0x080026df
 8002808:	080026f7 	.word	0x080026f7

0800280c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	f200 80c2 	bhi.w	80029b0 <ctlwizchip+0x1a4>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <ctlwizchip+0x28>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002875 	.word	0x08002875
 8002838:	0800287b 	.word	0x0800287b
 800283c:	080028a7 	.word	0x080028a7
 8002840:	0800289b 	.word	0x0800289b
 8002844:	080028b5 	.word	0x080028b5
 8002848:	080028c1 	.word	0x080028c1
 800284c:	080028cf 	.word	0x080028cf
 8002850:	080028f5 	.word	0x080028f5
 8002854:	0800291b 	.word	0x0800291b
 8002858:	08002955 	.word	0x08002955
 800285c:	0800295b 	.word	0x0800295b
 8002860:	08002963 	.word	0x08002963
 8002864:	080029b7 	.word	0x080029b7
 8002868:	0800296b 	.word	0x0800296b
 800286c:	08002979 	.word	0x08002979
 8002870:	08002995 	.word	0x08002995
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002874:	f000 f8e6 	bl	8002a44 <wizchip_sw_reset>
         break;
 8002878:	e09e      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3308      	adds	r3, #8
 8002888:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f923 	bl	8002adc <wizchip_init>
 8002896:	4603      	mov	r3, r0
 8002898:	e08f      	b.n	80029ba <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f9a8 	bl	8002bf4 <wizchip_clrinterrupt>
         break;
 80028a4:	e088      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80028a6:	f000 f9c3 	bl	8002c30 <wizchip_getinterrupt>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	801a      	strh	r2, [r3, #0]
         break;
 80028b2:	e081      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f9de 	bl	8002c7a <wizchip_setinterruptmask>
         break;         
 80028be:	e07b      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80028c0:	f000 f9f6 	bl	8002cb0 <wizchip_getinterruptmask>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	801a      	strh	r2, [r3, #0]
         break;
 80028cc:	e074      	b.n	80029b8 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4619      	mov	r1, r3
 80028da:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80028de:	f7ff fc0f 	bl	8002100 <WIZCHIP_WRITE>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80028ee:	f7ff fc07 	bl	8002100 <WIZCHIP_WRITE>
         break;
 80028f2:	e061      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80028f4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80028f8:	f7ff fbb6 	bl	8002068 <WIZCHIP_READ>
 80028fc:	4603      	mov	r3, r0
 80028fe:	b29b      	uxth	r3, r3
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b29c      	uxth	r4, r3
 8002904:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002908:	f7ff fbae 	bl	8002068 <WIZCHIP_READ>
 800290c:	4603      	mov	r3, r0
 800290e:	b29b      	uxth	r3, r3
 8002910:	4423      	add	r3, r4
 8002912:	b29a      	uxth	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	801a      	strh	r2, [r3, #0]
         break;
 8002918:	e04e      	b.n	80029b8 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <ctlwizchip+0x1b8>)
 800291c:	789a      	ldrb	r2, [r3, #2]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <ctlwizchip+0x1b8>)
 8002928:	78d2      	ldrb	r2, [r2, #3]
 800292a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	3302      	adds	r3, #2
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <ctlwizchip+0x1b8>)
 8002932:	7912      	ldrb	r2, [r2, #4]
 8002934:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3303      	adds	r3, #3
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <ctlwizchip+0x1b8>)
 800293c:	7952      	ldrb	r2, [r2, #5]
 800293e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	3304      	adds	r3, #4
 8002944:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <ctlwizchip+0x1b8>)
 8002946:	7992      	ldrb	r2, [r2, #6]
 8002948:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	3305      	adds	r3, #5
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
         break;
 8002952:	e031      	b.n	80029b8 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002954:	f000 f9fe 	bl	8002d54 <wizphy_reset>
         break;
 8002958:	e02e      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800295a:	6838      	ldr	r0, [r7, #0]
 800295c:	f000 fa21 	bl	8002da2 <wizphy_setphyconf>
         break;
 8002960:	e02a      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002962:	6838      	ldr	r0, [r7, #0]
 8002964:	f000 fa5f 	bl	8002e26 <wizphy_getphyconf>
         break;
 8002968:	e026      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fac2 	bl	8002ef8 <wizphy_setphypmode>
 8002974:	4603      	mov	r3, r0
 8002976:	e020      	b.n	80029ba <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002978:	f000 f9d3 	bl	8002d22 <wizphy_getphypmode>
 800297c:	4603      	mov	r3, r0
 800297e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d102      	bne.n	800298c <ctlwizchip+0x180>
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e016      	b.n	80029ba <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	7dfa      	ldrb	r2, [r7, #23]
 8002990:	701a      	strb	r2, [r3, #0]
         break;
 8002992:	e011      	b.n	80029b8 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002994:	f000 f9af 	bl	8002cf6 <wizphy_getphylink>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d102      	bne.n	80029a8 <ctlwizchip+0x19c>
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	e008      	b.n	80029ba <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	7dfa      	ldrb	r2, [r7, #23]
 80029ac:	701a      	strb	r2, [r3, #0]
         break;
 80029ae:	e003      	b.n	80029b8 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	e001      	b.n	80029ba <ctlwizchip+0x1ae>
         break;
 80029b6:	bf00      	nop
   }
   return 0;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000020 	.word	0x20000020

080029c8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d82c      	bhi.n	8002a34 <ctlnetwork+0x6c>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <ctlnetwork+0x18>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	080029f9 	.word	0x080029f9
 80029e4:	08002a01 	.word	0x08002a01
 80029e8:	08002a09 	.word	0x08002a09
 80029ec:	08002a17 	.word	0x08002a17
 80029f0:	08002a25 	.word	0x08002a25
 80029f4:	08002a2d 	.word	0x08002a2d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80029f8:	6838      	ldr	r0, [r7, #0]
 80029fa:	f000 fac7 	bl	8002f8c <wizchip_setnetinfo>
         break;
 80029fe:	e01c      	b.n	8002a3a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002a00:	6838      	ldr	r0, [r7, #0]
 8002a02:	f000 fb03 	bl	800300c <wizchip_getnetinfo>
         break;
 8002a06:	e018      	b.n	8002a3a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fb3d 	bl	800308c <wizchip_setnetmode>
 8002a12:	4603      	mov	r3, r0
 8002a14:	e012      	b.n	8002a3c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002a16:	f000 fb5b 	bl	80030d0 <wizchip_getnetmode>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	701a      	strb	r2, [r3, #0]
         break;
 8002a22:	e00a      	b.n	8002a3a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002a24:	6838      	ldr	r0, [r7, #0]
 8002a26:	f000 fb5b 	bl	80030e0 <wizchip_settimeout>
         break;
 8002a2a:	e006      	b.n	8002a3a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f000 fb78 	bl	8003122 <wizchip_gettimeout>
         break;
 8002a32:	e002      	b.n	8002a3a <ctlnetwork+0x72>
      default:
         return -1;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
 8002a38:	e000      	b.n	8002a3c <ctlnetwork+0x74>
   }
   return 0;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a54:	f7ff fba2 	bl	800219c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a64:	f7ff fb9a 	bl	800219c <WIZCHIP_READ_BUF>
 8002a68:	f107 0310 	add.w	r3, r7, #16
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a74:	f7ff fb92 	bl	800219c <WIZCHIP_READ_BUF>
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a84:	f7ff fb8a 	bl	800219c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7ff fb38 	bl	8002100 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7ff fae9 	bl	8002068 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2206      	movs	r2, #6
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002aa0:	f7ff fbdc 	bl	800225c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ab0:	f7ff fbd4 	bl	800225c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	2204      	movs	r2, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002ac0:	f7ff fbcc 	bl	800225c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002ad0:	f7ff fbc4 	bl	800225c <WIZCHIP_WRITE_BUF>
}
 8002ad4:	bf00      	nop
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002aea:	f7ff ffab 	bl	8002a44 <wizchip_sw_reset>
   if(txsize)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d03b      	beq.n	8002b6c <wizchip_init+0x90>
   {
      tmp = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	e015      	b.n	8002b2a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	7bbb      	ldrb	r3, [r7, #14]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	dd02      	ble.n	8002b1e <wizchip_init+0x42>
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	e066      	b.n	8002bec <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	2b07      	cmp	r3, #7
 8002b30:	dde5      	ble.n	8002afe <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e015      	b.n	8002b64 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3301      	adds	r3, #1
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002b46:	4618      	mov	r0, r3
 8002b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7ff fad4 	bl	8002100 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b68:	2b07      	cmp	r3, #7
 8002b6a:	dde5      	ble.n	8002b38 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d03b      	beq.n	8002bea <wizchip_init+0x10e>
   {
      tmp = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e015      	b.n	8002ba8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	7bbb      	ldrb	r3, [r7, #14]
 8002b88:	4413      	add	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	dd02      	ble.n	8002b9c <wizchip_init+0xc0>
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	e027      	b.n	8002bec <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bac:	2b07      	cmp	r3, #7
 8002bae:	dde5      	ble.n	8002b7c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e015      	b.n	8002be2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f7ff fa95 	bl	8002100 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be6:	2b07      	cmp	r3, #7
 8002be8:	dde5      	ble.n	8002bb6 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	f023 030f 	bic.w	r3, r3, #15
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4619      	mov	r1, r3
 8002c14:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002c18:	f7ff fa72 	bl	8002100 <WIZCHIP_WRITE>
   setSIR(sir);
 8002c1c:	7bbb      	ldrb	r3, [r7, #14]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002c24:	f7ff fa6c 	bl	8002100 <WIZCHIP_WRITE>
#endif   
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002c42:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002c46:	f7ff fa0f 	bl	8002068 <WIZCHIP_READ>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f023 030f 	bic.w	r3, r3, #15
 8002c50:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002c52:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002c56:	f7ff fa07 	bl	8002068 <WIZCHIP_READ>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002c5e:	79bb      	ldrb	r3, [r7, #6]
 8002c60:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002c62:	88bb      	ldrh	r3, [r7, #4]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002c70:	88bb      	ldrh	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	4619      	mov	r1, r3
 8002c94:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002c98:	f7ff fa32 	bl	8002100 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002ca4:	f7ff fa2c 	bl	8002100 <WIZCHIP_WRITE>
#endif   
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002cc2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002cc6:	f7ff f9cf 	bl	8002068 <WIZCHIP_READ>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002cce:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002cd2:	f7ff f9c9 	bl	8002068 <WIZCHIP_READ>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002cde:	88bb      	ldrh	r3, [r7, #4]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002cec:	88bb      	ldrh	r3, [r7, #4]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002d00:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d04:	f7ff f9b0 	bl	8002068 <WIZCHIP_READ>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8002d12:	2301      	movs	r3, #1
 8002d14:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002d2c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d30:	f7ff f99a 	bl	8002068 <WIZCHIP_READ>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d3a:	2b30      	cmp	r3, #48	; 0x30
 8002d3c:	d102      	bne.n	8002d44 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	71fb      	strb	r3, [r7, #7]
 8002d42:	e001      	b.n	8002d48 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002d44:	2300      	movs	r3, #0
 8002d46:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002d5a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d5e:	f7ff f983 	bl	8002068 <WIZCHIP_READ>
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d6c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4619      	mov	r1, r3
 8002d72:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d76:	f7ff f9c3 	bl	8002100 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002d7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d7e:	f7ff f973 	bl	8002068 <WIZCHIP_READ>
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d8c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d96:	f7ff f9b3 	bl	8002100 <WIZCHIP_WRITE>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d104      	bne.n	8002dc0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e003      	b.n	8002dc8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d104      	bne.n	8002dda <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	e019      	b.n	8002e0e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10d      	bne.n	8002dfe <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	789b      	ldrb	r3, [r3, #2]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d104      	bne.n	8002df4 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	f043 0318 	orr.w	r3, r3, #24
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e00c      	b.n	8002e0e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e007      	b.n	8002e0e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	789b      	ldrb	r3, [r3, #2]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d103      	bne.n	8002e0e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	f043 0310 	orr.w	r3, r3, #16
 8002e0c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	4619      	mov	r1, r3
 8002e12:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e16:	f7ff f973 	bl	8002100 <WIZCHIP_WRITE>
   wizphy_reset();
 8002e1a:	f7ff ff9b 	bl	8002d54 <wizphy_reset>
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002e32:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e36:	f7ff f917 	bl	8002068 <WIZCHIP_READ>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	119b      	asrs	r3, r3, #6
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d001      	beq.n	8002e5c <wizphy_getphyconf+0x36>
 8002e58:	2b38      	cmp	r3, #56	; 0x38
 8002e5a:	d103      	bne.n	8002e64 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	705a      	strb	r2, [r3, #1]
         break;
 8002e62:	e003      	b.n	8002e6c <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	705a      	strb	r2, [r3, #1]
         break;
 8002e6a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e72:	3b10      	subs	r3, #16
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	bf8c      	ite	hi
 8002e78:	2201      	movhi	r2, #1
 8002e7a:	2200      	movls	r2, #0
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d111      	bne.n	8002ea6 <wizphy_getphyconf+0x80>
 8002e82:	2201      	movs	r2, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	709a      	strb	r2, [r3, #2]
         break;
 8002ea4:	e003      	b.n	8002eae <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	709a      	strb	r2, [r3, #2]
         break;
 8002eac:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eb4:	3b08      	subs	r3, #8
 8002eb6:	2b18      	cmp	r3, #24
 8002eb8:	bf8c      	ite	hi
 8002eba:	2201      	movhi	r2, #1
 8002ebc:	2200      	movls	r2, #0
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	2a00      	cmp	r2, #0
 8002ec2:	d111      	bne.n	8002ee8 <wizphy_getphyconf+0xc2>
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	70da      	strb	r2, [r3, #3]
         break;
 8002ee6:	e003      	b.n	8002ef0 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	70da      	strb	r2, [r3, #3]
         break;
 8002eee:	bf00      	nop
   }
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002f06:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f0a:	f7ff f8ad 	bl	8002068 <WIZCHIP_READ>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <wizphy_setphypmode+0x2a>
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f20:	e030      	b.n	8002f84 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002f28:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d104      	bne.n	8002f3a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e003      	b.n	8002f42 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002f40:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	4619      	mov	r1, r3
 8002f46:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f4a:	f7ff f8d9 	bl	8002100 <WIZCHIP_WRITE>
   wizphy_reset();
 8002f4e:	f7ff ff01 	bl	8002d54 <wizphy_reset>
   tmp = getPHYCFGR();
 8002f52:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f56:	f7ff f887 	bl	8002068 <WIZCHIP_READ>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <wizphy_setphypmode+0x88>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e008      	b.n	8002f84 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <wizphy_setphypmode+0x88>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e001      	b.n	8002f84 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2206      	movs	r2, #6
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002f9e:	f7ff f95d 	bl	800225c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	330e      	adds	r3, #14
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fae:	f7ff f955 	bl	800225c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	330a      	adds	r3, #10
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002fbe:	f7ff f94d 	bl	800225c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3306      	adds	r3, #6
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002fce:	f7ff f945 	bl	800225c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7c9a      	ldrb	r2, [r3, #18]
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <wizchip_setnetinfo+0x78>)
 8002fd8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7cda      	ldrb	r2, [r3, #19]
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <wizchip_setnetinfo+0x78>)
 8002fe0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7d1a      	ldrb	r2, [r3, #20]
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <wizchip_setnetinfo+0x78>)
 8002fe8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7d5a      	ldrb	r2, [r3, #21]
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <wizchip_setnetinfo+0x78>)
 8002ff0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7d9a      	ldrb	r2, [r3, #22]
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <wizchip_setnetinfo+0x7c>)
 8002ff8:	701a      	strb	r2, [r3, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200000f4 	.word	0x200000f4
 8003008:	200000f8 	.word	0x200000f8

0800300c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2206      	movs	r2, #6
 8003018:	4619      	mov	r1, r3
 800301a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800301e:	f7ff f8bd 	bl	800219c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	330e      	adds	r3, #14
 8003026:	2204      	movs	r2, #4
 8003028:	4619      	mov	r1, r3
 800302a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800302e:	f7ff f8b5 	bl	800219c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	330a      	adds	r3, #10
 8003036:	2204      	movs	r2, #4
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800303e:	f7ff f8ad 	bl	800219c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3306      	adds	r3, #6
 8003046:	2204      	movs	r2, #4
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800304e:	f7ff f8a5 	bl	800219c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <wizchip_getnetinfo+0x78>)
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <wizchip_getnetinfo+0x78>)
 800305c:	785a      	ldrb	r2, [r3, #1]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <wizchip_getnetinfo+0x78>)
 8003064:	789a      	ldrb	r2, [r3, #2]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <wizchip_getnetinfo+0x78>)
 800306c:	78da      	ldrb	r2, [r3, #3]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <wizchip_getnetinfo+0x7c>)
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	759a      	strb	r2, [r3, #22]
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200000f4 	.word	0x200000f4
 8003088:	200000f8 	.word	0x200000f8

0800308c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <wizchip_setnetmode+0x1e>
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
 80030a8:	e00e      	b.n	80030c8 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fe ffdc 	bl	8002068 <WIZCHIP_READ>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	4619      	mov	r1, r3
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff f81d 	bl	8002100 <WIZCHIP_WRITE>
   return 0;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7fe ffc7 	bl	8002068 <WIZCHIP_READ>
 80030da:	4603      	mov	r3, r0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}

080030e0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80030f2:	f7ff f805 	bl	8002100 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	885b      	ldrh	r3, [r3, #2]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4619      	mov	r1, r3
 8003102:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003106:	f7fe fffb 	bl	8002100 <WIZCHIP_WRITE>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	885b      	ldrh	r3, [r3, #2]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003116:	f7fe fff3 	bl	8002100 <WIZCHIP_WRITE>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003122:	b590      	push	{r4, r7, lr}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800312a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800312e:	f7fe ff9b 	bl	8002068 <WIZCHIP_READ>
 8003132:	4603      	mov	r3, r0
 8003134:	461a      	mov	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800313a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800313e:	f7fe ff93 	bl	8002068 <WIZCHIP_READ>
 8003142:	4603      	mov	r3, r0
 8003144:	b29b      	uxth	r3, r3
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	b29c      	uxth	r4, r3
 800314a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800314e:	f7fe ff8b 	bl	8002068 <WIZCHIP_READ>
 8003152:	4603      	mov	r3, r0
 8003154:	b29b      	uxth	r3, r3
 8003156:	4423      	add	r3, r4
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	805a      	strh	r2, [r3, #2]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}
	...

08003168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800316c:	480d      	ldr	r0, [pc, #52]	; (80031a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800316e:	490e      	ldr	r1, [pc, #56]	; (80031a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003170:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003174:	e002      	b.n	800317c <LoopCopyDataInit>

08003176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317a:	3304      	adds	r3, #4

0800317c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800317c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003180:	d3f9      	bcc.n	8003176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003182:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003184:	4c0b      	ldr	r4, [pc, #44]	; (80031b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003188:	e001      	b.n	800318e <LoopFillZerobss>

0800318a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800318c:	3204      	adds	r2, #4

0800318e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003190:	d3fb      	bcc.n	800318a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003192:	f7fe fee5 	bl	8001f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003196:	f002 fb51 	bl	800583c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800319a:	f7fd fb71 	bl	8000880 <main>
  bx  lr    
 800319e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80031a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80031a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80031ac:	08006b38 	.word	0x08006b38
  ldr r2, =_sbss
 80031b0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80031b4:	20000dac 	.word	0x20000dac

080031b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b8:	e7fe      	b.n	80031b8 <ADC_IRQHandler>
	...

080031bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <HAL_Init+0x40>)
 80031c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_Init+0x40>)
 80031d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a07      	ldr	r2, [pc, #28]	; (80031fc <HAL_Init+0x40>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e4:	2003      	movs	r0, #3
 80031e6:	f000 f94f 	bl	8003488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f000 f808 	bl	8003200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f0:	f7fe fd84 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023c00 	.word	0x40023c00

08003200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_InitTick+0x54>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_InitTick+0x58>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003216:	fbb3 f3f1 	udiv	r3, r3, r1
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f967 	bl	80034f2 <HAL_SYSTICK_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e00e      	b.n	800324c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b0f      	cmp	r3, #15
 8003232:	d80a      	bhi.n	800324a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003234:	2200      	movs	r2, #0
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f000 f92f 	bl	800349e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003240:	4a06      	ldr	r2, [pc, #24]	; (800325c <HAL_InitTick+0x5c>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2000001c 	.word	0x2000001c
 8003258:	20000050 	.word	0x20000050
 800325c:	2000004c 	.word	0x2000004c

08003260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_IncTick+0x20>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x24>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4413      	add	r3, r2
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_IncTick+0x24>)
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000050 	.word	0x20000050
 8003284:	20000d98 	.word	0x20000d98

08003288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return uwTick;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_GetTick+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000d98 	.word	0x20000d98

080032a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7ff ffee 	bl	8003288 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d005      	beq.n	80032c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_Delay+0x44>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032c6:	bf00      	nop
 80032c8:	f7ff ffde 	bl	8003288 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d8f7      	bhi.n	80032c8 <HAL_Delay+0x28>
  {
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000050 	.word	0x20000050

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4907      	ldr	r1, [pc, #28]	; (8003384 <__NVIC_EnableIRQ+0x38>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	; (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	; (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f1c3 0307 	rsb	r3, r3, #7
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf28      	it	cs
 80033fa:	2304      	movcs	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3304      	adds	r3, #4
 8003402:	2b06      	cmp	r3, #6
 8003404:	d902      	bls.n	800340c <NVIC_EncodePriority+0x30>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b03      	subs	r3, #3
 800340a:	e000      	b.n	800340e <NVIC_EncodePriority+0x32>
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43d9      	mvns	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	4313      	orrs	r3, r2
         );
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003454:	d301      	bcc.n	800345a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003456:	2301      	movs	r3, #1
 8003458:	e00f      	b.n	800347a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <SysTick_Config+0x40>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003462:	210f      	movs	r1, #15
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f7ff ff8e 	bl	8003388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <SysTick_Config+0x40>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <SysTick_Config+0x40>)
 8003474:	2207      	movs	r2, #7
 8003476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000e010 	.word	0xe000e010

08003488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff29 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b0:	f7ff ff3e 	bl	8003330 <__NVIC_GetPriorityGrouping>
 80034b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f7ff ff8e 	bl	80033dc <NVIC_EncodePriority>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff5d 	bl	8003388 <__NVIC_SetPriority>
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff31 	bl	800334c <__NVIC_EnableIRQ>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffa2 	bl	8003444 <SysTick_Config>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff feb6 	bl	8003288 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e099      	b.n	800365c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003548:	e00f      	b.n	800356a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354a:	f7ff fe9d 	bl	8003288 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b05      	cmp	r3, #5
 8003556:	d908      	bls.n	800356a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e078      	b.n	800365c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e8      	bne.n	800354a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_DMA_Init+0x158>)
 8003584:	4013      	ands	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	4313      	orrs	r3, r2
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d117      	bne.n	800362e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f9e9 	bl	80039e8 <DMA_CheckFifoParam>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800362a:	2301      	movs	r3, #1
 800362c:	e016      	b.n	800365c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f9a0 	bl	800397c <DMA_CalcBaseAndBitshift>
 800363c:	4603      	mov	r3, r0
 800363e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	223f      	movs	r2, #63	; 0x3f
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	f010803f 	.word	0xf010803f

08003668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003674:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <HAL_DMA_IRQHandler+0x258>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a92      	ldr	r2, [pc, #584]	; (80038c4 <HAL_DMA_IRQHandler+0x25c>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01a      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	2208      	movs	r2, #8
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2201      	movs	r2, #1
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2204      	movs	r2, #4
 8003710:	409a      	lsls	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	2204      	movs	r2, #4
 800372e:	409a      	lsls	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2210      	movs	r2, #16
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d043      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d03c      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2210      	movs	r2, #16
 8003764:	409a      	lsls	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d018      	beq.n	80037aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d024      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e01f      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
 80037a8:	e016      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0208 	bic.w	r2, r2, #8
 80037c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2220      	movs	r2, #32
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 808e 	beq.w	8003906 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8086 	beq.w	8003906 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2220      	movs	r2, #32
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b05      	cmp	r3, #5
 8003810:	d136      	bne.n	8003880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0216 	bic.w	r2, r2, #22
 8003820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <HAL_DMA_IRQHandler+0x1da>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0208 	bic.w	r2, r2, #8
 8003850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	223f      	movs	r2, #63	; 0x3f
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	d07d      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
        }
        return;
 800387e:	e078      	b.n	8003972 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01c      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d030      	beq.n	8003906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
 80038ac:	e02b      	b.n	8003906 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d027      	beq.n	8003906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e022      	b.n	8003906 <HAL_DMA_IRQHandler+0x29e>
 80038c0:	2000001c 	.word	0x2000001c
 80038c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0210 	bic.w	r2, r2, #16
 80038e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	2b00      	cmp	r3, #0
 800390c:	d032      	beq.n	8003974 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d022      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2205      	movs	r2, #5
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	429a      	cmp	r2, r3
 800393c:	d307      	bcc.n	800394e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f2      	bne.n	8003932 <HAL_DMA_IRQHandler+0x2ca>
 800394c:	e000      	b.n	8003950 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800394e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e000      	b.n	8003974 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003972:	bf00      	nop
    }
  }
}
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop

0800397c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3b10      	subs	r3, #16
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <DMA_CalcBaseAndBitshift+0x64>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d909      	bls.n	80039be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	1d1a      	adds	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	659a      	str	r2, [r3, #88]	; 0x58
 80039bc:	e007      	b.n	80039ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	aaaaaaab 	.word	0xaaaaaaab
 80039e4:	08006a88 	.word	0x08006a88

080039e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11f      	bne.n	8003a42 <DMA_CheckFifoParam+0x5a>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d856      	bhi.n	8003ab6 <DMA_CheckFifoParam+0xce>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <DMA_CheckFifoParam+0x28>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a33 	.word	0x08003a33
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003ab7 	.word	0x08003ab7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d046      	beq.n	8003aba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e043      	b.n	8003aba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a3a:	d140      	bne.n	8003abe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a40:	e03d      	b.n	8003abe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	d121      	bne.n	8003a90 <DMA_CheckFifoParam+0xa8>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d837      	bhi.n	8003ac2 <DMA_CheckFifoParam+0xda>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <DMA_CheckFifoParam+0x70>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a6f 	.word	0x08003a6f
 8003a60:	08003a69 	.word	0x08003a69
 8003a64:	08003a81 	.word	0x08003a81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e030      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d025      	beq.n	8003ac6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7e:	e022      	b.n	8003ac6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a88:	d11f      	bne.n	8003aca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a8e:	e01c      	b.n	8003aca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d903      	bls.n	8003a9e <DMA_CheckFifoParam+0xb6>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d003      	beq.n	8003aa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a9c:	e018      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa2:	e015      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00e      	beq.n	8003ace <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e00b      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e00a      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aba:	bf00      	nop
 8003abc:	e008      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e006      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
    }
  } 
  
  return status; 
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b089      	sub	sp, #36	; 0x24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e177      	b.n	8003dec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003afc:	2201      	movs	r2, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	f040 8166 	bne.w	8003de6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d005      	beq.n	8003b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d130      	bne.n	8003b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 0201 	and.w	r2, r3, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d017      	beq.n	8003bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d123      	bne.n	8003c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	08da      	lsrs	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	69b9      	ldr	r1, [r7, #24]
 8003c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80c0 	beq.w	8003de6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_GPIO_Init+0x324>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	4a65      	ldr	r2, [pc, #404]	; (8003e04 <HAL_GPIO_Init+0x324>)
 8003c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c74:	6453      	str	r3, [r2, #68]	; 0x44
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_GPIO_Init+0x324>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c82:	4a61      	ldr	r2, [pc, #388]	; (8003e08 <HAL_GPIO_Init+0x328>)
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	3302      	adds	r3, #2
 8003c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	220f      	movs	r2, #15
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a58      	ldr	r2, [pc, #352]	; (8003e0c <HAL_GPIO_Init+0x32c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d037      	beq.n	8003d1e <HAL_GPIO_Init+0x23e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_GPIO_Init+0x330>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d031      	beq.n	8003d1a <HAL_GPIO_Init+0x23a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_GPIO_Init+0x334>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02b      	beq.n	8003d16 <HAL_GPIO_Init+0x236>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a55      	ldr	r2, [pc, #340]	; (8003e18 <HAL_GPIO_Init+0x338>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d025      	beq.n	8003d12 <HAL_GPIO_Init+0x232>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a54      	ldr	r2, [pc, #336]	; (8003e1c <HAL_GPIO_Init+0x33c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01f      	beq.n	8003d0e <HAL_GPIO_Init+0x22e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a53      	ldr	r2, [pc, #332]	; (8003e20 <HAL_GPIO_Init+0x340>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d019      	beq.n	8003d0a <HAL_GPIO_Init+0x22a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_GPIO_Init+0x344>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_GPIO_Init+0x226>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a51      	ldr	r2, [pc, #324]	; (8003e28 <HAL_GPIO_Init+0x348>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00d      	beq.n	8003d02 <HAL_GPIO_Init+0x222>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a50      	ldr	r2, [pc, #320]	; (8003e2c <HAL_GPIO_Init+0x34c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x21e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4f      	ldr	r2, [pc, #316]	; (8003e30 <HAL_GPIO_Init+0x350>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_GPIO_Init+0x21a>
 8003cf6:	2309      	movs	r3, #9
 8003cf8:	e012      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003cfa:	230a      	movs	r3, #10
 8003cfc:	e010      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003cfe:	2308      	movs	r3, #8
 8003d00:	e00e      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d02:	2307      	movs	r3, #7
 8003d04:	e00c      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d06:	2306      	movs	r3, #6
 8003d08:	e00a      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d0a:	2305      	movs	r3, #5
 8003d0c:	e008      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	e006      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d12:	2303      	movs	r3, #3
 8003d14:	e004      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e002      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_GPIO_Init+0x240>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	f002 0203 	and.w	r2, r2, #3
 8003d26:	0092      	lsls	r2, r2, #2
 8003d28:	4093      	lsls	r3, r2
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d30:	4935      	ldr	r1, [pc, #212]	; (8003e08 <HAL_GPIO_Init+0x328>)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	089b      	lsrs	r3, r3, #2
 8003d36:	3302      	adds	r3, #2
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d62:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d68:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d8c:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db6:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003de0:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <HAL_GPIO_Init+0x354>)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3301      	adds	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b0f      	cmp	r3, #15
 8003df0:	f67f ae84 	bls.w	8003afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3724      	adds	r7, #36	; 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	40020400 	.word	0x40020400
 8003e14:	40020800 	.word	0x40020800
 8003e18:	40020c00 	.word	0x40020c00
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40021400 	.word	0x40021400
 8003e24:	40021800 	.word	0x40021800
 8003e28:	40021c00 	.word	0x40021c00
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40022400 	.word	0x40022400
 8003e34:	40013c00 	.word	0x40013c00

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e54:	e003      	b.n	8003e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	041a      	lsls	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	619a      	str	r2, [r3, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e264      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d075      	beq.n	8003f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e8a:	4ba3      	ldr	r3, [pc, #652]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e96:	4ba0      	ldr	r3, [pc, #640]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d112      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea2:	4b9d      	ldr	r3, [pc, #628]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eae:	d10b      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	4b99      	ldr	r3, [pc, #612]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05b      	beq.n	8003f74 <HAL_RCC_OscConfig+0x108>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d157      	bne.n	8003f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e23f      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x74>
 8003ed2:	4b91      	ldr	r3, [pc, #580]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a90      	ldr	r2, [pc, #576]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e01d      	b.n	8003f1c <HAL_RCC_OscConfig+0xb0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x98>
 8003eea:	4b8b      	ldr	r3, [pc, #556]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a8a      	ldr	r2, [pc, #552]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b88      	ldr	r3, [pc, #544]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a87      	ldr	r2, [pc, #540]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0xb0>
 8003f04:	4b84      	ldr	r3, [pc, #528]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a83      	ldr	r2, [pc, #524]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b81      	ldr	r3, [pc, #516]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a80      	ldr	r2, [pc, #512]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7ff f9b0 	bl	8003288 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7ff f9ac 	bl	8003288 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e204      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b76      	ldr	r3, [pc, #472]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0xc0>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7ff f99c 	bl	8003288 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f54:	f7ff f998 	bl	8003288 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1f0      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0xe8>
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d063      	beq.n	800404a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f82:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8e:	4b62      	ldr	r3, [pc, #392]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d11c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9a:	4b5f      	ldr	r3, [pc, #380]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d116      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	4b5c      	ldr	r3, [pc, #368]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCC_OscConfig+0x152>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e1c4      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbe:	4b56      	ldr	r3, [pc, #344]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4952      	ldr	r1, [pc, #328]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	e03a      	b.n	800404a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fdc:	4b4f      	ldr	r3, [pc, #316]	; (800411c <HAL_RCC_OscConfig+0x2b0>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7ff f951 	bl	8003288 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fea:	f7ff f94d 	bl	8003288 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e1a5      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffc:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004008:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4940      	ldr	r1, [pc, #256]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]
 800401c:	e015      	b.n	800404a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCC_OscConfig+0x2b0>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7ff f930 	bl	8003288 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402c:	f7ff f92c 	bl	8003288 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e184      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403e:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d030      	beq.n	80040b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_RCC_OscConfig+0x2b4>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7ff f910 	bl	8003288 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406c:	f7ff f90c 	bl	8003288 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e164      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x200>
 800408a:	e015      	b.n	80040b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCC_OscConfig+0x2b4>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004092:	f7ff f8f9 	bl	8003288 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409a:	f7ff f8f5 	bl	8003288 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e14d      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a0 	beq.w	8004206 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_OscConfig+0x2b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d121      	bne.n	8004146 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <HAL_RCC_OscConfig+0x2b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a07      	ldr	r2, [pc, #28]	; (8004124 <HAL_RCC_OscConfig+0x2b8>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410e:	f7ff f8bb 	bl	8003288 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	e011      	b.n	800413a <HAL_RCC_OscConfig+0x2ce>
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	42470000 	.word	0x42470000
 8004120:	42470e80 	.word	0x42470e80
 8004124:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004128:	f7ff f8ae 	bl	8003288 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e106      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b85      	ldr	r3, [pc, #532]	; (8004350 <HAL_RCC_OscConfig+0x4e4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d106      	bne.n	800415c <HAL_RCC_OscConfig+0x2f0>
 800414e:	4b81      	ldr	r3, [pc, #516]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a80      	ldr	r2, [pc, #512]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	e01c      	b.n	8004196 <HAL_RCC_OscConfig+0x32a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b05      	cmp	r3, #5
 8004162:	d10c      	bne.n	800417e <HAL_RCC_OscConfig+0x312>
 8004164:	4b7b      	ldr	r3, [pc, #492]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a7a      	ldr	r2, [pc, #488]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 800416a:	f043 0304 	orr.w	r3, r3, #4
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
 8004170:	4b78      	ldr	r3, [pc, #480]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	4a77      	ldr	r2, [pc, #476]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6713      	str	r3, [r2, #112]	; 0x70
 800417c:	e00b      	b.n	8004196 <HAL_RCC_OscConfig+0x32a>
 800417e:	4b75      	ldr	r3, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a74      	ldr	r2, [pc, #464]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
 800418a:	4b72      	ldr	r3, [pc, #456]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a71      	ldr	r2, [pc, #452]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004190:	f023 0304 	bic.w	r3, r3, #4
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d015      	beq.n	80041ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419e:	f7ff f873 	bl	8003288 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7ff f86f 	bl	8003288 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e0c5      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041bc:	4b65      	ldr	r3, [pc, #404]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ee      	beq.n	80041a6 <HAL_RCC_OscConfig+0x33a>
 80041c8:	e014      	b.n	80041f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ca:	f7ff f85d 	bl	8003288 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d2:	f7ff f859 	bl	8003288 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0af      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e8:	4b5a      	ldr	r3, [pc, #360]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ee      	bne.n	80041d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d105      	bne.n	8004206 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fa:	4b56      	ldr	r3, [pc, #344]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a55      	ldr	r2, [pc, #340]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 809b 	beq.w	8004346 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d05c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d141      	bne.n	80042a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004224:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <HAL_RCC_OscConfig+0x4ec>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422a:	f7ff f82d 	bl	8003288 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004232:	f7ff f829 	bl	8003288 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e081      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004244:	4b43      	ldr	r3, [pc, #268]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	019b      	lsls	r3, r3, #6
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	3b01      	subs	r3, #1
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	4937      	ldr	r1, [pc, #220]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800427a:	4b37      	ldr	r3, [pc, #220]	; (8004358 <HAL_RCC_OscConfig+0x4ec>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7ff f802 	bl	8003288 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fe fffe 	bl	8003288 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e056      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x41c>
 80042a6:	e04e      	b.n	8004346 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x4ec>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fe ffeb 	bl	8003288 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fe ffe7 	bl	8003288 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e03f      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x44a>
 80042d4:	e037      	b.n	8004346 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e032      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d028      	beq.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d121      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d11a      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004312:	4013      	ands	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004318:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800431a:	4293      	cmp	r3, r2
 800431c:	d111      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	3b01      	subs	r3, #1
 800432c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d107      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d001      	beq.n	8004346 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40007000 	.word	0x40007000
 8004354:	40023800 	.word	0x40023800
 8004358:	42470060 	.word	0x42470060

0800435c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0cc      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004370:	4b68      	ldr	r3, [pc, #416]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d90c      	bls.n	8004398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b65      	ldr	r3, [pc, #404]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b63      	ldr	r3, [pc, #396]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0b8      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b0:	4b59      	ldr	r3, [pc, #356]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d4:	4b50      	ldr	r3, [pc, #320]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	494d      	ldr	r1, [pc, #308]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d044      	beq.n	800447c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b47      	ldr	r3, [pc, #284]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d119      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e07f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d003      	beq.n	800441a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004416:	2b03      	cmp	r3, #3
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e06f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442a:	4b3b      	ldr	r3, [pc, #236]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e067      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443a:	4b37      	ldr	r3, [pc, #220]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4934      	ldr	r1, [pc, #208]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800444c:	f7fe ff1c 	bl	8003288 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	e00a      	b.n	800446a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004454:	f7fe ff18 	bl	8003288 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e04f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446a:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 020c 	and.w	r2, r3, #12
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	429a      	cmp	r2, r3
 800447a:	d1eb      	bne.n	8004454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d20c      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e032      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b0:	4b19      	ldr	r3, [pc, #100]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4916      	ldr	r1, [pc, #88]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	490e      	ldr	r1, [pc, #56]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044e2:	f000 f821 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80044e6:	4602      	mov	r2, r0
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	490a      	ldr	r1, [pc, #40]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	5ccb      	ldrb	r3, [r1, r3]
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fe7c 	bl	8003200 <HAL_InitTick>

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023c00 	.word	0x40023c00
 8004518:	40023800 	.word	0x40023800
 800451c:	08006a70 	.word	0x08006a70
 8004520:	2000001c 	.word	0x2000001c
 8004524:	2000004c 	.word	0x2000004c

08004528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004528:	b5b0      	push	{r4, r5, r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800452e:	2100      	movs	r1, #0
 8004530:	6079      	str	r1, [r7, #4]
 8004532:	2100      	movs	r1, #0
 8004534:	60f9      	str	r1, [r7, #12]
 8004536:	2100      	movs	r1, #0
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800453a:	2100      	movs	r1, #0
 800453c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800453e:	4952      	ldr	r1, [pc, #328]	; (8004688 <HAL_RCC_GetSysClockFreq+0x160>)
 8004540:	6889      	ldr	r1, [r1, #8]
 8004542:	f001 010c 	and.w	r1, r1, #12
 8004546:	2908      	cmp	r1, #8
 8004548:	d00d      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x3e>
 800454a:	2908      	cmp	r1, #8
 800454c:	f200 8094 	bhi.w	8004678 <HAL_RCC_GetSysClockFreq+0x150>
 8004550:	2900      	cmp	r1, #0
 8004552:	d002      	beq.n	800455a <HAL_RCC_GetSysClockFreq+0x32>
 8004554:	2904      	cmp	r1, #4
 8004556:	d003      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x38>
 8004558:	e08e      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800455a:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCC_GetSysClockFreq+0x164>)
 800455c:	60bb      	str	r3, [r7, #8]
       break;
 800455e:	e08e      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004560:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <HAL_RCC_GetSysClockFreq+0x168>)
 8004562:	60bb      	str	r3, [r7, #8]
      break;
 8004564:	e08b      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004566:	4948      	ldr	r1, [pc, #288]	; (8004688 <HAL_RCC_GetSysClockFreq+0x160>)
 8004568:	6849      	ldr	r1, [r1, #4]
 800456a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800456e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004570:	4945      	ldr	r1, [pc, #276]	; (8004688 <HAL_RCC_GetSysClockFreq+0x160>)
 8004572:	6849      	ldr	r1, [r1, #4]
 8004574:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004578:	2900      	cmp	r1, #0
 800457a:	d024      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457c:	4942      	ldr	r1, [pc, #264]	; (8004688 <HAL_RCC_GetSysClockFreq+0x160>)
 800457e:	6849      	ldr	r1, [r1, #4]
 8004580:	0989      	lsrs	r1, r1, #6
 8004582:	4608      	mov	r0, r1
 8004584:	f04f 0100 	mov.w	r1, #0
 8004588:	f240 14ff 	movw	r4, #511	; 0x1ff
 800458c:	f04f 0500 	mov.w	r5, #0
 8004590:	ea00 0204 	and.w	r2, r0, r4
 8004594:	ea01 0305 	and.w	r3, r1, r5
 8004598:	493d      	ldr	r1, [pc, #244]	; (8004690 <HAL_RCC_GetSysClockFreq+0x168>)
 800459a:	fb01 f003 	mul.w	r0, r1, r3
 800459e:	2100      	movs	r1, #0
 80045a0:	fb01 f102 	mul.w	r1, r1, r2
 80045a4:	1844      	adds	r4, r0, r1
 80045a6:	493a      	ldr	r1, [pc, #232]	; (8004690 <HAL_RCC_GetSysClockFreq+0x168>)
 80045a8:	fba2 0101 	umull	r0, r1, r2, r1
 80045ac:	1863      	adds	r3, r4, r1
 80045ae:	4619      	mov	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	f7fb fe6a 	bl	8000290 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e04a      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c6:	4b30      	ldr	r3, [pc, #192]	; (8004688 <HAL_RCC_GetSysClockFreq+0x160>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	099b      	lsrs	r3, r3, #6
 80045cc:	461a      	mov	r2, r3
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	ea02 0400 	and.w	r4, r2, r0
 80045de:	ea03 0501 	and.w	r5, r3, r1
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	014b      	lsls	r3, r1, #5
 80045f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045f4:	0142      	lsls	r2, r0, #5
 80045f6:	4610      	mov	r0, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	1b00      	subs	r0, r0, r4
 80045fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	018b      	lsls	r3, r1, #6
 800460a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800460e:	0182      	lsls	r2, r0, #6
 8004610:	1a12      	subs	r2, r2, r0
 8004612:	eb63 0301 	sbc.w	r3, r3, r1
 8004616:	f04f 0000 	mov.w	r0, #0
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	00d9      	lsls	r1, r3, #3
 8004620:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004624:	00d0      	lsls	r0, r2, #3
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	1912      	adds	r2, r2, r4
 800462c:	eb45 0303 	adc.w	r3, r5, r3
 8004630:	f04f 0000 	mov.w	r0, #0
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	0299      	lsls	r1, r3, #10
 800463a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800463e:	0290      	lsls	r0, r2, #10
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	461a      	mov	r2, r3
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	f7fb fe1e 	bl	8000290 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCC_GetSysClockFreq+0x160>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	60bb      	str	r3, [r7, #8]
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_RCC_GetSysClockFreq+0x164>)
 800467a:	60bb      	str	r3, [r7, #8]
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	68bb      	ldr	r3, [r7, #8]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bdb0      	pop	{r4, r5, r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	00f42400 	.word	0x00f42400
 8004690:	017d7840 	.word	0x017d7840

08004694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004698:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	2000001c 	.word	0x2000001c

080046ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046b0:	f7ff fff0 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0a9b      	lsrs	r3, r3, #10
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4903      	ldr	r1, [pc, #12]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40023800 	.word	0x40023800
 80046d0:	08006a80 	.word	0x08006a80

080046d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046d8:	f7ff ffdc 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	0b5b      	lsrs	r3, r3, #13
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4903      	ldr	r1, [pc, #12]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ea:	5ccb      	ldrb	r3, [r1, r3]
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40023800 	.word	0x40023800
 80046f8:	08006a80 	.word	0x08006a80

080046fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07b      	b.n	8004806 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d009      	beq.n	8004734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
 8004726:	e005      	b.n	8004734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd f830 	bl	80017b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	ea42 0103 	orr.w	r1, r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0104 	and.w	r1, r3, #4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f003 0210 	and.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b088      	sub	sp, #32
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_SPI_Transmit+0x22>
 800482c:	2302      	movs	r3, #2
 800482e:	e126      	b.n	8004a7e <HAL_SPI_Transmit+0x270>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004838:	f7fe fd26 	bl	8003288 <HAL_GetTick>
 800483c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d002      	beq.n	8004854 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800484e:	2302      	movs	r3, #2
 8004850:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004852:	e10b      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Transmit+0x52>
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004864:	e102      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ac:	d10f      	bne.n	80048ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d007      	beq.n	80048ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f4:	d14b      	bne.n	800498e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0xf6>
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d13e      	bne.n	8004982 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004928:	e02b      	b.n	8004982 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d112      	bne.n	800495e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	86da      	strh	r2, [r3, #54]	; 0x36
 800495c:	e011      	b.n	8004982 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495e:	f7fe fc93 	bl	8003288 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d803      	bhi.n	8004976 <HAL_SPI_Transmit+0x168>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d102      	bne.n	800497c <HAL_SPI_Transmit+0x16e>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004980:	e074      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ce      	bne.n	800492a <HAL_SPI_Transmit+0x11c>
 800498c:	e04c      	b.n	8004a28 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0x18e>
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d140      	bne.n	8004a1e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	7812      	ldrb	r2, [r2, #0]
 80049a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049c2:	e02c      	b.n	8004a1e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d113      	bne.n	80049fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80049f8:	e011      	b.n	8004a1e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049fa:	f7fe fc45 	bl	8003288 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d803      	bhi.n	8004a12 <HAL_SPI_Transmit+0x204>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d102      	bne.n	8004a18 <HAL_SPI_Transmit+0x20a>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a1c:	e026      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1cd      	bne.n	80049c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fbcb 	bl	80051c8 <SPI_EndRxTxTransaction>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e000      	b.n	8004a6c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b088      	sub	sp, #32
 8004a8a:	af02      	add	r7, sp, #8
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d112      	bne.n	8004aca <HAL_SPI_Receive+0x44>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10e      	bne.n	8004aca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f8f1 	bl	8004ca8 <HAL_SPI_TransmitReceive>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	e0ea      	b.n	8004ca0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_SPI_Receive+0x52>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e0e3      	b.n	8004ca0 <HAL_SPI_Receive+0x21a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae0:	f7fe fbd2 	bl	8003288 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
 8004af4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004af6:	e0ca      	b.n	8004c8e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_SPI_Receive+0x7e>
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b08:	e0c1      	b.n	8004c8e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b50:	d10f      	bne.n	8004b72 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d007      	beq.n	8004b90 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d162      	bne.n	8004c5e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b98:	e02e      	b.n	8004bf8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d115      	bne.n	8004bd4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f103 020c 	add.w	r2, r3, #12
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bd2:	e011      	b.n	8004bf8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd4:	f7fe fb58 	bl	8003288 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d803      	bhi.n	8004bec <HAL_SPI_Receive+0x166>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d102      	bne.n	8004bf2 <HAL_SPI_Receive+0x16c>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bf6:	e04a      	b.n	8004c8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1cb      	bne.n	8004b9a <HAL_SPI_Receive+0x114>
 8004c02:	e031      	b.n	8004c68 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d113      	bne.n	8004c3a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c38:	e011      	b.n	8004c5e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c3a:	f7fe fb25 	bl	8003288 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d803      	bhi.n	8004c52 <HAL_SPI_Receive+0x1cc>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d102      	bne.n	8004c58 <HAL_SPI_Receive+0x1d2>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c5c:	e017      	b.n	8004c8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1cd      	bne.n	8004c04 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fa45 	bl	80050fc <SPI_EndRxTransaction>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
 8004c8a:	e000      	b.n	8004c8e <HAL_SPI_Receive+0x208>
  }

error :
 8004c8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x26>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e18a      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x33c>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd6:	f7fe fad7 	bl	8003288 <HAL_GetTick>
 8004cda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cec:	887b      	ldrh	r3, [r7, #2]
 8004cee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d00f      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x70>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d107      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x68>
 8004d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d003      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d16:	e15b      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x82>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x82>
 8004d24:	887b      	ldrh	r3, [r7, #2]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d30:	e14e      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d003      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2205      	movs	r2, #5
 8004d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	887a      	ldrh	r2, [r7, #2]
 8004d56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	887a      	ldrh	r2, [r7, #2]
 8004d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	887a      	ldrh	r2, [r7, #2]
 8004d6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d007      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da2:	d178      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x10a>
 8004dac:	8b7b      	ldrh	r3, [r7, #26]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d166      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	1c9a      	adds	r2, r3, #2
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd6:	e053      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d11b      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x176>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d016      	beq.n	8004e1e <HAL_SPI_TransmitReceive+0x176>
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d113      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d119      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x1b8>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d014      	beq.n	8004e60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	b292      	uxth	r2, r2
 8004e42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	1c9a      	adds	r2, r3, #2
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e60:	f7fe fa12 	bl	8003288 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d807      	bhi.n	8004e80 <HAL_SPI_TransmitReceive+0x1d8>
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d003      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e7e:	e0a7      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1a6      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x130>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1a1      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x130>
 8004e94:	e07c      	b.n	8004f90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x1fc>
 8004e9e:	8b7b      	ldrh	r3, [r7, #26]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d16b      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eca:	e057      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d11c      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x26c>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x26c>
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d114      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d119      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x2ae>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d014      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f52:	2301      	movs	r3, #1
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f56:	f7fe f997 	bl	8003288 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d803      	bhi.n	8004f6e <HAL_SPI_TransmitReceive+0x2c6>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d102      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x2cc>
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f7a:	e029      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1a2      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x224>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d19d      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f917 	bl	80051c8 <SPI_EndRxTxTransaction>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d006      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fac:	e010      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	e000      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3730      	adds	r7, #48	; 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ffc:	f7fe f944 	bl	8003288 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	4413      	add	r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800500c:	f7fe f93c 	bl	8003288 <HAL_GetTick>
 8005010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005012:	4b39      	ldr	r3, [pc, #228]	; (80050f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	015b      	lsls	r3, r3, #5
 8005018:	0d1b      	lsrs	r3, r3, #20
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005022:	e054      	b.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d050      	beq.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800502c:	f7fe f92c 	bl	8003288 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	429a      	cmp	r2, r3
 800503a:	d902      	bls.n	8005042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d13d      	bne.n	80050be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505a:	d111      	bne.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005064:	d004      	beq.n	8005070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d107      	bne.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005088:	d10f      	bne.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e017      	b.n	80050ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4013      	ands	r3, r2
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d19b      	bne.n	8005024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2000001c 	.word	0x2000001c

080050fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005110:	d111      	bne.n	8005136 <SPI_EndRxTransaction+0x3a>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511a:	d004      	beq.n	8005126 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005124:	d107      	bne.n	8005136 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005134:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513e:	d12a      	bne.n	8005196 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005148:	d012      	beq.n	8005170 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2200      	movs	r2, #0
 8005152:	2180      	movs	r1, #128	; 0x80
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff ff49 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d02d      	beq.n	80051bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e026      	b.n	80051be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	2101      	movs	r1, #1
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff36 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01a      	beq.n	80051bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e013      	b.n	80051be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	2101      	movs	r1, #1
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff ff23 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e000      	b.n	80051be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051d4:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <SPI_EndRxTxTransaction+0x7c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <SPI_EndRxTxTransaction+0x80>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0d5b      	lsrs	r3, r3, #21
 80051e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f2:	d112      	bne.n	800521a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	2180      	movs	r1, #128	; 0x80
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff fef4 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e00f      	b.n	800523a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3b01      	subs	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d0f2      	beq.n	800521a <SPI_EndRxTxTransaction+0x52>
 8005234:	e000      	b.n	8005238 <SPI_EndRxTxTransaction+0x70>
        break;
 8005236:	bf00      	nop
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	2000001c 	.word	0x2000001c
 8005248:	165e9f81 	.word	0x165e9f81

0800524c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e03f      	b.n	80052de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fc feb0 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2224      	movs	r2, #36	; 0x24
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800528e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f905 	bl	80054a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b08a      	sub	sp, #40	; 0x28
 80052ea:	af02      	add	r7, sp, #8
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b20      	cmp	r3, #32
 8005304:	d17c      	bne.n	8005400 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_UART_Transmit+0x2c>
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e075      	b.n	8005402 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_UART_Transmit+0x3e>
 8005320:	2302      	movs	r3, #2
 8005322:	e06e      	b.n	8005402 <HAL_UART_Transmit+0x11c>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2221      	movs	r2, #33	; 0x21
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800533a:	f7fd ffa5 	bl	8003288 <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d108      	bne.n	8005368 <HAL_UART_Transmit+0x82>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	e003      	b.n	8005370 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005378:	e02a      	b.n	80053d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2200      	movs	r2, #0
 8005382:	2180      	movs	r1, #128	; 0x80
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f840 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e036      	b.n	8005402 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	3302      	adds	r3, #2
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	e007      	b.n	80053c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	781a      	ldrb	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	3301      	adds	r3, #1
 80053c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1cf      	bne.n	800537a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2140      	movs	r1, #64	; 0x40
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f810 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e006      	b.n	8005402 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	e000      	b.n	8005402 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005400:	2302      	movs	r3, #2
  }
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541a:	e02c      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d028      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <UART_WaitOnFlagUntilTimeout+0x30>
 800542a:	f7fd ff2d 	bl	8003288 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	429a      	cmp	r2, r3
 8005438:	d21d      	bcs.n	8005476 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005448:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695a      	ldr	r2, [r3, #20]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d0c3      	beq.n	800541c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	b09f      	sub	sp, #124	; 0x7c
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b6:	68d9      	ldr	r1, [r3, #12]
 80054b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	ea40 0301 	orr.w	r3, r0, r1
 80054c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054e4:	f021 010c 	bic.w	r1, r1, #12
 80054e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ee:	430b      	orrs	r3, r1
 80054f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fe:	6999      	ldr	r1, [r3, #24]
 8005500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	ea40 0301 	orr.w	r3, r0, r1
 8005508:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4bc5      	ldr	r3, [pc, #788]	; (8005824 <UART_SetConfig+0x384>)
 8005510:	429a      	cmp	r2, r3
 8005512:	d004      	beq.n	800551e <UART_SetConfig+0x7e>
 8005514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4bc3      	ldr	r3, [pc, #780]	; (8005828 <UART_SetConfig+0x388>)
 800551a:	429a      	cmp	r2, r3
 800551c:	d103      	bne.n	8005526 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800551e:	f7ff f8d9 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 8005522:	6778      	str	r0, [r7, #116]	; 0x74
 8005524:	e002      	b.n	800552c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005526:	f7ff f8c1 	bl	80046ac <HAL_RCC_GetPCLK1Freq>
 800552a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005534:	f040 80b6 	bne.w	80056a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553a:	461c      	mov	r4, r3
 800553c:	f04f 0500 	mov.w	r5, #0
 8005540:	4622      	mov	r2, r4
 8005542:	462b      	mov	r3, r5
 8005544:	1891      	adds	r1, r2, r2
 8005546:	6439      	str	r1, [r7, #64]	; 0x40
 8005548:	415b      	adcs	r3, r3
 800554a:	647b      	str	r3, [r7, #68]	; 0x44
 800554c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005550:	1912      	adds	r2, r2, r4
 8005552:	eb45 0303 	adc.w	r3, r5, r3
 8005556:	f04f 0000 	mov.w	r0, #0
 800555a:	f04f 0100 	mov.w	r1, #0
 800555e:	00d9      	lsls	r1, r3, #3
 8005560:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005564:	00d0      	lsls	r0, r2, #3
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	1911      	adds	r1, r2, r4
 800556c:	6639      	str	r1, [r7, #96]	; 0x60
 800556e:	416b      	adcs	r3, r5
 8005570:	667b      	str	r3, [r7, #100]	; 0x64
 8005572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	461a      	mov	r2, r3
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	1891      	adds	r1, r2, r2
 800557e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005580:	415b      	adcs	r3, r3
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005588:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800558c:	f7fa fe80 	bl	8000290 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4ba5      	ldr	r3, [pc, #660]	; (800582c <UART_SetConfig+0x38c>)
 8005596:	fba3 2302 	umull	r2, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	011e      	lsls	r6, r3, #4
 800559e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a0:	461c      	mov	r4, r3
 80055a2:	f04f 0500 	mov.w	r5, #0
 80055a6:	4622      	mov	r2, r4
 80055a8:	462b      	mov	r3, r5
 80055aa:	1891      	adds	r1, r2, r2
 80055ac:	6339      	str	r1, [r7, #48]	; 0x30
 80055ae:	415b      	adcs	r3, r3
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
 80055b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055b6:	1912      	adds	r2, r2, r4
 80055b8:	eb45 0303 	adc.w	r3, r5, r3
 80055bc:	f04f 0000 	mov.w	r0, #0
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	00d9      	lsls	r1, r3, #3
 80055c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055ca:	00d0      	lsls	r0, r2, #3
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	1911      	adds	r1, r2, r4
 80055d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80055d4:	416b      	adcs	r3, r5
 80055d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	461a      	mov	r2, r3
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	1891      	adds	r1, r2, r2
 80055e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80055e6:	415b      	adcs	r3, r3
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80055f2:	f7fa fe4d 	bl	8000290 <__aeabi_uldivmod>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4b8c      	ldr	r3, [pc, #560]	; (800582c <UART_SetConfig+0x38c>)
 80055fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	2164      	movs	r1, #100	; 0x64
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	3332      	adds	r3, #50	; 0x32
 800560e:	4a87      	ldr	r2, [pc, #540]	; (800582c <UART_SetConfig+0x38c>)
 8005610:	fba2 2303 	umull	r2, r3, r2, r3
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800561c:	441e      	add	r6, r3
 800561e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005620:	4618      	mov	r0, r3
 8005622:	f04f 0100 	mov.w	r1, #0
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	1894      	adds	r4, r2, r2
 800562c:	623c      	str	r4, [r7, #32]
 800562e:	415b      	adcs	r3, r3
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
 8005632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005636:	1812      	adds	r2, r2, r0
 8005638:	eb41 0303 	adc.w	r3, r1, r3
 800563c:	f04f 0400 	mov.w	r4, #0
 8005640:	f04f 0500 	mov.w	r5, #0
 8005644:	00dd      	lsls	r5, r3, #3
 8005646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800564a:	00d4      	lsls	r4, r2, #3
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	1814      	adds	r4, r2, r0
 8005652:	653c      	str	r4, [r7, #80]	; 0x50
 8005654:	414b      	adcs	r3, r1
 8005656:	657b      	str	r3, [r7, #84]	; 0x54
 8005658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	461a      	mov	r2, r3
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	1891      	adds	r1, r2, r2
 8005664:	61b9      	str	r1, [r7, #24]
 8005666:	415b      	adcs	r3, r3
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800566e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005672:	f7fa fe0d 	bl	8000290 <__aeabi_uldivmod>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4b6c      	ldr	r3, [pc, #432]	; (800582c <UART_SetConfig+0x38c>)
 800567c:	fba3 1302 	umull	r1, r3, r3, r2
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	2164      	movs	r1, #100	; 0x64
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	3332      	adds	r3, #50	; 0x32
 800568e:	4a67      	ldr	r2, [pc, #412]	; (800582c <UART_SetConfig+0x38c>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	f003 0207 	and.w	r2, r3, #7
 800569a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4432      	add	r2, r6
 80056a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056a2:	e0b9      	b.n	8005818 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a6:	461c      	mov	r4, r3
 80056a8:	f04f 0500 	mov.w	r5, #0
 80056ac:	4622      	mov	r2, r4
 80056ae:	462b      	mov	r3, r5
 80056b0:	1891      	adds	r1, r2, r2
 80056b2:	6139      	str	r1, [r7, #16]
 80056b4:	415b      	adcs	r3, r3
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056bc:	1912      	adds	r2, r2, r4
 80056be:	eb45 0303 	adc.w	r3, r5, r3
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	00d9      	lsls	r1, r3, #3
 80056cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056d0:	00d0      	lsls	r0, r2, #3
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	eb12 0804 	adds.w	r8, r2, r4
 80056da:	eb43 0905 	adc.w	r9, r3, r5
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	008b      	lsls	r3, r1, #2
 80056f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056f6:	0082      	lsls	r2, r0, #2
 80056f8:	4640      	mov	r0, r8
 80056fa:	4649      	mov	r1, r9
 80056fc:	f7fa fdc8 	bl	8000290 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4b49      	ldr	r3, [pc, #292]	; (800582c <UART_SetConfig+0x38c>)
 8005706:	fba3 2302 	umull	r2, r3, r3, r2
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	011e      	lsls	r6, r3, #4
 800570e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005710:	4618      	mov	r0, r3
 8005712:	f04f 0100 	mov.w	r1, #0
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	1894      	adds	r4, r2, r2
 800571c:	60bc      	str	r4, [r7, #8]
 800571e:	415b      	adcs	r3, r3
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005726:	1812      	adds	r2, r2, r0
 8005728:	eb41 0303 	adc.w	r3, r1, r3
 800572c:	f04f 0400 	mov.w	r4, #0
 8005730:	f04f 0500 	mov.w	r5, #0
 8005734:	00dd      	lsls	r5, r3, #3
 8005736:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800573a:	00d4      	lsls	r4, r2, #3
 800573c:	4622      	mov	r2, r4
 800573e:	462b      	mov	r3, r5
 8005740:	1814      	adds	r4, r2, r0
 8005742:	64bc      	str	r4, [r7, #72]	; 0x48
 8005744:	414b      	adcs	r3, r1
 8005746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4618      	mov	r0, r3
 800574e:	f04f 0100 	mov.w	r1, #0
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	008b      	lsls	r3, r1, #2
 800575c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005760:	0082      	lsls	r2, r0, #2
 8005762:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005766:	f7fa fd93 	bl	8000290 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4b2f      	ldr	r3, [pc, #188]	; (800582c <UART_SetConfig+0x38c>)
 8005770:	fba3 1302 	umull	r1, r3, r3, r2
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	2164      	movs	r1, #100	; 0x64
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	3332      	adds	r3, #50	; 0x32
 8005782:	4a2a      	ldr	r2, [pc, #168]	; (800582c <UART_SetConfig+0x38c>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578e:	441e      	add	r6, r3
 8005790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005792:	4618      	mov	r0, r3
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	1894      	adds	r4, r2, r2
 800579e:	603c      	str	r4, [r7, #0]
 80057a0:	415b      	adcs	r3, r3
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a8:	1812      	adds	r2, r2, r0
 80057aa:	eb41 0303 	adc.w	r3, r1, r3
 80057ae:	f04f 0400 	mov.w	r4, #0
 80057b2:	f04f 0500 	mov.w	r5, #0
 80057b6:	00dd      	lsls	r5, r3, #3
 80057b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057bc:	00d4      	lsls	r4, r2, #3
 80057be:	4622      	mov	r2, r4
 80057c0:	462b      	mov	r3, r5
 80057c2:	eb12 0a00 	adds.w	sl, r2, r0
 80057c6:	eb43 0b01 	adc.w	fp, r3, r1
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f04f 0100 	mov.w	r1, #0
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	008b      	lsls	r3, r1, #2
 80057de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057e2:	0082      	lsls	r2, r0, #2
 80057e4:	4650      	mov	r0, sl
 80057e6:	4659      	mov	r1, fp
 80057e8:	f7fa fd52 	bl	8000290 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <UART_SetConfig+0x38c>)
 80057f2:	fba3 1302 	umull	r1, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2164      	movs	r1, #100	; 0x64
 80057fa:	fb01 f303 	mul.w	r3, r1, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	; 0x32
 8005804:	4a09      	ldr	r2, [pc, #36]	; (800582c <UART_SetConfig+0x38c>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4432      	add	r2, r6
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	377c      	adds	r7, #124	; 0x7c
 800581c:	46bd      	mov	sp, r7
 800581e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005822:	bf00      	nop
 8005824:	40011000 	.word	0x40011000
 8005828:	40011400 	.word	0x40011400
 800582c:	51eb851f 	.word	0x51eb851f

08005830 <__errno>:
 8005830:	4b01      	ldr	r3, [pc, #4]	; (8005838 <__errno+0x8>)
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20000054 	.word	0x20000054

0800583c <__libc_init_array>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4d0d      	ldr	r5, [pc, #52]	; (8005874 <__libc_init_array+0x38>)
 8005840:	4c0d      	ldr	r4, [pc, #52]	; (8005878 <__libc_init_array+0x3c>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	2600      	movs	r6, #0
 8005848:	42a6      	cmp	r6, r4
 800584a:	d109      	bne.n	8005860 <__libc_init_array+0x24>
 800584c:	4d0b      	ldr	r5, [pc, #44]	; (800587c <__libc_init_array+0x40>)
 800584e:	4c0c      	ldr	r4, [pc, #48]	; (8005880 <__libc_init_array+0x44>)
 8005850:	f000 ffec 	bl	800682c <_init>
 8005854:	1b64      	subs	r4, r4, r5
 8005856:	10a4      	asrs	r4, r4, #2
 8005858:	2600      	movs	r6, #0
 800585a:	42a6      	cmp	r6, r4
 800585c:	d105      	bne.n	800586a <__libc_init_array+0x2e>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f855 3b04 	ldr.w	r3, [r5], #4
 8005864:	4798      	blx	r3
 8005866:	3601      	adds	r6, #1
 8005868:	e7ee      	b.n	8005848 <__libc_init_array+0xc>
 800586a:	f855 3b04 	ldr.w	r3, [r5], #4
 800586e:	4798      	blx	r3
 8005870:	3601      	adds	r6, #1
 8005872:	e7f2      	b.n	800585a <__libc_init_array+0x1e>
 8005874:	08006b30 	.word	0x08006b30
 8005878:	08006b30 	.word	0x08006b30
 800587c:	08006b30 	.word	0x08006b30
 8005880:	08006b34 	.word	0x08006b34

08005884 <memset>:
 8005884:	4402      	add	r2, r0
 8005886:	4603      	mov	r3, r0
 8005888:	4293      	cmp	r3, r2
 800588a:	d100      	bne.n	800588e <memset+0xa>
 800588c:	4770      	bx	lr
 800588e:	f803 1b01 	strb.w	r1, [r3], #1
 8005892:	e7f9      	b.n	8005888 <memset+0x4>

08005894 <iprintf>:
 8005894:	b40f      	push	{r0, r1, r2, r3}
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <iprintf+0x2c>)
 8005898:	b513      	push	{r0, r1, r4, lr}
 800589a:	681c      	ldr	r4, [r3, #0]
 800589c:	b124      	cbz	r4, 80058a8 <iprintf+0x14>
 800589e:	69a3      	ldr	r3, [r4, #24]
 80058a0:	b913      	cbnz	r3, 80058a8 <iprintf+0x14>
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 fa5e 	bl	8005d64 <__sinit>
 80058a8:	ab05      	add	r3, sp, #20
 80058aa:	9a04      	ldr	r2, [sp, #16]
 80058ac:	68a1      	ldr	r1, [r4, #8]
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 fc2f 	bl	8006114 <_vfiprintf_r>
 80058b6:	b002      	add	sp, #8
 80058b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058bc:	b004      	add	sp, #16
 80058be:	4770      	bx	lr
 80058c0:	20000054 	.word	0x20000054

080058c4 <_puts_r>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	460e      	mov	r6, r1
 80058c8:	4605      	mov	r5, r0
 80058ca:	b118      	cbz	r0, 80058d4 <_puts_r+0x10>
 80058cc:	6983      	ldr	r3, [r0, #24]
 80058ce:	b90b      	cbnz	r3, 80058d4 <_puts_r+0x10>
 80058d0:	f000 fa48 	bl	8005d64 <__sinit>
 80058d4:	69ab      	ldr	r3, [r5, #24]
 80058d6:	68ac      	ldr	r4, [r5, #8]
 80058d8:	b913      	cbnz	r3, 80058e0 <_puts_r+0x1c>
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 fa42 	bl	8005d64 <__sinit>
 80058e0:	4b2c      	ldr	r3, [pc, #176]	; (8005994 <_puts_r+0xd0>)
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d120      	bne.n	8005928 <_puts_r+0x64>
 80058e6:	686c      	ldr	r4, [r5, #4]
 80058e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058ea:	07db      	lsls	r3, r3, #31
 80058ec:	d405      	bmi.n	80058fa <_puts_r+0x36>
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	0598      	lsls	r0, r3, #22
 80058f2:	d402      	bmi.n	80058fa <_puts_r+0x36>
 80058f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058f6:	f000 fad3 	bl	8005ea0 <__retarget_lock_acquire_recursive>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	0719      	lsls	r1, r3, #28
 80058fe:	d51d      	bpl.n	800593c <_puts_r+0x78>
 8005900:	6923      	ldr	r3, [r4, #16]
 8005902:	b1db      	cbz	r3, 800593c <_puts_r+0x78>
 8005904:	3e01      	subs	r6, #1
 8005906:	68a3      	ldr	r3, [r4, #8]
 8005908:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800590c:	3b01      	subs	r3, #1
 800590e:	60a3      	str	r3, [r4, #8]
 8005910:	bb39      	cbnz	r1, 8005962 <_puts_r+0x9e>
 8005912:	2b00      	cmp	r3, #0
 8005914:	da38      	bge.n	8005988 <_puts_r+0xc4>
 8005916:	4622      	mov	r2, r4
 8005918:	210a      	movs	r1, #10
 800591a:	4628      	mov	r0, r5
 800591c:	f000 f848 	bl	80059b0 <__swbuf_r>
 8005920:	3001      	adds	r0, #1
 8005922:	d011      	beq.n	8005948 <_puts_r+0x84>
 8005924:	250a      	movs	r5, #10
 8005926:	e011      	b.n	800594c <_puts_r+0x88>
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <_puts_r+0xd4>)
 800592a:	429c      	cmp	r4, r3
 800592c:	d101      	bne.n	8005932 <_puts_r+0x6e>
 800592e:	68ac      	ldr	r4, [r5, #8]
 8005930:	e7da      	b.n	80058e8 <_puts_r+0x24>
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <_puts_r+0xd8>)
 8005934:	429c      	cmp	r4, r3
 8005936:	bf08      	it	eq
 8005938:	68ec      	ldreq	r4, [r5, #12]
 800593a:	e7d5      	b.n	80058e8 <_puts_r+0x24>
 800593c:	4621      	mov	r1, r4
 800593e:	4628      	mov	r0, r5
 8005940:	f000 f888 	bl	8005a54 <__swsetup_r>
 8005944:	2800      	cmp	r0, #0
 8005946:	d0dd      	beq.n	8005904 <_puts_r+0x40>
 8005948:	f04f 35ff 	mov.w	r5, #4294967295
 800594c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800594e:	07da      	lsls	r2, r3, #31
 8005950:	d405      	bmi.n	800595e <_puts_r+0x9a>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	059b      	lsls	r3, r3, #22
 8005956:	d402      	bmi.n	800595e <_puts_r+0x9a>
 8005958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595a:	f000 faa2 	bl	8005ea2 <__retarget_lock_release_recursive>
 800595e:	4628      	mov	r0, r5
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	2b00      	cmp	r3, #0
 8005964:	da04      	bge.n	8005970 <_puts_r+0xac>
 8005966:	69a2      	ldr	r2, [r4, #24]
 8005968:	429a      	cmp	r2, r3
 800596a:	dc06      	bgt.n	800597a <_puts_r+0xb6>
 800596c:	290a      	cmp	r1, #10
 800596e:	d004      	beq.n	800597a <_puts_r+0xb6>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	6022      	str	r2, [r4, #0]
 8005976:	7019      	strb	r1, [r3, #0]
 8005978:	e7c5      	b.n	8005906 <_puts_r+0x42>
 800597a:	4622      	mov	r2, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 f817 	bl	80059b0 <__swbuf_r>
 8005982:	3001      	adds	r0, #1
 8005984:	d1bf      	bne.n	8005906 <_puts_r+0x42>
 8005986:	e7df      	b.n	8005948 <_puts_r+0x84>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	250a      	movs	r5, #10
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	6022      	str	r2, [r4, #0]
 8005990:	701d      	strb	r5, [r3, #0]
 8005992:	e7db      	b.n	800594c <_puts_r+0x88>
 8005994:	08006ab4 	.word	0x08006ab4
 8005998:	08006ad4 	.word	0x08006ad4
 800599c:	08006a94 	.word	0x08006a94

080059a0 <puts>:
 80059a0:	4b02      	ldr	r3, [pc, #8]	; (80059ac <puts+0xc>)
 80059a2:	4601      	mov	r1, r0
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	f7ff bf8d 	b.w	80058c4 <_puts_r>
 80059aa:	bf00      	nop
 80059ac:	20000054 	.word	0x20000054

080059b0 <__swbuf_r>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	460e      	mov	r6, r1
 80059b4:	4614      	mov	r4, r2
 80059b6:	4605      	mov	r5, r0
 80059b8:	b118      	cbz	r0, 80059c2 <__swbuf_r+0x12>
 80059ba:	6983      	ldr	r3, [r0, #24]
 80059bc:	b90b      	cbnz	r3, 80059c2 <__swbuf_r+0x12>
 80059be:	f000 f9d1 	bl	8005d64 <__sinit>
 80059c2:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <__swbuf_r+0x98>)
 80059c4:	429c      	cmp	r4, r3
 80059c6:	d12b      	bne.n	8005a20 <__swbuf_r+0x70>
 80059c8:	686c      	ldr	r4, [r5, #4]
 80059ca:	69a3      	ldr	r3, [r4, #24]
 80059cc:	60a3      	str	r3, [r4, #8]
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	071a      	lsls	r2, r3, #28
 80059d2:	d52f      	bpl.n	8005a34 <__swbuf_r+0x84>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	b36b      	cbz	r3, 8005a34 <__swbuf_r+0x84>
 80059d8:	6923      	ldr	r3, [r4, #16]
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	1ac0      	subs	r0, r0, r3
 80059de:	6963      	ldr	r3, [r4, #20]
 80059e0:	b2f6      	uxtb	r6, r6
 80059e2:	4283      	cmp	r3, r0
 80059e4:	4637      	mov	r7, r6
 80059e6:	dc04      	bgt.n	80059f2 <__swbuf_r+0x42>
 80059e8:	4621      	mov	r1, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f926 	bl	8005c3c <_fflush_r>
 80059f0:	bb30      	cbnz	r0, 8005a40 <__swbuf_r+0x90>
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	60a3      	str	r3, [r4, #8]
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	701e      	strb	r6, [r3, #0]
 8005a00:	6963      	ldr	r3, [r4, #20]
 8005a02:	3001      	adds	r0, #1
 8005a04:	4283      	cmp	r3, r0
 8005a06:	d004      	beq.n	8005a12 <__swbuf_r+0x62>
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	07db      	lsls	r3, r3, #31
 8005a0c:	d506      	bpl.n	8005a1c <__swbuf_r+0x6c>
 8005a0e:	2e0a      	cmp	r6, #10
 8005a10:	d104      	bne.n	8005a1c <__swbuf_r+0x6c>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 f911 	bl	8005c3c <_fflush_r>
 8005a1a:	b988      	cbnz	r0, 8005a40 <__swbuf_r+0x90>
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a20:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <__swbuf_r+0x9c>)
 8005a22:	429c      	cmp	r4, r3
 8005a24:	d101      	bne.n	8005a2a <__swbuf_r+0x7a>
 8005a26:	68ac      	ldr	r4, [r5, #8]
 8005a28:	e7cf      	b.n	80059ca <__swbuf_r+0x1a>
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <__swbuf_r+0xa0>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	bf08      	it	eq
 8005a30:	68ec      	ldreq	r4, [r5, #12]
 8005a32:	e7ca      	b.n	80059ca <__swbuf_r+0x1a>
 8005a34:	4621      	mov	r1, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 f80c 	bl	8005a54 <__swsetup_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d0cb      	beq.n	80059d8 <__swbuf_r+0x28>
 8005a40:	f04f 37ff 	mov.w	r7, #4294967295
 8005a44:	e7ea      	b.n	8005a1c <__swbuf_r+0x6c>
 8005a46:	bf00      	nop
 8005a48:	08006ab4 	.word	0x08006ab4
 8005a4c:	08006ad4 	.word	0x08006ad4
 8005a50:	08006a94 	.word	0x08006a94

08005a54 <__swsetup_r>:
 8005a54:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <__swsetup_r+0xcc>)
 8005a56:	b570      	push	{r4, r5, r6, lr}
 8005a58:	681d      	ldr	r5, [r3, #0]
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	b125      	cbz	r5, 8005a6a <__swsetup_r+0x16>
 8005a60:	69ab      	ldr	r3, [r5, #24]
 8005a62:	b913      	cbnz	r3, 8005a6a <__swsetup_r+0x16>
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f97d 	bl	8005d64 <__sinit>
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <__swsetup_r+0xd0>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d10f      	bne.n	8005a90 <__swsetup_r+0x3c>
 8005a70:	686c      	ldr	r4, [r5, #4]
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a78:	0719      	lsls	r1, r3, #28
 8005a7a:	d42c      	bmi.n	8005ad6 <__swsetup_r+0x82>
 8005a7c:	06dd      	lsls	r5, r3, #27
 8005a7e:	d411      	bmi.n	8005aa4 <__swsetup_r+0x50>
 8005a80:	2309      	movs	r3, #9
 8005a82:	6033      	str	r3, [r6, #0]
 8005a84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	e03e      	b.n	8005b0e <__swsetup_r+0xba>
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <__swsetup_r+0xd4>)
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d101      	bne.n	8005a9a <__swsetup_r+0x46>
 8005a96:	68ac      	ldr	r4, [r5, #8]
 8005a98:	e7eb      	b.n	8005a72 <__swsetup_r+0x1e>
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <__swsetup_r+0xd8>)
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	bf08      	it	eq
 8005aa0:	68ec      	ldreq	r4, [r5, #12]
 8005aa2:	e7e6      	b.n	8005a72 <__swsetup_r+0x1e>
 8005aa4:	0758      	lsls	r0, r3, #29
 8005aa6:	d512      	bpl.n	8005ace <__swsetup_r+0x7a>
 8005aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aaa:	b141      	cbz	r1, 8005abe <__swsetup_r+0x6a>
 8005aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	d002      	beq.n	8005aba <__swsetup_r+0x66>
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f000 fa59 	bl	8005f6c <_free_r>
 8005aba:	2300      	movs	r3, #0
 8005abc:	6363      	str	r3, [r4, #52]	; 0x34
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f043 0308 	orr.w	r3, r3, #8
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	b94b      	cbnz	r3, 8005aee <__swsetup_r+0x9a>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae4:	d003      	beq.n	8005aee <__swsetup_r+0x9a>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f000 f9ff 	bl	8005eec <__smakebuf_r>
 8005aee:	89a0      	ldrh	r0, [r4, #12]
 8005af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005af4:	f010 0301 	ands.w	r3, r0, #1
 8005af8:	d00a      	beq.n	8005b10 <__swsetup_r+0xbc>
 8005afa:	2300      	movs	r3, #0
 8005afc:	60a3      	str	r3, [r4, #8]
 8005afe:	6963      	ldr	r3, [r4, #20]
 8005b00:	425b      	negs	r3, r3
 8005b02:	61a3      	str	r3, [r4, #24]
 8005b04:	6923      	ldr	r3, [r4, #16]
 8005b06:	b943      	cbnz	r3, 8005b1a <__swsetup_r+0xc6>
 8005b08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b0c:	d1ba      	bne.n	8005a84 <__swsetup_r+0x30>
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	0781      	lsls	r1, r0, #30
 8005b12:	bf58      	it	pl
 8005b14:	6963      	ldrpl	r3, [r4, #20]
 8005b16:	60a3      	str	r3, [r4, #8]
 8005b18:	e7f4      	b.n	8005b04 <__swsetup_r+0xb0>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e7f7      	b.n	8005b0e <__swsetup_r+0xba>
 8005b1e:	bf00      	nop
 8005b20:	20000054 	.word	0x20000054
 8005b24:	08006ab4 	.word	0x08006ab4
 8005b28:	08006ad4 	.word	0x08006ad4
 8005b2c:	08006a94 	.word	0x08006a94

08005b30 <__sflush_r>:
 8005b30:	898a      	ldrh	r2, [r1, #12]
 8005b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b36:	4605      	mov	r5, r0
 8005b38:	0710      	lsls	r0, r2, #28
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	d458      	bmi.n	8005bf0 <__sflush_r+0xc0>
 8005b3e:	684b      	ldr	r3, [r1, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dc05      	bgt.n	8005b50 <__sflush_r+0x20>
 8005b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dc02      	bgt.n	8005b50 <__sflush_r+0x20>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	d0f9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005b56:	2300      	movs	r3, #0
 8005b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b5c:	682f      	ldr	r7, [r5, #0]
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	d032      	beq.n	8005bc8 <__sflush_r+0x98>
 8005b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	075a      	lsls	r2, r3, #29
 8005b68:	d505      	bpl.n	8005b76 <__sflush_r+0x46>
 8005b6a:	6863      	ldr	r3, [r4, #4]
 8005b6c:	1ac0      	subs	r0, r0, r3
 8005b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b70:	b10b      	cbz	r3, 8005b76 <__sflush_r+0x46>
 8005b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b74:	1ac0      	subs	r0, r0, r3
 8005b76:	2300      	movs	r3, #0
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b7c:	6a21      	ldr	r1, [r4, #32]
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b0      	blx	r6
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	d106      	bne.n	8005b96 <__sflush_r+0x66>
 8005b88:	6829      	ldr	r1, [r5, #0]
 8005b8a:	291d      	cmp	r1, #29
 8005b8c:	d82c      	bhi.n	8005be8 <__sflush_r+0xb8>
 8005b8e:	4a2a      	ldr	r2, [pc, #168]	; (8005c38 <__sflush_r+0x108>)
 8005b90:	40ca      	lsrs	r2, r1
 8005b92:	07d6      	lsls	r6, r2, #31
 8005b94:	d528      	bpl.n	8005be8 <__sflush_r+0xb8>
 8005b96:	2200      	movs	r2, #0
 8005b98:	6062      	str	r2, [r4, #4]
 8005b9a:	04d9      	lsls	r1, r3, #19
 8005b9c:	6922      	ldr	r2, [r4, #16]
 8005b9e:	6022      	str	r2, [r4, #0]
 8005ba0:	d504      	bpl.n	8005bac <__sflush_r+0x7c>
 8005ba2:	1c42      	adds	r2, r0, #1
 8005ba4:	d101      	bne.n	8005baa <__sflush_r+0x7a>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	b903      	cbnz	r3, 8005bac <__sflush_r+0x7c>
 8005baa:	6560      	str	r0, [r4, #84]	; 0x54
 8005bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bae:	602f      	str	r7, [r5, #0]
 8005bb0:	2900      	cmp	r1, #0
 8005bb2:	d0ca      	beq.n	8005b4a <__sflush_r+0x1a>
 8005bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d002      	beq.n	8005bc2 <__sflush_r+0x92>
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 f9d5 	bl	8005f6c <_free_r>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8005bc6:	e7c1      	b.n	8005b4c <__sflush_r+0x1c>
 8005bc8:	6a21      	ldr	r1, [r4, #32]
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b0      	blx	r6
 8005bd0:	1c41      	adds	r1, r0, #1
 8005bd2:	d1c7      	bne.n	8005b64 <__sflush_r+0x34>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0c4      	beq.n	8005b64 <__sflush_r+0x34>
 8005bda:	2b1d      	cmp	r3, #29
 8005bdc:	d001      	beq.n	8005be2 <__sflush_r+0xb2>
 8005bde:	2b16      	cmp	r3, #22
 8005be0:	d101      	bne.n	8005be6 <__sflush_r+0xb6>
 8005be2:	602f      	str	r7, [r5, #0]
 8005be4:	e7b1      	b.n	8005b4a <__sflush_r+0x1a>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	e7ad      	b.n	8005b4c <__sflush_r+0x1c>
 8005bf0:	690f      	ldr	r7, [r1, #16]
 8005bf2:	2f00      	cmp	r7, #0
 8005bf4:	d0a9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005bf6:	0793      	lsls	r3, r2, #30
 8005bf8:	680e      	ldr	r6, [r1, #0]
 8005bfa:	bf08      	it	eq
 8005bfc:	694b      	ldreq	r3, [r1, #20]
 8005bfe:	600f      	str	r7, [r1, #0]
 8005c00:	bf18      	it	ne
 8005c02:	2300      	movne	r3, #0
 8005c04:	eba6 0807 	sub.w	r8, r6, r7
 8005c08:	608b      	str	r3, [r1, #8]
 8005c0a:	f1b8 0f00 	cmp.w	r8, #0
 8005c0e:	dd9c      	ble.n	8005b4a <__sflush_r+0x1a>
 8005c10:	6a21      	ldr	r1, [r4, #32]
 8005c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c14:	4643      	mov	r3, r8
 8005c16:	463a      	mov	r2, r7
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b0      	blx	r6
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	dc06      	bgt.n	8005c2e <__sflush_r+0xfe>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2c:	e78e      	b.n	8005b4c <__sflush_r+0x1c>
 8005c2e:	4407      	add	r7, r0
 8005c30:	eba8 0800 	sub.w	r8, r8, r0
 8005c34:	e7e9      	b.n	8005c0a <__sflush_r+0xda>
 8005c36:	bf00      	nop
 8005c38:	20400001 	.word	0x20400001

08005c3c <_fflush_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	b913      	cbnz	r3, 8005c4c <_fflush_r+0x10>
 8005c46:	2500      	movs	r5, #0
 8005c48:	4628      	mov	r0, r5
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	b118      	cbz	r0, 8005c56 <_fflush_r+0x1a>
 8005c4e:	6983      	ldr	r3, [r0, #24]
 8005c50:	b90b      	cbnz	r3, 8005c56 <_fflush_r+0x1a>
 8005c52:	f000 f887 	bl	8005d64 <__sinit>
 8005c56:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <_fflush_r+0x6c>)
 8005c58:	429c      	cmp	r4, r3
 8005c5a:	d11b      	bne.n	8005c94 <_fflush_r+0x58>
 8005c5c:	686c      	ldr	r4, [r5, #4]
 8005c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0ef      	beq.n	8005c46 <_fflush_r+0xa>
 8005c66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c68:	07d0      	lsls	r0, r2, #31
 8005c6a:	d404      	bmi.n	8005c76 <_fflush_r+0x3a>
 8005c6c:	0599      	lsls	r1, r3, #22
 8005c6e:	d402      	bmi.n	8005c76 <_fflush_r+0x3a>
 8005c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c72:	f000 f915 	bl	8005ea0 <__retarget_lock_acquire_recursive>
 8005c76:	4628      	mov	r0, r5
 8005c78:	4621      	mov	r1, r4
 8005c7a:	f7ff ff59 	bl	8005b30 <__sflush_r>
 8005c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c80:	07da      	lsls	r2, r3, #31
 8005c82:	4605      	mov	r5, r0
 8005c84:	d4e0      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	059b      	lsls	r3, r3, #22
 8005c8a:	d4dd      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c8e:	f000 f908 	bl	8005ea2 <__retarget_lock_release_recursive>
 8005c92:	e7d9      	b.n	8005c48 <_fflush_r+0xc>
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <_fflush_r+0x70>)
 8005c96:	429c      	cmp	r4, r3
 8005c98:	d101      	bne.n	8005c9e <_fflush_r+0x62>
 8005c9a:	68ac      	ldr	r4, [r5, #8]
 8005c9c:	e7df      	b.n	8005c5e <_fflush_r+0x22>
 8005c9e:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <_fflush_r+0x74>)
 8005ca0:	429c      	cmp	r4, r3
 8005ca2:	bf08      	it	eq
 8005ca4:	68ec      	ldreq	r4, [r5, #12]
 8005ca6:	e7da      	b.n	8005c5e <_fflush_r+0x22>
 8005ca8:	08006ab4 	.word	0x08006ab4
 8005cac:	08006ad4 	.word	0x08006ad4
 8005cb0:	08006a94 	.word	0x08006a94

08005cb4 <std>:
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	b510      	push	{r4, lr}
 8005cb8:	4604      	mov	r4, r0
 8005cba:	e9c0 3300 	strd	r3, r3, [r0]
 8005cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cc2:	6083      	str	r3, [r0, #8]
 8005cc4:	8181      	strh	r1, [r0, #12]
 8005cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8005cc8:	81c2      	strh	r2, [r0, #14]
 8005cca:	6183      	str	r3, [r0, #24]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	2208      	movs	r2, #8
 8005cd0:	305c      	adds	r0, #92	; 0x5c
 8005cd2:	f7ff fdd7 	bl	8005884 <memset>
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <std+0x38>)
 8005cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <std+0x3c>)
 8005cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <std+0x40>)
 8005ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <std+0x44>)
 8005ce4:	6224      	str	r4, [r4, #32]
 8005ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop
 8005cec:	080066bd 	.word	0x080066bd
 8005cf0:	080066df 	.word	0x080066df
 8005cf4:	08006717 	.word	0x08006717
 8005cf8:	0800673b 	.word	0x0800673b

08005cfc <_cleanup_r>:
 8005cfc:	4901      	ldr	r1, [pc, #4]	; (8005d04 <_cleanup_r+0x8>)
 8005cfe:	f000 b8af 	b.w	8005e60 <_fwalk_reent>
 8005d02:	bf00      	nop
 8005d04:	08005c3d 	.word	0x08005c3d

08005d08 <__sfmoreglue>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	1e4a      	subs	r2, r1, #1
 8005d0c:	2568      	movs	r5, #104	; 0x68
 8005d0e:	4355      	muls	r5, r2
 8005d10:	460e      	mov	r6, r1
 8005d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d16:	f000 f979 	bl	800600c <_malloc_r>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	b140      	cbz	r0, 8005d30 <__sfmoreglue+0x28>
 8005d1e:	2100      	movs	r1, #0
 8005d20:	e9c0 1600 	strd	r1, r6, [r0]
 8005d24:	300c      	adds	r0, #12
 8005d26:	60a0      	str	r0, [r4, #8]
 8005d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d2c:	f7ff fdaa 	bl	8005884 <memset>
 8005d30:	4620      	mov	r0, r4
 8005d32:	bd70      	pop	{r4, r5, r6, pc}

08005d34 <__sfp_lock_acquire>:
 8005d34:	4801      	ldr	r0, [pc, #4]	; (8005d3c <__sfp_lock_acquire+0x8>)
 8005d36:	f000 b8b3 	b.w	8005ea0 <__retarget_lock_acquire_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	20000da4 	.word	0x20000da4

08005d40 <__sfp_lock_release>:
 8005d40:	4801      	ldr	r0, [pc, #4]	; (8005d48 <__sfp_lock_release+0x8>)
 8005d42:	f000 b8ae 	b.w	8005ea2 <__retarget_lock_release_recursive>
 8005d46:	bf00      	nop
 8005d48:	20000da4 	.word	0x20000da4

08005d4c <__sinit_lock_acquire>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	; (8005d54 <__sinit_lock_acquire+0x8>)
 8005d4e:	f000 b8a7 	b.w	8005ea0 <__retarget_lock_acquire_recursive>
 8005d52:	bf00      	nop
 8005d54:	20000d9f 	.word	0x20000d9f

08005d58 <__sinit_lock_release>:
 8005d58:	4801      	ldr	r0, [pc, #4]	; (8005d60 <__sinit_lock_release+0x8>)
 8005d5a:	f000 b8a2 	b.w	8005ea2 <__retarget_lock_release_recursive>
 8005d5e:	bf00      	nop
 8005d60:	20000d9f 	.word	0x20000d9f

08005d64 <__sinit>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	4604      	mov	r4, r0
 8005d68:	f7ff fff0 	bl	8005d4c <__sinit_lock_acquire>
 8005d6c:	69a3      	ldr	r3, [r4, #24]
 8005d6e:	b11b      	cbz	r3, 8005d78 <__sinit+0x14>
 8005d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d74:	f7ff bff0 	b.w	8005d58 <__sinit_lock_release>
 8005d78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d7c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <__sinit+0x68>)
 8005d80:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <__sinit+0x6c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d86:	42a3      	cmp	r3, r4
 8005d88:	bf04      	itt	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	61a3      	streq	r3, [r4, #24]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 f820 	bl	8005dd4 <__sfp>
 8005d94:	6060      	str	r0, [r4, #4]
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 f81c 	bl	8005dd4 <__sfp>
 8005d9c:	60a0      	str	r0, [r4, #8]
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 f818 	bl	8005dd4 <__sfp>
 8005da4:	2200      	movs	r2, #0
 8005da6:	60e0      	str	r0, [r4, #12]
 8005da8:	2104      	movs	r1, #4
 8005daa:	6860      	ldr	r0, [r4, #4]
 8005dac:	f7ff ff82 	bl	8005cb4 <std>
 8005db0:	68a0      	ldr	r0, [r4, #8]
 8005db2:	2201      	movs	r2, #1
 8005db4:	2109      	movs	r1, #9
 8005db6:	f7ff ff7d 	bl	8005cb4 <std>
 8005dba:	68e0      	ldr	r0, [r4, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	2112      	movs	r1, #18
 8005dc0:	f7ff ff78 	bl	8005cb4 <std>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	61a3      	str	r3, [r4, #24]
 8005dc8:	e7d2      	b.n	8005d70 <__sinit+0xc>
 8005dca:	bf00      	nop
 8005dcc:	08006a90 	.word	0x08006a90
 8005dd0:	08005cfd 	.word	0x08005cfd

08005dd4 <__sfp>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	4607      	mov	r7, r0
 8005dd8:	f7ff ffac 	bl	8005d34 <__sfp_lock_acquire>
 8005ddc:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <__sfp+0x84>)
 8005dde:	681e      	ldr	r6, [r3, #0]
 8005de0:	69b3      	ldr	r3, [r6, #24]
 8005de2:	b913      	cbnz	r3, 8005dea <__sfp+0x16>
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7ff ffbd 	bl	8005d64 <__sinit>
 8005dea:	3648      	adds	r6, #72	; 0x48
 8005dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	d503      	bpl.n	8005dfc <__sfp+0x28>
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	b30b      	cbz	r3, 8005e3c <__sfp+0x68>
 8005df8:	6836      	ldr	r6, [r6, #0]
 8005dfa:	e7f7      	b.n	8005dec <__sfp+0x18>
 8005dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e00:	b9d5      	cbnz	r5, 8005e38 <__sfp+0x64>
 8005e02:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <__sfp+0x88>)
 8005e04:	60e3      	str	r3, [r4, #12]
 8005e06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e0a:	6665      	str	r5, [r4, #100]	; 0x64
 8005e0c:	f000 f847 	bl	8005e9e <__retarget_lock_init_recursive>
 8005e10:	f7ff ff96 	bl	8005d40 <__sfp_lock_release>
 8005e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e1c:	6025      	str	r5, [r4, #0]
 8005e1e:	61a5      	str	r5, [r4, #24]
 8005e20:	2208      	movs	r2, #8
 8005e22:	4629      	mov	r1, r5
 8005e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e28:	f7ff fd2c 	bl	8005884 <memset>
 8005e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e34:	4620      	mov	r0, r4
 8005e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e38:	3468      	adds	r4, #104	; 0x68
 8005e3a:	e7d9      	b.n	8005df0 <__sfp+0x1c>
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f7ff ff62 	bl	8005d08 <__sfmoreglue>
 8005e44:	4604      	mov	r4, r0
 8005e46:	6030      	str	r0, [r6, #0]
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d1d5      	bne.n	8005df8 <__sfp+0x24>
 8005e4c:	f7ff ff78 	bl	8005d40 <__sfp_lock_release>
 8005e50:	230c      	movs	r3, #12
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	e7ee      	b.n	8005e34 <__sfp+0x60>
 8005e56:	bf00      	nop
 8005e58:	08006a90 	.word	0x08006a90
 8005e5c:	ffff0001 	.word	0xffff0001

08005e60 <_fwalk_reent>:
 8005e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e64:	4606      	mov	r6, r0
 8005e66:	4688      	mov	r8, r1
 8005e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e6c:	2700      	movs	r7, #0
 8005e6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e72:	f1b9 0901 	subs.w	r9, r9, #1
 8005e76:	d505      	bpl.n	8005e84 <_fwalk_reent+0x24>
 8005e78:	6824      	ldr	r4, [r4, #0]
 8005e7a:	2c00      	cmp	r4, #0
 8005e7c:	d1f7      	bne.n	8005e6e <_fwalk_reent+0xe>
 8005e7e:	4638      	mov	r0, r7
 8005e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e84:	89ab      	ldrh	r3, [r5, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d907      	bls.n	8005e9a <_fwalk_reent+0x3a>
 8005e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	d003      	beq.n	8005e9a <_fwalk_reent+0x3a>
 8005e92:	4629      	mov	r1, r5
 8005e94:	4630      	mov	r0, r6
 8005e96:	47c0      	blx	r8
 8005e98:	4307      	orrs	r7, r0
 8005e9a:	3568      	adds	r5, #104	; 0x68
 8005e9c:	e7e9      	b.n	8005e72 <_fwalk_reent+0x12>

08005e9e <__retarget_lock_init_recursive>:
 8005e9e:	4770      	bx	lr

08005ea0 <__retarget_lock_acquire_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__retarget_lock_release_recursive>:
 8005ea2:	4770      	bx	lr

08005ea4 <__swhatbuf_r>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	460e      	mov	r6, r1
 8005ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eac:	2900      	cmp	r1, #0
 8005eae:	b096      	sub	sp, #88	; 0x58
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	da07      	bge.n	8005ec6 <__swhatbuf_r+0x22>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	89b3      	ldrh	r3, [r6, #12]
 8005ebc:	061a      	lsls	r2, r3, #24
 8005ebe:	d410      	bmi.n	8005ee2 <__swhatbuf_r+0x3e>
 8005ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec4:	e00e      	b.n	8005ee4 <__swhatbuf_r+0x40>
 8005ec6:	466a      	mov	r2, sp
 8005ec8:	f000 fc5e 	bl	8006788 <_fstat_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	dbf2      	blt.n	8005eb6 <__swhatbuf_r+0x12>
 8005ed0:	9a01      	ldr	r2, [sp, #4]
 8005ed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eda:	425a      	negs	r2, r3
 8005edc:	415a      	adcs	r2, r3
 8005ede:	602a      	str	r2, [r5, #0]
 8005ee0:	e7ee      	b.n	8005ec0 <__swhatbuf_r+0x1c>
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	b016      	add	sp, #88	; 0x58
 8005eea:	bd70      	pop	{r4, r5, r6, pc}

08005eec <__smakebuf_r>:
 8005eec:	898b      	ldrh	r3, [r1, #12]
 8005eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ef0:	079d      	lsls	r5, r3, #30
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	d507      	bpl.n	8005f08 <__smakebuf_r+0x1c>
 8005ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	2301      	movs	r3, #1
 8005f02:	6163      	str	r3, [r4, #20]
 8005f04:	b002      	add	sp, #8
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	ab01      	add	r3, sp, #4
 8005f0a:	466a      	mov	r2, sp
 8005f0c:	f7ff ffca 	bl	8005ea4 <__swhatbuf_r>
 8005f10:	9900      	ldr	r1, [sp, #0]
 8005f12:	4605      	mov	r5, r0
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 f879 	bl	800600c <_malloc_r>
 8005f1a:	b948      	cbnz	r0, 8005f30 <__smakebuf_r+0x44>
 8005f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f20:	059a      	lsls	r2, r3, #22
 8005f22:	d4ef      	bmi.n	8005f04 <__smakebuf_r+0x18>
 8005f24:	f023 0303 	bic.w	r3, r3, #3
 8005f28:	f043 0302 	orr.w	r3, r3, #2
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	e7e3      	b.n	8005ef8 <__smakebuf_r+0xc>
 8005f30:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <__smakebuf_r+0x7c>)
 8005f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	6020      	str	r0, [r4, #0]
 8005f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	6163      	str	r3, [r4, #20]
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	6120      	str	r0, [r4, #16]
 8005f46:	b15b      	cbz	r3, 8005f60 <__smakebuf_r+0x74>
 8005f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 fc2d 	bl	80067ac <_isatty_r>
 8005f52:	b128      	cbz	r0, 8005f60 <__smakebuf_r+0x74>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	89a0      	ldrh	r0, [r4, #12]
 8005f62:	4305      	orrs	r5, r0
 8005f64:	81a5      	strh	r5, [r4, #12]
 8005f66:	e7cd      	b.n	8005f04 <__smakebuf_r+0x18>
 8005f68:	08005cfd 	.word	0x08005cfd

08005f6c <_free_r>:
 8005f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f6e:	2900      	cmp	r1, #0
 8005f70:	d048      	beq.n	8006004 <_free_r+0x98>
 8005f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f76:	9001      	str	r0, [sp, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f7e:	bfb8      	it	lt
 8005f80:	18e4      	addlt	r4, r4, r3
 8005f82:	f000 fc35 	bl	80067f0 <__malloc_lock>
 8005f86:	4a20      	ldr	r2, [pc, #128]	; (8006008 <_free_r+0x9c>)
 8005f88:	9801      	ldr	r0, [sp, #4]
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	b933      	cbnz	r3, 8005f9e <_free_r+0x32>
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	6014      	str	r4, [r2, #0]
 8005f94:	b003      	add	sp, #12
 8005f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f9a:	f000 bc2f 	b.w	80067fc <__malloc_unlock>
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	d90b      	bls.n	8005fba <_free_r+0x4e>
 8005fa2:	6821      	ldr	r1, [r4, #0]
 8005fa4:	1862      	adds	r2, r4, r1
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	bf04      	itt	eq
 8005faa:	681a      	ldreq	r2, [r3, #0]
 8005fac:	685b      	ldreq	r3, [r3, #4]
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	bf04      	itt	eq
 8005fb2:	1852      	addeq	r2, r2, r1
 8005fb4:	6022      	streq	r2, [r4, #0]
 8005fb6:	602c      	str	r4, [r5, #0]
 8005fb8:	e7ec      	b.n	8005f94 <_free_r+0x28>
 8005fba:	461a      	mov	r2, r3
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b10b      	cbz	r3, 8005fc4 <_free_r+0x58>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d9fa      	bls.n	8005fba <_free_r+0x4e>
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	1855      	adds	r5, r2, r1
 8005fc8:	42a5      	cmp	r5, r4
 8005fca:	d10b      	bne.n	8005fe4 <_free_r+0x78>
 8005fcc:	6824      	ldr	r4, [r4, #0]
 8005fce:	4421      	add	r1, r4
 8005fd0:	1854      	adds	r4, r2, r1
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	d1dd      	bne.n	8005f94 <_free_r+0x28>
 8005fd8:	681c      	ldr	r4, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	6053      	str	r3, [r2, #4]
 8005fde:	4421      	add	r1, r4
 8005fe0:	6011      	str	r1, [r2, #0]
 8005fe2:	e7d7      	b.n	8005f94 <_free_r+0x28>
 8005fe4:	d902      	bls.n	8005fec <_free_r+0x80>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	6003      	str	r3, [r0, #0]
 8005fea:	e7d3      	b.n	8005f94 <_free_r+0x28>
 8005fec:	6825      	ldr	r5, [r4, #0]
 8005fee:	1961      	adds	r1, r4, r5
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf04      	itt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	bf04      	itt	eq
 8005ffc:	1949      	addeq	r1, r1, r5
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	6054      	str	r4, [r2, #4]
 8006002:	e7c7      	b.n	8005f94 <_free_r+0x28>
 8006004:	b003      	add	sp, #12
 8006006:	bd30      	pop	{r4, r5, pc}
 8006008:	200000fc 	.word	0x200000fc

0800600c <_malloc_r>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	1ccd      	adds	r5, r1, #3
 8006010:	f025 0503 	bic.w	r5, r5, #3
 8006014:	3508      	adds	r5, #8
 8006016:	2d0c      	cmp	r5, #12
 8006018:	bf38      	it	cc
 800601a:	250c      	movcc	r5, #12
 800601c:	2d00      	cmp	r5, #0
 800601e:	4606      	mov	r6, r0
 8006020:	db01      	blt.n	8006026 <_malloc_r+0x1a>
 8006022:	42a9      	cmp	r1, r5
 8006024:	d903      	bls.n	800602e <_malloc_r+0x22>
 8006026:	230c      	movs	r3, #12
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	2000      	movs	r0, #0
 800602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602e:	f000 fbdf 	bl	80067f0 <__malloc_lock>
 8006032:	4921      	ldr	r1, [pc, #132]	; (80060b8 <_malloc_r+0xac>)
 8006034:	680a      	ldr	r2, [r1, #0]
 8006036:	4614      	mov	r4, r2
 8006038:	b99c      	cbnz	r4, 8006062 <_malloc_r+0x56>
 800603a:	4f20      	ldr	r7, [pc, #128]	; (80060bc <_malloc_r+0xb0>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	b923      	cbnz	r3, 800604a <_malloc_r+0x3e>
 8006040:	4621      	mov	r1, r4
 8006042:	4630      	mov	r0, r6
 8006044:	f000 fb2a 	bl	800669c <_sbrk_r>
 8006048:	6038      	str	r0, [r7, #0]
 800604a:	4629      	mov	r1, r5
 800604c:	4630      	mov	r0, r6
 800604e:	f000 fb25 	bl	800669c <_sbrk_r>
 8006052:	1c43      	adds	r3, r0, #1
 8006054:	d123      	bne.n	800609e <_malloc_r+0x92>
 8006056:	230c      	movs	r3, #12
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	4630      	mov	r0, r6
 800605c:	f000 fbce 	bl	80067fc <__malloc_unlock>
 8006060:	e7e3      	b.n	800602a <_malloc_r+0x1e>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	1b5b      	subs	r3, r3, r5
 8006066:	d417      	bmi.n	8006098 <_malloc_r+0x8c>
 8006068:	2b0b      	cmp	r3, #11
 800606a:	d903      	bls.n	8006074 <_malloc_r+0x68>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	441c      	add	r4, r3
 8006070:	6025      	str	r5, [r4, #0]
 8006072:	e004      	b.n	800607e <_malloc_r+0x72>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	42a2      	cmp	r2, r4
 8006078:	bf0c      	ite	eq
 800607a:	600b      	streq	r3, [r1, #0]
 800607c:	6053      	strne	r3, [r2, #4]
 800607e:	4630      	mov	r0, r6
 8006080:	f000 fbbc 	bl	80067fc <__malloc_unlock>
 8006084:	f104 000b 	add.w	r0, r4, #11
 8006088:	1d23      	adds	r3, r4, #4
 800608a:	f020 0007 	bic.w	r0, r0, #7
 800608e:	1ac2      	subs	r2, r0, r3
 8006090:	d0cc      	beq.n	800602c <_malloc_r+0x20>
 8006092:	1a1b      	subs	r3, r3, r0
 8006094:	50a3      	str	r3, [r4, r2]
 8006096:	e7c9      	b.n	800602c <_malloc_r+0x20>
 8006098:	4622      	mov	r2, r4
 800609a:	6864      	ldr	r4, [r4, #4]
 800609c:	e7cc      	b.n	8006038 <_malloc_r+0x2c>
 800609e:	1cc4      	adds	r4, r0, #3
 80060a0:	f024 0403 	bic.w	r4, r4, #3
 80060a4:	42a0      	cmp	r0, r4
 80060a6:	d0e3      	beq.n	8006070 <_malloc_r+0x64>
 80060a8:	1a21      	subs	r1, r4, r0
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 faf6 	bl	800669c <_sbrk_r>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d1dd      	bne.n	8006070 <_malloc_r+0x64>
 80060b4:	e7cf      	b.n	8006056 <_malloc_r+0x4a>
 80060b6:	bf00      	nop
 80060b8:	200000fc 	.word	0x200000fc
 80060bc:	20000100 	.word	0x20000100

080060c0 <__sfputc_r>:
 80060c0:	6893      	ldr	r3, [r2, #8]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	b410      	push	{r4}
 80060c8:	6093      	str	r3, [r2, #8]
 80060ca:	da08      	bge.n	80060de <__sfputc_r+0x1e>
 80060cc:	6994      	ldr	r4, [r2, #24]
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	db01      	blt.n	80060d6 <__sfputc_r+0x16>
 80060d2:	290a      	cmp	r1, #10
 80060d4:	d103      	bne.n	80060de <__sfputc_r+0x1e>
 80060d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060da:	f7ff bc69 	b.w	80059b0 <__swbuf_r>
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	1c58      	adds	r0, r3, #1
 80060e2:	6010      	str	r0, [r2, #0]
 80060e4:	7019      	strb	r1, [r3, #0]
 80060e6:	4608      	mov	r0, r1
 80060e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <__sfputs_r>:
 80060ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f0:	4606      	mov	r6, r0
 80060f2:	460f      	mov	r7, r1
 80060f4:	4614      	mov	r4, r2
 80060f6:	18d5      	adds	r5, r2, r3
 80060f8:	42ac      	cmp	r4, r5
 80060fa:	d101      	bne.n	8006100 <__sfputs_r+0x12>
 80060fc:	2000      	movs	r0, #0
 80060fe:	e007      	b.n	8006110 <__sfputs_r+0x22>
 8006100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006104:	463a      	mov	r2, r7
 8006106:	4630      	mov	r0, r6
 8006108:	f7ff ffda 	bl	80060c0 <__sfputc_r>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d1f3      	bne.n	80060f8 <__sfputs_r+0xa>
 8006110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006114 <_vfiprintf_r>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	460d      	mov	r5, r1
 800611a:	b09d      	sub	sp, #116	; 0x74
 800611c:	4614      	mov	r4, r2
 800611e:	4698      	mov	r8, r3
 8006120:	4606      	mov	r6, r0
 8006122:	b118      	cbz	r0, 800612c <_vfiprintf_r+0x18>
 8006124:	6983      	ldr	r3, [r0, #24]
 8006126:	b90b      	cbnz	r3, 800612c <_vfiprintf_r+0x18>
 8006128:	f7ff fe1c 	bl	8005d64 <__sinit>
 800612c:	4b89      	ldr	r3, [pc, #548]	; (8006354 <_vfiprintf_r+0x240>)
 800612e:	429d      	cmp	r5, r3
 8006130:	d11b      	bne.n	800616a <_vfiprintf_r+0x56>
 8006132:	6875      	ldr	r5, [r6, #4]
 8006134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006136:	07d9      	lsls	r1, r3, #31
 8006138:	d405      	bmi.n	8006146 <_vfiprintf_r+0x32>
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	059a      	lsls	r2, r3, #22
 800613e:	d402      	bmi.n	8006146 <_vfiprintf_r+0x32>
 8006140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006142:	f7ff fead 	bl	8005ea0 <__retarget_lock_acquire_recursive>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	071b      	lsls	r3, r3, #28
 800614a:	d501      	bpl.n	8006150 <_vfiprintf_r+0x3c>
 800614c:	692b      	ldr	r3, [r5, #16]
 800614e:	b9eb      	cbnz	r3, 800618c <_vfiprintf_r+0x78>
 8006150:	4629      	mov	r1, r5
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff fc7e 	bl	8005a54 <__swsetup_r>
 8006158:	b1c0      	cbz	r0, 800618c <_vfiprintf_r+0x78>
 800615a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800615c:	07dc      	lsls	r4, r3, #31
 800615e:	d50e      	bpl.n	800617e <_vfiprintf_r+0x6a>
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	b01d      	add	sp, #116	; 0x74
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	4b7b      	ldr	r3, [pc, #492]	; (8006358 <_vfiprintf_r+0x244>)
 800616c:	429d      	cmp	r5, r3
 800616e:	d101      	bne.n	8006174 <_vfiprintf_r+0x60>
 8006170:	68b5      	ldr	r5, [r6, #8]
 8006172:	e7df      	b.n	8006134 <_vfiprintf_r+0x20>
 8006174:	4b79      	ldr	r3, [pc, #484]	; (800635c <_vfiprintf_r+0x248>)
 8006176:	429d      	cmp	r5, r3
 8006178:	bf08      	it	eq
 800617a:	68f5      	ldreq	r5, [r6, #12]
 800617c:	e7da      	b.n	8006134 <_vfiprintf_r+0x20>
 800617e:	89ab      	ldrh	r3, [r5, #12]
 8006180:	0598      	lsls	r0, r3, #22
 8006182:	d4ed      	bmi.n	8006160 <_vfiprintf_r+0x4c>
 8006184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006186:	f7ff fe8c 	bl	8005ea2 <__retarget_lock_release_recursive>
 800618a:	e7e9      	b.n	8006160 <_vfiprintf_r+0x4c>
 800618c:	2300      	movs	r3, #0
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
 8006190:	2320      	movs	r3, #32
 8006192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006196:	f8cd 800c 	str.w	r8, [sp, #12]
 800619a:	2330      	movs	r3, #48	; 0x30
 800619c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006360 <_vfiprintf_r+0x24c>
 80061a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a4:	f04f 0901 	mov.w	r9, #1
 80061a8:	4623      	mov	r3, r4
 80061aa:	469a      	mov	sl, r3
 80061ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061b0:	b10a      	cbz	r2, 80061b6 <_vfiprintf_r+0xa2>
 80061b2:	2a25      	cmp	r2, #37	; 0x25
 80061b4:	d1f9      	bne.n	80061aa <_vfiprintf_r+0x96>
 80061b6:	ebba 0b04 	subs.w	fp, sl, r4
 80061ba:	d00b      	beq.n	80061d4 <_vfiprintf_r+0xc0>
 80061bc:	465b      	mov	r3, fp
 80061be:	4622      	mov	r2, r4
 80061c0:	4629      	mov	r1, r5
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7ff ff93 	bl	80060ee <__sfputs_r>
 80061c8:	3001      	adds	r0, #1
 80061ca:	f000 80aa 	beq.w	8006322 <_vfiprintf_r+0x20e>
 80061ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d0:	445a      	add	r2, fp
 80061d2:	9209      	str	r2, [sp, #36]	; 0x24
 80061d4:	f89a 3000 	ldrb.w	r3, [sl]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80a2 	beq.w	8006322 <_vfiprintf_r+0x20e>
 80061de:	2300      	movs	r3, #0
 80061e0:	f04f 32ff 	mov.w	r2, #4294967295
 80061e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e8:	f10a 0a01 	add.w	sl, sl, #1
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	9307      	str	r3, [sp, #28]
 80061f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061f4:	931a      	str	r3, [sp, #104]	; 0x68
 80061f6:	4654      	mov	r4, sl
 80061f8:	2205      	movs	r2, #5
 80061fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fe:	4858      	ldr	r0, [pc, #352]	; (8006360 <_vfiprintf_r+0x24c>)
 8006200:	f7f9 fff6 	bl	80001f0 <memchr>
 8006204:	9a04      	ldr	r2, [sp, #16]
 8006206:	b9d8      	cbnz	r0, 8006240 <_vfiprintf_r+0x12c>
 8006208:	06d1      	lsls	r1, r2, #27
 800620a:	bf44      	itt	mi
 800620c:	2320      	movmi	r3, #32
 800620e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006212:	0713      	lsls	r3, r2, #28
 8006214:	bf44      	itt	mi
 8006216:	232b      	movmi	r3, #43	; 0x2b
 8006218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621c:	f89a 3000 	ldrb.w	r3, [sl]
 8006220:	2b2a      	cmp	r3, #42	; 0x2a
 8006222:	d015      	beq.n	8006250 <_vfiprintf_r+0x13c>
 8006224:	9a07      	ldr	r2, [sp, #28]
 8006226:	4654      	mov	r4, sl
 8006228:	2000      	movs	r0, #0
 800622a:	f04f 0c0a 	mov.w	ip, #10
 800622e:	4621      	mov	r1, r4
 8006230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006234:	3b30      	subs	r3, #48	; 0x30
 8006236:	2b09      	cmp	r3, #9
 8006238:	d94e      	bls.n	80062d8 <_vfiprintf_r+0x1c4>
 800623a:	b1b0      	cbz	r0, 800626a <_vfiprintf_r+0x156>
 800623c:	9207      	str	r2, [sp, #28]
 800623e:	e014      	b.n	800626a <_vfiprintf_r+0x156>
 8006240:	eba0 0308 	sub.w	r3, r0, r8
 8006244:	fa09 f303 	lsl.w	r3, r9, r3
 8006248:	4313      	orrs	r3, r2
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	46a2      	mov	sl, r4
 800624e:	e7d2      	b.n	80061f6 <_vfiprintf_r+0xe2>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	1d19      	adds	r1, r3, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	9103      	str	r1, [sp, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	bfbb      	ittet	lt
 800625c:	425b      	neglt	r3, r3
 800625e:	f042 0202 	orrlt.w	r2, r2, #2
 8006262:	9307      	strge	r3, [sp, #28]
 8006264:	9307      	strlt	r3, [sp, #28]
 8006266:	bfb8      	it	lt
 8006268:	9204      	strlt	r2, [sp, #16]
 800626a:	7823      	ldrb	r3, [r4, #0]
 800626c:	2b2e      	cmp	r3, #46	; 0x2e
 800626e:	d10c      	bne.n	800628a <_vfiprintf_r+0x176>
 8006270:	7863      	ldrb	r3, [r4, #1]
 8006272:	2b2a      	cmp	r3, #42	; 0x2a
 8006274:	d135      	bne.n	80062e2 <_vfiprintf_r+0x1ce>
 8006276:	9b03      	ldr	r3, [sp, #12]
 8006278:	1d1a      	adds	r2, r3, #4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	9203      	str	r2, [sp, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	bfb8      	it	lt
 8006282:	f04f 33ff 	movlt.w	r3, #4294967295
 8006286:	3402      	adds	r4, #2
 8006288:	9305      	str	r3, [sp, #20]
 800628a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006370 <_vfiprintf_r+0x25c>
 800628e:	7821      	ldrb	r1, [r4, #0]
 8006290:	2203      	movs	r2, #3
 8006292:	4650      	mov	r0, sl
 8006294:	f7f9 ffac 	bl	80001f0 <memchr>
 8006298:	b140      	cbz	r0, 80062ac <_vfiprintf_r+0x198>
 800629a:	2340      	movs	r3, #64	; 0x40
 800629c:	eba0 000a 	sub.w	r0, r0, sl
 80062a0:	fa03 f000 	lsl.w	r0, r3, r0
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	4303      	orrs	r3, r0
 80062a8:	3401      	adds	r4, #1
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b0:	482c      	ldr	r0, [pc, #176]	; (8006364 <_vfiprintf_r+0x250>)
 80062b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062b6:	2206      	movs	r2, #6
 80062b8:	f7f9 ff9a 	bl	80001f0 <memchr>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d03f      	beq.n	8006340 <_vfiprintf_r+0x22c>
 80062c0:	4b29      	ldr	r3, [pc, #164]	; (8006368 <_vfiprintf_r+0x254>)
 80062c2:	bb1b      	cbnz	r3, 800630c <_vfiprintf_r+0x1f8>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	3307      	adds	r3, #7
 80062c8:	f023 0307 	bic.w	r3, r3, #7
 80062cc:	3308      	adds	r3, #8
 80062ce:	9303      	str	r3, [sp, #12]
 80062d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d2:	443b      	add	r3, r7
 80062d4:	9309      	str	r3, [sp, #36]	; 0x24
 80062d6:	e767      	b.n	80061a8 <_vfiprintf_r+0x94>
 80062d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062dc:	460c      	mov	r4, r1
 80062de:	2001      	movs	r0, #1
 80062e0:	e7a5      	b.n	800622e <_vfiprintf_r+0x11a>
 80062e2:	2300      	movs	r3, #0
 80062e4:	3401      	adds	r4, #1
 80062e6:	9305      	str	r3, [sp, #20]
 80062e8:	4619      	mov	r1, r3
 80062ea:	f04f 0c0a 	mov.w	ip, #10
 80062ee:	4620      	mov	r0, r4
 80062f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f4:	3a30      	subs	r2, #48	; 0x30
 80062f6:	2a09      	cmp	r2, #9
 80062f8:	d903      	bls.n	8006302 <_vfiprintf_r+0x1ee>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0c5      	beq.n	800628a <_vfiprintf_r+0x176>
 80062fe:	9105      	str	r1, [sp, #20]
 8006300:	e7c3      	b.n	800628a <_vfiprintf_r+0x176>
 8006302:	fb0c 2101 	mla	r1, ip, r1, r2
 8006306:	4604      	mov	r4, r0
 8006308:	2301      	movs	r3, #1
 800630a:	e7f0      	b.n	80062ee <_vfiprintf_r+0x1da>
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	462a      	mov	r2, r5
 8006312:	4b16      	ldr	r3, [pc, #88]	; (800636c <_vfiprintf_r+0x258>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4630      	mov	r0, r6
 8006318:	f3af 8000 	nop.w
 800631c:	4607      	mov	r7, r0
 800631e:	1c78      	adds	r0, r7, #1
 8006320:	d1d6      	bne.n	80062d0 <_vfiprintf_r+0x1bc>
 8006322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006324:	07d9      	lsls	r1, r3, #31
 8006326:	d405      	bmi.n	8006334 <_vfiprintf_r+0x220>
 8006328:	89ab      	ldrh	r3, [r5, #12]
 800632a:	059a      	lsls	r2, r3, #22
 800632c:	d402      	bmi.n	8006334 <_vfiprintf_r+0x220>
 800632e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006330:	f7ff fdb7 	bl	8005ea2 <__retarget_lock_release_recursive>
 8006334:	89ab      	ldrh	r3, [r5, #12]
 8006336:	065b      	lsls	r3, r3, #25
 8006338:	f53f af12 	bmi.w	8006160 <_vfiprintf_r+0x4c>
 800633c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800633e:	e711      	b.n	8006164 <_vfiprintf_r+0x50>
 8006340:	ab03      	add	r3, sp, #12
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	462a      	mov	r2, r5
 8006346:	4b09      	ldr	r3, [pc, #36]	; (800636c <_vfiprintf_r+0x258>)
 8006348:	a904      	add	r1, sp, #16
 800634a:	4630      	mov	r0, r6
 800634c:	f000 f880 	bl	8006450 <_printf_i>
 8006350:	e7e4      	b.n	800631c <_vfiprintf_r+0x208>
 8006352:	bf00      	nop
 8006354:	08006ab4 	.word	0x08006ab4
 8006358:	08006ad4 	.word	0x08006ad4
 800635c:	08006a94 	.word	0x08006a94
 8006360:	08006af4 	.word	0x08006af4
 8006364:	08006afe 	.word	0x08006afe
 8006368:	00000000 	.word	0x00000000
 800636c:	080060ef 	.word	0x080060ef
 8006370:	08006afa 	.word	0x08006afa

08006374 <_printf_common>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	4616      	mov	r6, r2
 800637a:	4699      	mov	r9, r3
 800637c:	688a      	ldr	r2, [r1, #8]
 800637e:	690b      	ldr	r3, [r1, #16]
 8006380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006384:	4293      	cmp	r3, r2
 8006386:	bfb8      	it	lt
 8006388:	4613      	movlt	r3, r2
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006390:	4607      	mov	r7, r0
 8006392:	460c      	mov	r4, r1
 8006394:	b10a      	cbz	r2, 800639a <_printf_common+0x26>
 8006396:	3301      	adds	r3, #1
 8006398:	6033      	str	r3, [r6, #0]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	0699      	lsls	r1, r3, #26
 800639e:	bf42      	ittt	mi
 80063a0:	6833      	ldrmi	r3, [r6, #0]
 80063a2:	3302      	addmi	r3, #2
 80063a4:	6033      	strmi	r3, [r6, #0]
 80063a6:	6825      	ldr	r5, [r4, #0]
 80063a8:	f015 0506 	ands.w	r5, r5, #6
 80063ac:	d106      	bne.n	80063bc <_printf_common+0x48>
 80063ae:	f104 0a19 	add.w	sl, r4, #25
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	6832      	ldr	r2, [r6, #0]
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dc26      	bgt.n	800640a <_printf_common+0x96>
 80063bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c0:	1e13      	subs	r3, r2, #0
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	0692      	lsls	r2, r2, #26
 80063ca:	d42b      	bmi.n	8006424 <_printf_common+0xb0>
 80063cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d01e      	beq.n	8006418 <_printf_common+0xa4>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	68e5      	ldr	r5, [r4, #12]
 80063de:	6832      	ldr	r2, [r6, #0]
 80063e0:	f003 0306 	and.w	r3, r3, #6
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	bf08      	it	eq
 80063e8:	1aad      	subeq	r5, r5, r2
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	bf0c      	ite	eq
 80063f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f4:	2500      	movne	r5, #0
 80063f6:	4293      	cmp	r3, r2
 80063f8:	bfc4      	itt	gt
 80063fa:	1a9b      	subgt	r3, r3, r2
 80063fc:	18ed      	addgt	r5, r5, r3
 80063fe:	2600      	movs	r6, #0
 8006400:	341a      	adds	r4, #26
 8006402:	42b5      	cmp	r5, r6
 8006404:	d11a      	bne.n	800643c <_printf_common+0xc8>
 8006406:	2000      	movs	r0, #0
 8006408:	e008      	b.n	800641c <_printf_common+0xa8>
 800640a:	2301      	movs	r3, #1
 800640c:	4652      	mov	r2, sl
 800640e:	4649      	mov	r1, r9
 8006410:	4638      	mov	r0, r7
 8006412:	47c0      	blx	r8
 8006414:	3001      	adds	r0, #1
 8006416:	d103      	bne.n	8006420 <_printf_common+0xac>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	3501      	adds	r5, #1
 8006422:	e7c6      	b.n	80063b2 <_printf_common+0x3e>
 8006424:	18e1      	adds	r1, r4, r3
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	2030      	movs	r0, #48	; 0x30
 800642a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800642e:	4422      	add	r2, r4
 8006430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006438:	3302      	adds	r3, #2
 800643a:	e7c7      	b.n	80063cc <_printf_common+0x58>
 800643c:	2301      	movs	r3, #1
 800643e:	4622      	mov	r2, r4
 8006440:	4649      	mov	r1, r9
 8006442:	4638      	mov	r0, r7
 8006444:	47c0      	blx	r8
 8006446:	3001      	adds	r0, #1
 8006448:	d0e6      	beq.n	8006418 <_printf_common+0xa4>
 800644a:	3601      	adds	r6, #1
 800644c:	e7d9      	b.n	8006402 <_printf_common+0x8e>
	...

08006450 <_printf_i>:
 8006450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006454:	460c      	mov	r4, r1
 8006456:	4691      	mov	r9, r2
 8006458:	7e27      	ldrb	r7, [r4, #24]
 800645a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800645c:	2f78      	cmp	r7, #120	; 0x78
 800645e:	4680      	mov	r8, r0
 8006460:	469a      	mov	sl, r3
 8006462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006466:	d807      	bhi.n	8006478 <_printf_i+0x28>
 8006468:	2f62      	cmp	r7, #98	; 0x62
 800646a:	d80a      	bhi.n	8006482 <_printf_i+0x32>
 800646c:	2f00      	cmp	r7, #0
 800646e:	f000 80d8 	beq.w	8006622 <_printf_i+0x1d2>
 8006472:	2f58      	cmp	r7, #88	; 0x58
 8006474:	f000 80a3 	beq.w	80065be <_printf_i+0x16e>
 8006478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800647c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006480:	e03a      	b.n	80064f8 <_printf_i+0xa8>
 8006482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006486:	2b15      	cmp	r3, #21
 8006488:	d8f6      	bhi.n	8006478 <_printf_i+0x28>
 800648a:	a001      	add	r0, pc, #4	; (adr r0, 8006490 <_printf_i+0x40>)
 800648c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064fd 	.word	0x080064fd
 8006498:	08006479 	.word	0x08006479
 800649c:	08006479 	.word	0x08006479
 80064a0:	08006479 	.word	0x08006479
 80064a4:	08006479 	.word	0x08006479
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	08006479 	.word	0x08006479
 80064b0:	08006479 	.word	0x08006479
 80064b4:	08006479 	.word	0x08006479
 80064b8:	08006479 	.word	0x08006479
 80064bc:	08006609 	.word	0x08006609
 80064c0:	0800652d 	.word	0x0800652d
 80064c4:	080065eb 	.word	0x080065eb
 80064c8:	08006479 	.word	0x08006479
 80064cc:	08006479 	.word	0x08006479
 80064d0:	0800662b 	.word	0x0800662b
 80064d4:	08006479 	.word	0x08006479
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	08006479 	.word	0x08006479
 80064e0:	08006479 	.word	0x08006479
 80064e4:	080065f3 	.word	0x080065f3
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	600a      	str	r2, [r1, #0]
 80064f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0a3      	b.n	8006644 <_printf_i+0x1f4>
 80064fc:	6825      	ldr	r5, [r4, #0]
 80064fe:	6808      	ldr	r0, [r1, #0]
 8006500:	062e      	lsls	r6, r5, #24
 8006502:	f100 0304 	add.w	r3, r0, #4
 8006506:	d50a      	bpl.n	800651e <_printf_i+0xce>
 8006508:	6805      	ldr	r5, [r0, #0]
 800650a:	600b      	str	r3, [r1, #0]
 800650c:	2d00      	cmp	r5, #0
 800650e:	da03      	bge.n	8006518 <_printf_i+0xc8>
 8006510:	232d      	movs	r3, #45	; 0x2d
 8006512:	426d      	negs	r5, r5
 8006514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006518:	485e      	ldr	r0, [pc, #376]	; (8006694 <_printf_i+0x244>)
 800651a:	230a      	movs	r3, #10
 800651c:	e019      	b.n	8006552 <_printf_i+0x102>
 800651e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006522:	6805      	ldr	r5, [r0, #0]
 8006524:	600b      	str	r3, [r1, #0]
 8006526:	bf18      	it	ne
 8006528:	b22d      	sxthne	r5, r5
 800652a:	e7ef      	b.n	800650c <_printf_i+0xbc>
 800652c:	680b      	ldr	r3, [r1, #0]
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	1d18      	adds	r0, r3, #4
 8006532:	6008      	str	r0, [r1, #0]
 8006534:	0628      	lsls	r0, r5, #24
 8006536:	d501      	bpl.n	800653c <_printf_i+0xec>
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	e002      	b.n	8006542 <_printf_i+0xf2>
 800653c:	0669      	lsls	r1, r5, #25
 800653e:	d5fb      	bpl.n	8006538 <_printf_i+0xe8>
 8006540:	881d      	ldrh	r5, [r3, #0]
 8006542:	4854      	ldr	r0, [pc, #336]	; (8006694 <_printf_i+0x244>)
 8006544:	2f6f      	cmp	r7, #111	; 0x6f
 8006546:	bf0c      	ite	eq
 8006548:	2308      	moveq	r3, #8
 800654a:	230a      	movne	r3, #10
 800654c:	2100      	movs	r1, #0
 800654e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006552:	6866      	ldr	r6, [r4, #4]
 8006554:	60a6      	str	r6, [r4, #8]
 8006556:	2e00      	cmp	r6, #0
 8006558:	bfa2      	ittt	ge
 800655a:	6821      	ldrge	r1, [r4, #0]
 800655c:	f021 0104 	bicge.w	r1, r1, #4
 8006560:	6021      	strge	r1, [r4, #0]
 8006562:	b90d      	cbnz	r5, 8006568 <_printf_i+0x118>
 8006564:	2e00      	cmp	r6, #0
 8006566:	d04d      	beq.n	8006604 <_printf_i+0x1b4>
 8006568:	4616      	mov	r6, r2
 800656a:	fbb5 f1f3 	udiv	r1, r5, r3
 800656e:	fb03 5711 	mls	r7, r3, r1, r5
 8006572:	5dc7      	ldrb	r7, [r0, r7]
 8006574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006578:	462f      	mov	r7, r5
 800657a:	42bb      	cmp	r3, r7
 800657c:	460d      	mov	r5, r1
 800657e:	d9f4      	bls.n	800656a <_printf_i+0x11a>
 8006580:	2b08      	cmp	r3, #8
 8006582:	d10b      	bne.n	800659c <_printf_i+0x14c>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	07df      	lsls	r7, r3, #31
 8006588:	d508      	bpl.n	800659c <_printf_i+0x14c>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	6861      	ldr	r1, [r4, #4]
 800658e:	4299      	cmp	r1, r3
 8006590:	bfde      	ittt	le
 8006592:	2330      	movle	r3, #48	; 0x30
 8006594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800659c:	1b92      	subs	r2, r2, r6
 800659e:	6122      	str	r2, [r4, #16]
 80065a0:	f8cd a000 	str.w	sl, [sp]
 80065a4:	464b      	mov	r3, r9
 80065a6:	aa03      	add	r2, sp, #12
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fee2 	bl	8006374 <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d14c      	bne.n	800664e <_printf_i+0x1fe>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b004      	add	sp, #16
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	4835      	ldr	r0, [pc, #212]	; (8006694 <_printf_i+0x244>)
 80065c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	680e      	ldr	r6, [r1, #0]
 80065c8:	061f      	lsls	r7, r3, #24
 80065ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80065ce:	600e      	str	r6, [r1, #0]
 80065d0:	d514      	bpl.n	80065fc <_printf_i+0x1ac>
 80065d2:	07d9      	lsls	r1, r3, #31
 80065d4:	bf44      	itt	mi
 80065d6:	f043 0320 	orrmi.w	r3, r3, #32
 80065da:	6023      	strmi	r3, [r4, #0]
 80065dc:	b91d      	cbnz	r5, 80065e6 <_printf_i+0x196>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f023 0320 	bic.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	2310      	movs	r3, #16
 80065e8:	e7b0      	b.n	800654c <_printf_i+0xfc>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f043 0320 	orr.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2378      	movs	r3, #120	; 0x78
 80065f4:	4828      	ldr	r0, [pc, #160]	; (8006698 <_printf_i+0x248>)
 80065f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065fa:	e7e3      	b.n	80065c4 <_printf_i+0x174>
 80065fc:	065e      	lsls	r6, r3, #25
 80065fe:	bf48      	it	mi
 8006600:	b2ad      	uxthmi	r5, r5
 8006602:	e7e6      	b.n	80065d2 <_printf_i+0x182>
 8006604:	4616      	mov	r6, r2
 8006606:	e7bb      	b.n	8006580 <_printf_i+0x130>
 8006608:	680b      	ldr	r3, [r1, #0]
 800660a:	6826      	ldr	r6, [r4, #0]
 800660c:	6960      	ldr	r0, [r4, #20]
 800660e:	1d1d      	adds	r5, r3, #4
 8006610:	600d      	str	r5, [r1, #0]
 8006612:	0635      	lsls	r5, r6, #24
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	d501      	bpl.n	800661c <_printf_i+0x1cc>
 8006618:	6018      	str	r0, [r3, #0]
 800661a:	e002      	b.n	8006622 <_printf_i+0x1d2>
 800661c:	0671      	lsls	r1, r6, #25
 800661e:	d5fb      	bpl.n	8006618 <_printf_i+0x1c8>
 8006620:	8018      	strh	r0, [r3, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	4616      	mov	r6, r2
 8006628:	e7ba      	b.n	80065a0 <_printf_i+0x150>
 800662a:	680b      	ldr	r3, [r1, #0]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	600a      	str	r2, [r1, #0]
 8006630:	681e      	ldr	r6, [r3, #0]
 8006632:	6862      	ldr	r2, [r4, #4]
 8006634:	2100      	movs	r1, #0
 8006636:	4630      	mov	r0, r6
 8006638:	f7f9 fdda 	bl	80001f0 <memchr>
 800663c:	b108      	cbz	r0, 8006642 <_printf_i+0x1f2>
 800663e:	1b80      	subs	r0, r0, r6
 8006640:	6060      	str	r0, [r4, #4]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	2300      	movs	r3, #0
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664c:	e7a8      	b.n	80065a0 <_printf_i+0x150>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	4632      	mov	r2, r6
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	47d0      	blx	sl
 8006658:	3001      	adds	r0, #1
 800665a:	d0ab      	beq.n	80065b4 <_printf_i+0x164>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	d413      	bmi.n	800668a <_printf_i+0x23a>
 8006662:	68e0      	ldr	r0, [r4, #12]
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	4298      	cmp	r0, r3
 8006668:	bfb8      	it	lt
 800666a:	4618      	movlt	r0, r3
 800666c:	e7a4      	b.n	80065b8 <_printf_i+0x168>
 800666e:	2301      	movs	r3, #1
 8006670:	4632      	mov	r2, r6
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d09b      	beq.n	80065b4 <_printf_i+0x164>
 800667c:	3501      	adds	r5, #1
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	9903      	ldr	r1, [sp, #12]
 8006682:	1a5b      	subs	r3, r3, r1
 8006684:	42ab      	cmp	r3, r5
 8006686:	dcf2      	bgt.n	800666e <_printf_i+0x21e>
 8006688:	e7eb      	b.n	8006662 <_printf_i+0x212>
 800668a:	2500      	movs	r5, #0
 800668c:	f104 0619 	add.w	r6, r4, #25
 8006690:	e7f5      	b.n	800667e <_printf_i+0x22e>
 8006692:	bf00      	nop
 8006694:	08006b05 	.word	0x08006b05
 8006698:	08006b16 	.word	0x08006b16

0800669c <_sbrk_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d06      	ldr	r5, [pc, #24]	; (80066b8 <_sbrk_r+0x1c>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	f7fb fc24 	bl	8001ef4 <_sbrk>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_sbrk_r+0x1a>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_sbrk_r+0x1a>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	20000da8 	.word	0x20000da8

080066bc <__sread>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	460c      	mov	r4, r1
 80066c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c4:	f000 f8a0 	bl	8006808 <_read_r>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	bfab      	itete	ge
 80066cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ce:	89a3      	ldrhlt	r3, [r4, #12]
 80066d0:	181b      	addge	r3, r3, r0
 80066d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066d6:	bfac      	ite	ge
 80066d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066da:	81a3      	strhlt	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__swrite>:
 80066de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e2:	461f      	mov	r7, r3
 80066e4:	898b      	ldrh	r3, [r1, #12]
 80066e6:	05db      	lsls	r3, r3, #23
 80066e8:	4605      	mov	r5, r0
 80066ea:	460c      	mov	r4, r1
 80066ec:	4616      	mov	r6, r2
 80066ee:	d505      	bpl.n	80066fc <__swrite+0x1e>
 80066f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f4:	2302      	movs	r3, #2
 80066f6:	2200      	movs	r2, #0
 80066f8:	f000 f868 	bl	80067cc <_lseek_r>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	4632      	mov	r2, r6
 800670a:	463b      	mov	r3, r7
 800670c:	4628      	mov	r0, r5
 800670e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006712:	f000 b817 	b.w	8006744 <_write_r>

08006716 <__sseek>:
 8006716:	b510      	push	{r4, lr}
 8006718:	460c      	mov	r4, r1
 800671a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671e:	f000 f855 	bl	80067cc <_lseek_r>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	bf15      	itete	ne
 8006728:	6560      	strne	r0, [r4, #84]	; 0x54
 800672a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800672e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006732:	81a3      	strheq	r3, [r4, #12]
 8006734:	bf18      	it	ne
 8006736:	81a3      	strhne	r3, [r4, #12]
 8006738:	bd10      	pop	{r4, pc}

0800673a <__sclose>:
 800673a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673e:	f000 b813 	b.w	8006768 <_close_r>
	...

08006744 <_write_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d07      	ldr	r5, [pc, #28]	; (8006764 <_write_r+0x20>)
 8006748:	4604      	mov	r4, r0
 800674a:	4608      	mov	r0, r1
 800674c:	4611      	mov	r1, r2
 800674e:	2200      	movs	r2, #0
 8006750:	602a      	str	r2, [r5, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	f7fb fb7d 	bl	8001e52 <_write>
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	d102      	bne.n	8006762 <_write_r+0x1e>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	b103      	cbz	r3, 8006762 <_write_r+0x1e>
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	20000da8 	.word	0x20000da8

08006768 <_close_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	; (8006784 <_close_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fb fb89 	bl	8001e8a <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_close_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_close_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000da8 	.word	0x20000da8

08006788 <_fstat_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	; (80067a8 <_fstat_r+0x20>)
 800678c:	2300      	movs	r3, #0
 800678e:	4604      	mov	r4, r0
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	f7fb fb84 	bl	8001ea2 <_fstat>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d102      	bne.n	80067a4 <_fstat_r+0x1c>
 800679e:	682b      	ldr	r3, [r5, #0]
 80067a0:	b103      	cbz	r3, 80067a4 <_fstat_r+0x1c>
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	20000da8 	.word	0x20000da8

080067ac <_isatty_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d06      	ldr	r5, [pc, #24]	; (80067c8 <_isatty_r+0x1c>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fb fb83 	bl	8001ec2 <_isatty>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_isatty_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_isatty_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000da8 	.word	0x20000da8

080067cc <_lseek_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d07      	ldr	r5, [pc, #28]	; (80067ec <_lseek_r+0x20>)
 80067d0:	4604      	mov	r4, r0
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fb fb7c 	bl	8001ed8 <_lseek>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_lseek_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_lseek_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20000da8 	.word	0x20000da8

080067f0 <__malloc_lock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_lock+0x8>)
 80067f2:	f7ff bb55 	b.w	8005ea0 <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000da0 	.word	0x20000da0

080067fc <__malloc_unlock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_unlock+0x8>)
 80067fe:	f7ff bb50 	b.w	8005ea2 <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20000da0 	.word	0x20000da0

08006808 <_read_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d07      	ldr	r5, [pc, #28]	; (8006828 <_read_r+0x20>)
 800680c:	4604      	mov	r4, r0
 800680e:	4608      	mov	r0, r1
 8006810:	4611      	mov	r1, r2
 8006812:	2200      	movs	r2, #0
 8006814:	602a      	str	r2, [r5, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	f7fb fafe 	bl	8001e18 <_read>
 800681c:	1c43      	adds	r3, r0, #1
 800681e:	d102      	bne.n	8006826 <_read_r+0x1e>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	b103      	cbz	r3, 8006826 <_read_r+0x1e>
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	bd38      	pop	{r3, r4, r5, pc}
 8006828:	20000da8 	.word	0x20000da8

0800682c <_init>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr

08006838 <_fini>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr
