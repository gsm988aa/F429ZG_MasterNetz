
f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c1c  08002c1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000000c  08002c38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08002c38  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0fa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb7  00000000  00000000  0002a136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022676  00000000  00000000  0002cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b316  00000000  00000000  0004f63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cef6f  00000000  00000000  0005a954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001298c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  00129918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002be4 	.word	0x08002be4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002be4 	.word	0x08002be4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b27      	ldr	r3, [pc, #156]	; (800058c <MX_DMA_Init+0xa8>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a26      	ldr	r2, [pc, #152]	; (800058c <MX_DMA_Init+0xa8>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <MX_DMA_Init+0xa8>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <MX_DMA_Init+0xa8>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a1f      	ldr	r2, [pc, #124]	; (800058c <MX_DMA_Init+0xa8>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <MX_DMA_Init+0xa8>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	200b      	movs	r0, #11
 8000528:	f000 ff7d 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800052c:	200b      	movs	r0, #11
 800052e:	f000 ff96 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	200f      	movs	r0, #15
 8000538:	f000 ff75 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800053c:	200f      	movs	r0, #15
 800053e:	f000 ff8e 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	2038      	movs	r0, #56	; 0x38
 8000548:	f000 ff6d 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800054c:	2038      	movs	r0, #56	; 0x38
 800054e:	f000 ff86 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	203b      	movs	r0, #59	; 0x3b
 8000558:	f000 ff65 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800055c:	203b      	movs	r0, #59	; 0x3b
 800055e:	f000 ff7e 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2044      	movs	r0, #68	; 0x44
 8000568:	f000 ff5d 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800056c:	2044      	movs	r0, #68	; 0x44
 800056e:	f000 ff76 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2045      	movs	r0, #69	; 0x45
 8000578:	f000 ff55 	bl	8001426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800057c:	2045      	movs	r0, #69	; 0x45
 800057e:	f000 ff6e 	bl	800145e <HAL_NVIC_EnableIRQ>

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <MX_GPIO_Init+0xd8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a32      	ldr	r2, [pc, #200]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005a0:	f043 0310 	orr.w	r3, r3, #16
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0310 	and.w	r3, r3, #16
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a2b      	ldr	r2, [pc, #172]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005bc:	f043 0320 	orr.w	r3, r3, #32
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0320 	and.w	r3, r3, #32
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a24      	ldr	r2, [pc, #144]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_GPIO_Init+0xd8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_GPIO_Init+0xd8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <MX_GPIO_Init+0xd8>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_GPIO_Init+0xd8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_GPIO_Init+0xd8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <MX_GPIO_Init+0xd8>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <MX_GPIO_Init+0xd8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_GPIO_Init+0xd8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <MX_GPIO_Init+0xd8>)
 8000648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_GPIO_Init+0xd8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

}
 800065a:	bf00      	nop
 800065c:	3724      	adds	r7, #36	; 0x24
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fd8c 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f814 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff ff8a 	bl	8000590 <MX_GPIO_Init>
  MX_DMA_Init();
 800067c:	f7ff ff32 	bl	80004e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000680:	f000 f874 	bl	800076c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000684:	f000 f8a4 	bl	80007d0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000688:	f000 f8d8 	bl	800083c <MX_SPI3_Init>
  MX_SPI4_Init();
 800068c:	f000 f908 	bl	80008a0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000690:	f000 f938 	bl	8000904 <MX_SPI5_Init>
  MX_SPI6_Init();
 8000694:	f000 f968 	bl	8000968 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8000698:	f000 fcdc 	bl	8001054 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x30>
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fa90 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <SystemClock_Config+0xb8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a22      	ldr	r2, [pc, #136]	; (8000758 <SystemClock_Config+0xb8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <SystemClock_Config+0xb8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <SystemClock_Config+0xbc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <SystemClock_Config+0xbc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <SystemClock_Config+0xbc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fb53 	bl	8001dc0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000720:	f000 f81e 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fdb6 	bl	80022b0 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800074a:	f000 f809 	bl	8000760 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi6_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_SPI1_Init+0x5c>)
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <MX_SPI1_Init+0x60>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_SPI1_Init+0x5c>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_SPI1_Init+0x5c>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_SPI1_Init+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_SPI1_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_SPI1_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_SPI1_Init+0x5c>)
 8000796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_SPI1_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_SPI1_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_SPI1_Init+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_SPI1_Init+0x5c>)
 80007b0:	220a      	movs	r2, #10
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_SPI1_Init+0x5c>)
 80007b6:	f001 ff4b 	bl	8002650 <HAL_SPI_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80007c0:	f7ff ffce 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200002a0 	.word	0x200002a0
 80007cc:	40013000 	.word	0x40013000

080007d0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_SPI2_Init+0x64>)
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_SPI2_Init+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI2_Init+0x64>)
 80007dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI2_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_SPI2_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI2_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI2_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI2_Init+0x64>)
 80007fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000800:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI2_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_SPI2_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI2_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_SPI2_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI2_Init+0x64>)
 800081c:	220a      	movs	r2, #10
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_SPI2_Init+0x64>)
 8000822:	f001 ff15 	bl	8002650 <HAL_SPI_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800082c:	f7ff ff98 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000028 	.word	0x20000028
 8000838:	40003800 	.word	0x40003800

0800083c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <MX_SPI3_Init+0x60>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_SPI3_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_SPI3_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_SPI3_Init+0x5c>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_SPI3_Init+0x5c>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000880:	220a      	movs	r2, #10
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_SPI3_Init+0x5c>)
 8000886:	f001 fee3 	bl	8002650 <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8000890:	f7ff ff66 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001f0 	.word	0x200001f0
 800089c:	40003c00 	.word	0x40003c00

080008a0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <MX_SPI4_Init+0x60>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ce:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_SPI4_Init+0x5c>)
 80008ea:	f001 feb1 	bl	8002650 <HAL_SPI_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_SPI4_Init+0x58>
  {
    Error_Handler();
 80008f4:	f7ff ff34 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000248 	.word	0x20000248
 8000900:	40013400 	.word	0x40013400

08000904 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_SPI5_Init+0x5c>)
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <MX_SPI5_Init+0x60>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_SPI5_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_SPI5_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_SPI5_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_SPI5_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_SPI5_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_SPI5_Init+0x5c>)
 800092e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000932:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_SPI5_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_SPI5_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_SPI5_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_SPI5_Init+0x5c>)
 8000948:	220a      	movs	r2, #10
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_SPI5_Init+0x5c>)
 800094e:	f001 fe7f 	bl	8002650 <HAL_SPI_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_SPI5_Init+0x58>
  {
    Error_Handler();
 8000958:	f7ff ff02 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000080 	.word	0x20000080
 8000964:	40015000 	.word	0x40015000

08000968 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_SPI6_Init+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <MX_SPI6_Init+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_SPI6_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_SPI6_Init+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_SPI6_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_SPI6_Init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_SPI6_Init+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_SPI6_Init+0x5c>)
 8000992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000996:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_SPI6_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_SPI6_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_SPI6_Init+0x5c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI6_Init+0x5c>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_SPI6_Init+0x5c>)
 80009b2:	f001 fe4d 	bl	8002650 <HAL_SPI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_SPI6_Init+0x58>
  {
    Error_Handler();
 80009bc:	f7ff fed0 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000198 	.word	0x20000198
 80009c8:	40015400 	.word	0x40015400

080009cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a9d      	ldr	r2, [pc, #628]	; (8000c60 <HAL_SPI_MspInit+0x294>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d15a      	bne.n	8000aa4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80009f2:	4b9c      	ldr	r3, [pc, #624]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a9b      	ldr	r2, [pc, #620]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 80009f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b99      	ldr	r3, [pc, #612]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a0e:	4b95      	ldr	r3, [pc, #596]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a94      	ldr	r2, [pc, #592]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b92      	ldr	r3, [pc, #584]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
 8000a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a26:	23e0      	movs	r3, #224	; 0xe0
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a36:	2305      	movs	r3, #5
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4889      	ldr	r0, [pc, #548]	; (8000c68 <HAL_SPI_MspInit+0x29c>)
 8000a42:	f001 f811 	bl	8001a68 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a46:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a48:	4a89      	ldr	r2, [pc, #548]	; (8000c70 <HAL_SPI_MspInit+0x2a4>)
 8000a4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a4c:	4b87      	ldr	r3, [pc, #540]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a4e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a52:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a54:	4b85      	ldr	r3, [pc, #532]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5a:	4b84      	ldr	r3, [pc, #528]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a60:	4b82      	ldr	r3, [pc, #520]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a66:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a68:	4b80      	ldr	r3, [pc, #512]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6e:	4b7f      	ldr	r3, [pc, #508]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a74:	4b7d      	ldr	r3, [pc, #500]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b7c      	ldr	r3, [pc, #496]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a80:	4b7a      	ldr	r3, [pc, #488]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a86:	4879      	ldr	r0, [pc, #484]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a88:	f000 fd04 	bl	8001494 <HAL_DMA_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000a92:	f7ff fe65 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a74      	ldr	r2, [pc, #464]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a9c:	4a73      	ldr	r2, [pc, #460]	; (8000c6c <HAL_SPI_MspInit+0x2a0>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8000aa2:	e218      	b.n	8000ed6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a72      	ldr	r2, [pc, #456]	; (8000c74 <HAL_SPI_MspInit+0x2a8>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d178      	bne.n	8000ba0 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ab2:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a6b      	ldr	r2, [pc, #428]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b69      	ldr	r3, [pc, #420]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a64      	ldr	r2, [pc, #400]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b62      	ldr	r3, [pc, #392]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aea:	4b5e      	ldr	r3, [pc, #376]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a5d      	ldr	r2, [pc, #372]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4856      	ldr	r0, [pc, #344]	; (8000c78 <HAL_SPI_MspInit+0x2ac>)
 8000b1e:	f000 ffa3 	bl	8001a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b34:	2305      	movs	r3, #5
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	484f      	ldr	r0, [pc, #316]	; (8000c7c <HAL_SPI_MspInit+0x2b0>)
 8000b40:	f000 ff92 	bl	8001a68 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b44:	4b4e      	ldr	r3, [pc, #312]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b46:	4a4f      	ldr	r2, [pc, #316]	; (8000c84 <HAL_SPI_MspInit+0x2b8>)
 8000b48:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b4a:	4b4d      	ldr	r3, [pc, #308]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b50:	4b4b      	ldr	r3, [pc, #300]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b52:	2240      	movs	r2, #64	; 0x40
 8000b54:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b56:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5c:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b62:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b64:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b70:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7c:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b82:	483f      	ldr	r0, [pc, #252]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b84:	f000 fc86 	bl	8001494 <HAL_DMA_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 8000b8e:	f7ff fde7 	bl	8000760 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a3a      	ldr	r2, [pc, #232]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b96:	649a      	str	r2, [r3, #72]	; 0x48
 8000b98:	4a39      	ldr	r2, [pc, #228]	; (8000c80 <HAL_SPI_MspInit+0x2b4>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b9e:	e19a      	b.n	8000ed6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <HAL_SPI_MspInit+0x2bc>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d174      	bne.n	8000c94 <HAL_SPI_MspInit+0x2c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a2c      	ldr	r2, [pc, #176]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <HAL_SPI_MspInit+0x298>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000be2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481e      	ldr	r0, [pc, #120]	; (8000c78 <HAL_SPI_MspInit+0x2ac>)
 8000c00:	f000 ff32 	bl	8001a68 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c06:	4a22      	ldr	r2, [pc, #136]	; (8000c90 <HAL_SPI_MspInit+0x2c4>)
 8000c08:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c22:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c44:	f000 fc26 	bl	8001494 <HAL_DMA_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_SPI_MspInit+0x286>
      Error_Handler();
 8000c4e:	f7ff fd87 	bl	8000760 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c56:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_SPI_MspInit+0x2c0>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c5e:	e13a      	b.n	8000ed6 <HAL_SPI_MspInit+0x50a>
 8000c60:	40013000 	.word	0x40013000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	200002f8 	.word	0x200002f8
 8000c70:	40026410 	.word	0x40026410
 8000c74:	40003800 	.word	0x40003800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	200003b8 	.word	0x200003b8
 8000c84:	40026070 	.word	0x40026070
 8000c88:	40003c00 	.word	0x40003c00
 8000c8c:	20000418 	.word	0x20000418
 8000c90:	40026010 	.word	0x40026010
  else if(spiHandle->Instance==SPI4)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a91      	ldr	r2, [pc, #580]	; (8000ee0 <HAL_SPI_MspInit+0x514>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d15a      	bne.n	8000d54 <HAL_SPI_MspInit+0x388>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	4b90      	ldr	r3, [pc, #576]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a8f      	ldr	r2, [pc, #572]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b8d      	ldr	r3, [pc, #564]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	4b89      	ldr	r3, [pc, #548]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a88      	ldr	r2, [pc, #544]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b86      	ldr	r3, [pc, #536]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000cd6:	2364      	movs	r3, #100	; 0x64
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	487d      	ldr	r0, [pc, #500]	; (8000ee8 <HAL_SPI_MspInit+0x51c>)
 8000cf2:	f000 feb9 	bl	8001a68 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000cf8:	4a7d      	ldr	r2, [pc, #500]	; (8000ef0 <HAL_SPI_MspInit+0x524>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8000cfc:	4b7b      	ldr	r3, [pc, #492]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000cfe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d04:	4b79      	ldr	r3, [pc, #484]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b78      	ldr	r3, [pc, #480]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b76      	ldr	r3, [pc, #472]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d18:	4b74      	ldr	r3, [pc, #464]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1e:	4b73      	ldr	r3, [pc, #460]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8000d24:	4b71      	ldr	r3, [pc, #452]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2a:	4b70      	ldr	r3, [pc, #448]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d30:	4b6e      	ldr	r3, [pc, #440]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8000d36:	486d      	ldr	r0, [pc, #436]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d38:	f000 fbac 	bl	8001494 <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_SPI_MspInit+0x37a>
      Error_Handler();
 8000d42:	f7ff fd0d 	bl	8000760 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a68      	ldr	r2, [pc, #416]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d4c:	4a67      	ldr	r2, [pc, #412]	; (8000eec <HAL_SPI_MspInit+0x520>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d52:	e0c0      	b.n	8000ed6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI5)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a66      	ldr	r2, [pc, #408]	; (8000ef4 <HAL_SPI_MspInit+0x528>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d15b      	bne.n	8000e16 <HAL_SPI_MspInit+0x44a>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	4b60      	ldr	r3, [pc, #384]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a5f      	ldr	r2, [pc, #380]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b59      	ldr	r3, [pc, #356]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000d84:	f043 0320 	orr.w	r3, r3, #32
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0320 	and.w	r3, r3, #32
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d96:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000da8:	2305      	movs	r3, #5
 8000daa:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4851      	ldr	r0, [pc, #324]	; (8000ef8 <HAL_SPI_MspInit+0x52c>)
 8000db4:	f000 fe58 	bl	8001a68 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream5;
 8000db8:	4b50      	ldr	r3, [pc, #320]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000dba:	4a51      	ldr	r2, [pc, #324]	; (8000f00 <HAL_SPI_MspInit+0x534>)
 8000dbc:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
 8000dbe:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000dc0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b4d      	ldr	r3, [pc, #308]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b4a      	ldr	r3, [pc, #296]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dda:	4b48      	ldr	r3, [pc, #288]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de0:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8000de6:	4b45      	ldr	r3, [pc, #276]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b43      	ldr	r3, [pc, #268]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df2:	4b42      	ldr	r3, [pc, #264]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8000df8:	4840      	ldr	r0, [pc, #256]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000dfa:	f000 fb4b 	bl	8001494 <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_SPI_MspInit+0x43c>
      Error_Handler();
 8000e04:	f7ff fcac 	bl	8000760 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000e0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e0e:	4a3b      	ldr	r2, [pc, #236]	; (8000efc <HAL_SPI_MspInit+0x530>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e14:	e05f      	b.n	8000ed6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI6)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a3a      	ldr	r2, [pc, #232]	; (8000f04 <HAL_SPI_MspInit+0x538>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d15a      	bne.n	8000ed6 <HAL_SPI_MspInit+0x50a>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	4a2e      	ldr	r2, [pc, #184]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <HAL_SPI_MspInit+0x518>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000e58:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e72:	4619      	mov	r1, r3
 8000e74:	4824      	ldr	r0, [pc, #144]	; (8000f08 <HAL_SPI_MspInit+0x53c>)
 8000e76:	f000 fdf7 	bl	8001a68 <HAL_GPIO_Init>
    hdma_spi6_rx.Instance = DMA2_Stream6;
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000e7c:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <HAL_SPI_MspInit+0x544>)
 8000e7e:	601a      	str	r2, [r3, #0]
    hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9a:	611a      	str	r2, [r3, #16]
    hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
    hdma_spi6_rx.Init.Mode = DMA_NORMAL;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
    hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000ebc:	f000 faea 	bl	8001494 <HAL_DMA_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_SPI_MspInit+0x4fe>
      Error_Handler();
 8000ec6:	f7ff fc4b 	bl	8000760 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000ece:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_SPI_MspInit+0x540>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	; 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40013400 	.word	0x40013400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	20000138 	.word	0x20000138
 8000ef0:	40026458 	.word	0x40026458
 8000ef4:	40015000 	.word	0x40015000
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	200000d8 	.word	0x200000d8
 8000f00:	40026488 	.word	0x40026488
 8000f04:	40015400 	.word	0x40015400
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	20000358 	.word	0x20000358
 8000f10:	400264a0 	.word	0x400264a0

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 f93e 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA1_Stream0_IRQHandler+0x10>)
 8000fbe:	f000 fb17 	bl	80015f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000418 	.word	0x20000418

08000fcc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA1_Stream4_IRQHandler+0x10>)
 8000fd2:	f000 fb0d 	bl	80015f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200003b8 	.word	0x200003b8

08000fe0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <DMA2_Stream0_IRQHandler+0x10>)
 8000fe6:	f000 fb03 	bl	80015f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002f8 	.word	0x200002f8

08000ff4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DMA2_Stream3_IRQHandler+0x10>)
 8000ffa:	f000 faf9 	bl	80015f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000138 	.word	0x20000138

08001008 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA2_Stream5_IRQHandler+0x10>)
 800100e:	f000 faef 	bl	80015f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000d8 	.word	0x200000d8

0800101c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DMA2_Stream6_IRQHandler+0x10>)
 8001022:	f000 fae5 	bl	80015f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000358 	.word	0x20000358

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART1_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART1_UART_Init+0x4c>)
 800108c:	f001 fb69 	bl	8002762 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f7ff fb63 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000478 	.word	0x20000478
 80010a4:	40011000 	.word	0x40011000

080010a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_UART_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12c      	bne.n	8001124 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001102:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001114:	2307      	movs	r3, #7
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_UART_MspInit+0x8c>)
 8001120:	f000 fca2 	bl	8001a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40011000 	.word	0x40011000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001170 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800113e:	490e      	ldr	r1, [pc, #56]	; (8001178 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001154:	4c0b      	ldr	r4, [pc, #44]	; (8001184 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001162:	f7ff ff65 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001166:	f001 fd11 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116a:	f7ff fa7f 	bl	800066c <main>
  bx  lr    
 800116e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001170:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800117c:	08002c2c 	.word	0x08002c2c
  ldr r2, =_sbss
 8001180:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001184:	200004c0 	.word	0x200004c0

08001188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_Init+0x40>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_Init+0x40>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_Init+0x40>)
 80011ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f92b 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fea8 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f943 	bl	800147a <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800120c:	f000 f90b 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	20000008 	.word	0x20000008
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	200004bc 	.word	0x200004bc

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200004bc 	.word	0x200004bc

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff29 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff3e 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff8e 	bl	8001364 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff31 	bl	80012d4 <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff feda 	bl	8001258 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e099      	b.n	80015e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d0:	e00f      	b.n	80014f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d2:	f7ff fec1 	bl	8001258 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d908      	bls.n	80014f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e078      	b.n	80015e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1e8      	bne.n	80014d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <HAL_DMA_Init+0x158>)
 800150c:	4013      	ands	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	2b04      	cmp	r3, #4
 800154a:	d107      	bne.n	800155c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4313      	orrs	r3, r2
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f023 0307 	bic.w	r3, r3, #7
 8001572:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	4313      	orrs	r3, r2
 800157c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	2b04      	cmp	r3, #4
 8001584:	d117      	bne.n	80015b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4313      	orrs	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00e      	beq.n	80015b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f9e9 	bl	8001970 <DMA_CheckFifoParam>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2240      	movs	r2, #64	; 0x40
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015b2:	2301      	movs	r3, #1
 80015b4:	e016      	b.n	80015e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f9a0 	bl	8001904 <DMA_CalcBaseAndBitshift>
 80015c4:	4603      	mov	r3, r0
 80015c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	223f      	movs	r2, #63	; 0x3f
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f010803f 	.word	0xf010803f

080015f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015fc:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_DMA_IRQHandler+0x258>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a92      	ldr	r2, [pc, #584]	; (800184c <HAL_DMA_IRQHandler+0x25c>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0a9b      	lsrs	r3, r3, #10
 8001608:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	2208      	movs	r2, #8
 800161c:	409a      	lsls	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01a      	beq.n	800165c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0204 	bic.w	r2, r2, #4
 8001642:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	2208      	movs	r2, #8
 800164a:	409a      	lsls	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	2201      	movs	r2, #1
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d012      	beq.n	8001692 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2201      	movs	r2, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	f043 0202 	orr.w	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	2204      	movs	r2, #4
 8001698:	409a      	lsls	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d012      	beq.n	80016c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	2204      	movs	r2, #4
 80016b6:	409a      	lsls	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c0:	f043 0204 	orr.w	r2, r3, #4
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	2210      	movs	r2, #16
 80016ce:	409a      	lsls	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d043      	beq.n	8001760 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03c      	beq.n	8001760 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ea:	2210      	movs	r2, #16
 80016ec:	409a      	lsls	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d018      	beq.n	8001732 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d108      	bne.n	8001720 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d024      	beq.n	8001760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
 800171e:	e01f      	b.n	8001760 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001724:	2b00      	cmp	r3, #0
 8001726:	d01b      	beq.n	8001760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
 8001730:	e016      	b.n	8001760 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0208 	bic.w	r2, r2, #8
 800174e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	2220      	movs	r2, #32
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 808e 	beq.w	800188e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8086 	beq.w	800188e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001786:	2220      	movs	r2, #32
 8001788:	409a      	lsls	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b05      	cmp	r3, #5
 8001798:	d136      	bne.n	8001808 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0216 	bic.w	r2, r2, #22
 80017a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <HAL_DMA_IRQHandler+0x1da>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0208 	bic.w	r2, r2, #8
 80017d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	223f      	movs	r2, #63	; 0x3f
 80017e0:	409a      	lsls	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d07d      	beq.n	80018fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
        }
        return;
 8001806:	e078      	b.n	80018fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01c      	beq.n	8001850 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	2b00      	cmp	r3, #0
 800182a:	d030      	beq.n	800188e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
 8001834:	e02b      	b.n	800188e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	2b00      	cmp	r3, #0
 800183c:	d027      	beq.n	800188e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
 8001846:	e022      	b.n	800188e <HAL_DMA_IRQHandler+0x29e>
 8001848:	20000000 	.word	0x20000000
 800184c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10f      	bne.n	800187e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0210 	bic.w	r2, r2, #16
 800186c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	2b00      	cmp	r3, #0
 8001894:	d032      	beq.n	80018fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d022      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2205      	movs	r2, #5
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3301      	adds	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d307      	bcc.n	80018d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f2      	bne.n	80018ba <HAL_DMA_IRQHandler+0x2ca>
 80018d4:	e000      	b.n	80018d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
 80018f8:	e000      	b.n	80018fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80018fa:	bf00      	nop
    }
  }
}
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop

08001904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3b10      	subs	r3, #16
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <DMA_CalcBaseAndBitshift+0x64>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <DMA_CalcBaseAndBitshift+0x68>)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d909      	bls.n	8001946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	; 0x58
 8001944:	e007      	b.n	8001956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	aaaaaaab 	.word	0xaaaaaaab
 800196c:	08002c14 	.word	0x08002c14

08001970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0x5a>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d856      	bhi.n	8001a3e <DMA_CheckFifoParam+0xce>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <DMA_CheckFifoParam+0x28>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019bb 	.word	0x080019bb
 80019a0:	080019a9 	.word	0x080019a9
 80019a4:	08001a3f 	.word	0x08001a3f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d046      	beq.n	8001a42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b8:	e043      	b.n	8001a42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c2:	d140      	bne.n	8001a46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c8:	e03d      	b.n	8001a46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d2:	d121      	bne.n	8001a18 <DMA_CheckFifoParam+0xa8>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d837      	bhi.n	8001a4a <DMA_CheckFifoParam+0xda>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <DMA_CheckFifoParam+0x70>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	080019f7 	.word	0x080019f7
 80019e8:	080019f1 	.word	0x080019f1
 80019ec:	08001a09 	.word	0x08001a09
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
      break;
 80019f4:	e030      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d025      	beq.n	8001a4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a06:	e022      	b.n	8001a4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a10:	d11f      	bne.n	8001a52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a16:	e01c      	b.n	8001a52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d903      	bls.n	8001a26 <DMA_CheckFifoParam+0xb6>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d003      	beq.n	8001a2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a24:	e018      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2a:	e015      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e00b      	b.n	8001a56 <DMA_CheckFifoParam+0xe6>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e00a      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e008      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e006      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e004      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e002      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
    }
  } 
  
  return status; 
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e177      	b.n	8001d74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8166 	bne.w	8001d6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80c0 	beq.w	8001d6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_GPIO_Init+0x324>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0a:	4a61      	ldr	r2, [pc, #388]	; (8001d90 <HAL_GPIO_Init+0x328>)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_GPIO_Init+0x32c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d037      	beq.n	8001ca6 <HAL_GPIO_Init+0x23e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a57      	ldr	r2, [pc, #348]	; (8001d98 <HAL_GPIO_Init+0x330>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d031      	beq.n	8001ca2 <HAL_GPIO_Init+0x23a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x334>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x236>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_GPIO_Init+0x338>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x232>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_GPIO_Init+0x33c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x22e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a53      	ldr	r2, [pc, #332]	; (8001da8 <HAL_GPIO_Init+0x340>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x22a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_GPIO_Init+0x344>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x226>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_GPIO_Init+0x348>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x222>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_GPIO_Init+0x34c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x21e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_GPIO_Init+0x350>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x21a>
 8001c7e:	2309      	movs	r3, #9
 8001c80:	e012      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c82:	230a      	movs	r3, #10
 8001c84:	e010      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c86:	2308      	movs	r3, #8
 8001c88:	e00e      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x240>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x328>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cea:	4a34      	ldr	r2, [pc, #208]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x354>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f ae84 	bls.w	8001a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40021c00 	.word	0x40021c00
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40022400 	.word	0x40022400
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e264      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d075      	beq.n	8001eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dde:	4ba3      	ldr	r3, [pc, #652]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d00c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dea:	4ba0      	ldr	r3, [pc, #640]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d112      	bne.n	8001e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4b9d      	ldr	r3, [pc, #628]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	4b99      	ldr	r3, [pc, #612]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d05b      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x108>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d157      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e23f      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d106      	bne.n	8001e34 <HAL_RCC_OscConfig+0x74>
 8001e26:	4b91      	ldr	r3, [pc, #580]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a90      	ldr	r2, [pc, #576]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xb0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x98>
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a8a      	ldr	r2, [pc, #552]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a87      	ldr	r2, [pc, #540]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xb0>
 8001e58:	4b84      	ldr	r3, [pc, #528]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a83      	ldr	r2, [pc, #524]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b81      	ldr	r3, [pc, #516]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a80      	ldr	r2, [pc, #512]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff f9ee 	bl	8001258 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff f9ea 	bl	8001258 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e204      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xc0>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f9da 	bl	8001258 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff f9d6 	bl	8001258 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1f0      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xe8>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed6:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee2:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x152>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e1c4      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4952      	ldr	r1, [pc, #328]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	e03a      	b.n	8001f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_RCC_OscConfig+0x2b0>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7ff f98f 	bl	8001258 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7ff f98b 	bl	8001258 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1a5      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4940      	ldr	r1, [pc, #256]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_RCC_OscConfig+0x2b0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f96e 	bl	8001258 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff f96a 	bl	8001258 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e184      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d030      	beq.n	800200c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCC_OscConfig+0x2b4>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f94e 	bl	8001258 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f94a 	bl	8001258 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e164      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x200>
 8001fde:	e015      	b.n	800200c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCC_OscConfig+0x2b4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff f937 	bl	8001258 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fee:	f7ff f933 	bl	8001258 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e14d      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8002002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a0 	beq.w	800215a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x2ac>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_OscConfig+0x2b8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d121      	bne.n	800209a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_RCC_OscConfig+0x2b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_RCC_OscConfig+0x2b8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7ff f8f9 	bl	8001258 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e011      	b.n	800208e <HAL_RCC_OscConfig+0x2ce>
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	42470000 	.word	0x42470000
 8002074:	42470e80 	.word	0x42470e80
 8002078:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7ff f8ec 	bl	8001258 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e106      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b85      	ldr	r3, [pc, #532]	; (80022a4 <HAL_RCC_OscConfig+0x4e4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
 80020a2:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	4a80      	ldr	r2, [pc, #512]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x32a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x312>
 80020b8:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a7a      	ldr	r2, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
 80020c4:	4b78      	ldr	r3, [pc, #480]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a77      	ldr	r2, [pc, #476]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x32a>
 80020d2:	4b75      	ldr	r3, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a74      	ldr	r2, [pc, #464]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a71      	ldr	r2, [pc, #452]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff f8b1 	bl	8001258 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff f8ad 	bl	8001258 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0c5      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x33a>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7ff f89b 	bl	8001258 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff f897 	bl	8001258 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0af      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 809b 	beq.w	800229a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d05c      	beq.n	800222a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d141      	bne.n	80021fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b4c      	ldr	r3, [pc, #304]	; (80022ac <HAL_RCC_OscConfig+0x4ec>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff f86b 	bl	8001258 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff f867 	bl	8001258 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e081      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002198:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	019b      	lsls	r3, r3, #6
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	3b01      	subs	r3, #1
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	4937      	ldr	r1, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_RCC_OscConfig+0x4ec>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f840 	bl	8001258 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f83c 	bl	8001258 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e056      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x41c>
 80021fa:	e04e      	b.n	800229a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_OscConfig+0x4ec>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff f829 	bl	8001258 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220a:	f7ff f825 	bl	8001258 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e03f      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x44a>
 8002228:	e037      	b.n	800229a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e032      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_RCC_OscConfig+0x4e8>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d028      	beq.n	8002296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d121      	bne.n	8002296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d11a      	bne.n	8002296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800226c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d107      	bne.n	8002296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40007000 	.word	0x40007000
 80022a8:	40023800 	.word	0x40023800
 80022ac:	42470060 	.word	0x42470060

080022b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0cc      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d90c      	bls.n	80022ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b8      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	494d      	ldr	r1, [pc, #308]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d044      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d119      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d003      	beq.n	800236e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e06f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e067      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4934      	ldr	r1, [pc, #208]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7fe ff5a 	bl	8001258 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7fe ff56 	bl	8001258 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e04f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d20c      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e032      	b.n	800245e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4916      	ldr	r1, [pc, #88]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002436:	f000 f821 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe feba 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00
 800246c:	40023800 	.word	0x40023800
 8002470:	08002bfc 	.word	0x08002bfc
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002482:	2100      	movs	r1, #0
 8002484:	6079      	str	r1, [r7, #4]
 8002486:	2100      	movs	r1, #0
 8002488:	60f9      	str	r1, [r7, #12]
 800248a:	2100      	movs	r1, #0
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800248e:	2100      	movs	r1, #0
 8002490:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002492:	4952      	ldr	r1, [pc, #328]	; (80025dc <HAL_RCC_GetSysClockFreq+0x160>)
 8002494:	6889      	ldr	r1, [r1, #8]
 8002496:	f001 010c 	and.w	r1, r1, #12
 800249a:	2908      	cmp	r1, #8
 800249c:	d00d      	beq.n	80024ba <HAL_RCC_GetSysClockFreq+0x3e>
 800249e:	2908      	cmp	r1, #8
 80024a0:	f200 8094 	bhi.w	80025cc <HAL_RCC_GetSysClockFreq+0x150>
 80024a4:	2900      	cmp	r1, #0
 80024a6:	d002      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x32>
 80024a8:	2904      	cmp	r1, #4
 80024aa:	d003      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x38>
 80024ac:	e08e      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ae:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80024b0:	60bb      	str	r3, [r7, #8]
       break;
 80024b2:	e08e      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80024b6:	60bb      	str	r3, [r7, #8]
      break;
 80024b8:	e08b      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ba:	4948      	ldr	r1, [pc, #288]	; (80025dc <HAL_RCC_GetSysClockFreq+0x160>)
 80024bc:	6849      	ldr	r1, [r1, #4]
 80024be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024c2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c4:	4945      	ldr	r1, [pc, #276]	; (80025dc <HAL_RCC_GetSysClockFreq+0x160>)
 80024c6:	6849      	ldr	r1, [r1, #4]
 80024c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80024cc:	2900      	cmp	r1, #0
 80024ce:	d024      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d0:	4942      	ldr	r1, [pc, #264]	; (80025dc <HAL_RCC_GetSysClockFreq+0x160>)
 80024d2:	6849      	ldr	r1, [r1, #4]
 80024d4:	0989      	lsrs	r1, r1, #6
 80024d6:	4608      	mov	r0, r1
 80024d8:	f04f 0100 	mov.w	r1, #0
 80024dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80024e0:	f04f 0500 	mov.w	r5, #0
 80024e4:	ea00 0204 	and.w	r2, r0, r4
 80024e8:	ea01 0305 	and.w	r3, r1, r5
 80024ec:	493d      	ldr	r1, [pc, #244]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80024ee:	fb01 f003 	mul.w	r0, r1, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	fb01 f102 	mul.w	r1, r1, r2
 80024f8:	1844      	adds	r4, r0, r1
 80024fa:	493a      	ldr	r1, [pc, #232]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80024fc:	fba2 0101 	umull	r0, r1, r2, r1
 8002500:	1863      	adds	r3, r4, r1
 8002502:	4619      	mov	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	461a      	mov	r2, r3
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	f7fd fe6e 	bl	80001ec <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e04a      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCC_GetSysClockFreq+0x160>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	099b      	lsrs	r3, r3, #6
 8002520:	461a      	mov	r2, r3
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	ea02 0400 	and.w	r4, r2, r0
 8002532:	ea03 0501 	and.w	r5, r3, r1
 8002536:	4620      	mov	r0, r4
 8002538:	4629      	mov	r1, r5
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	014b      	lsls	r3, r1, #5
 8002544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002548:	0142      	lsls	r2, r0, #5
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	1b00      	subs	r0, r0, r4
 8002550:	eb61 0105 	sbc.w	r1, r1, r5
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	018b      	lsls	r3, r1, #6
 800255e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002562:	0182      	lsls	r2, r0, #6
 8002564:	1a12      	subs	r2, r2, r0
 8002566:	eb63 0301 	sbc.w	r3, r3, r1
 800256a:	f04f 0000 	mov.w	r0, #0
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	00d9      	lsls	r1, r3, #3
 8002574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002578:	00d0      	lsls	r0, r2, #3
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	1912      	adds	r2, r2, r4
 8002580:	eb45 0303 	adc.w	r3, r5, r3
 8002584:	f04f 0000 	mov.w	r0, #0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	0299      	lsls	r1, r3, #10
 800258e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002592:	0290      	lsls	r0, r2, #10
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	f7fd fe22 	bl	80001ec <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_RCC_GetSysClockFreq+0x160>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	60bb      	str	r3, [r7, #8]
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80025ce:	60bb      	str	r3, [r7, #8]
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	68bb      	ldr	r3, [r7, #8]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bdb0      	pop	{r4, r5, r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	017d7840 	.word	0x017d7840

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	08002c0c 	.word	0x08002c0c

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffdc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	08002c0c 	.word	0x08002c0c

08002650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07b      	b.n	800275a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d108      	bne.n	800267c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002672:	d009      	beq.n	8002688 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
 800267a:	e005      	b.n	8002688 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe f992 	bl	80009cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	ea42 0103 	orr.w	r1, r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	f003 0104 	and.w	r1, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f003 0210 	and.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002748:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e03f      	b.n	80027f4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fe fc8d 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2224      	movs	r2, #36	; 0x24
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f828 	bl	80027fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002800:	b09f      	sub	sp, #124	; 0x7c
 8002802:	af00      	add	r7, sp, #0
 8002804:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	68d9      	ldr	r1, [r3, #12]
 8002814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	ea40 0301 	orr.w	r3, r0, r1
 800281c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800281e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	431a      	orrs	r2, r3
 8002828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	431a      	orrs	r2, r3
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4313      	orrs	r3, r2
 8002834:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002840:	f021 010c 	bic.w	r1, r1, #12
 8002844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284a:	430b      	orrs	r3, r1
 800284c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	6999      	ldr	r1, [r3, #24]
 800285c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	ea40 0301 	orr.w	r3, r0, r1
 8002864:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4bc5      	ldr	r3, [pc, #788]	; (8002b80 <UART_SetConfig+0x384>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d004      	beq.n	800287a <UART_SetConfig+0x7e>
 8002870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4bc3      	ldr	r3, [pc, #780]	; (8002b84 <UART_SetConfig+0x388>)
 8002876:	429a      	cmp	r2, r3
 8002878:	d103      	bne.n	8002882 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800287a:	f7ff fed5 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 800287e:	6778      	str	r0, [r7, #116]	; 0x74
 8002880:	e002      	b.n	8002888 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002882:	f7ff febd 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002886:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002890:	f040 80b6 	bne.w	8002a00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002896:	461c      	mov	r4, r3
 8002898:	f04f 0500 	mov.w	r5, #0
 800289c:	4622      	mov	r2, r4
 800289e:	462b      	mov	r3, r5
 80028a0:	1891      	adds	r1, r2, r2
 80028a2:	6439      	str	r1, [r7, #64]	; 0x40
 80028a4:	415b      	adcs	r3, r3
 80028a6:	647b      	str	r3, [r7, #68]	; 0x44
 80028a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ac:	1912      	adds	r2, r2, r4
 80028ae:	eb45 0303 	adc.w	r3, r5, r3
 80028b2:	f04f 0000 	mov.w	r0, #0
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	00d9      	lsls	r1, r3, #3
 80028bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028c0:	00d0      	lsls	r0, r2, #3
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	1911      	adds	r1, r2, r4
 80028c8:	6639      	str	r1, [r7, #96]	; 0x60
 80028ca:	416b      	adcs	r3, r5
 80028cc:	667b      	str	r3, [r7, #100]	; 0x64
 80028ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	1891      	adds	r1, r2, r2
 80028da:	63b9      	str	r1, [r7, #56]	; 0x38
 80028dc:	415b      	adcs	r3, r3
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028e8:	f7fd fc80 	bl	80001ec <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4ba5      	ldr	r3, [pc, #660]	; (8002b88 <UART_SetConfig+0x38c>)
 80028f2:	fba3 2302 	umull	r2, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	011e      	lsls	r6, r3, #4
 80028fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fc:	461c      	mov	r4, r3
 80028fe:	f04f 0500 	mov.w	r5, #0
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	1891      	adds	r1, r2, r2
 8002908:	6339      	str	r1, [r7, #48]	; 0x30
 800290a:	415b      	adcs	r3, r3
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
 800290e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002912:	1912      	adds	r2, r2, r4
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	f04f 0000 	mov.w	r0, #0
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	00d9      	lsls	r1, r3, #3
 8002922:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002926:	00d0      	lsls	r0, r2, #3
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	1911      	adds	r1, r2, r4
 800292e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002930:	416b      	adcs	r3, r5
 8002932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	461a      	mov	r2, r3
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	1891      	adds	r1, r2, r2
 8002940:	62b9      	str	r1, [r7, #40]	; 0x28
 8002942:	415b      	adcs	r3, r3
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800294a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800294e:	f7fd fc4d 	bl	80001ec <__aeabi_uldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <UART_SetConfig+0x38c>)
 8002958:	fba3 1302 	umull	r1, r3, r3, r2
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	2164      	movs	r1, #100	; 0x64
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	3332      	adds	r3, #50	; 0x32
 800296a:	4a87      	ldr	r2, [pc, #540]	; (8002b88 <UART_SetConfig+0x38c>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002978:	441e      	add	r6, r3
 800297a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297c:	4618      	mov	r0, r3
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	1894      	adds	r4, r2, r2
 8002988:	623c      	str	r4, [r7, #32]
 800298a:	415b      	adcs	r3, r3
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002992:	1812      	adds	r2, r2, r0
 8002994:	eb41 0303 	adc.w	r3, r1, r3
 8002998:	f04f 0400 	mov.w	r4, #0
 800299c:	f04f 0500 	mov.w	r5, #0
 80029a0:	00dd      	lsls	r5, r3, #3
 80029a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029a6:	00d4      	lsls	r4, r2, #3
 80029a8:	4622      	mov	r2, r4
 80029aa:	462b      	mov	r3, r5
 80029ac:	1814      	adds	r4, r2, r0
 80029ae:	653c      	str	r4, [r7, #80]	; 0x50
 80029b0:	414b      	adcs	r3, r1
 80029b2:	657b      	str	r3, [r7, #84]	; 0x54
 80029b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	61b9      	str	r1, [r7, #24]
 80029c2:	415b      	adcs	r3, r3
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029ce:	f7fd fc0d 	bl	80001ec <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4b6c      	ldr	r3, [pc, #432]	; (8002b88 <UART_SetConfig+0x38c>)
 80029d8:	fba3 1302 	umull	r1, r3, r3, r2
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	2164      	movs	r1, #100	; 0x64
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	3332      	adds	r3, #50	; 0x32
 80029ea:	4a67      	ldr	r2, [pc, #412]	; (8002b88 <UART_SetConfig+0x38c>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	f003 0207 	and.w	r2, r3, #7
 80029f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4432      	add	r2, r6
 80029fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029fe:	e0b9      	b.n	8002b74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a02:	461c      	mov	r4, r3
 8002a04:	f04f 0500 	mov.w	r5, #0
 8002a08:	4622      	mov	r2, r4
 8002a0a:	462b      	mov	r3, r5
 8002a0c:	1891      	adds	r1, r2, r2
 8002a0e:	6139      	str	r1, [r7, #16]
 8002a10:	415b      	adcs	r3, r3
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a18:	1912      	adds	r2, r2, r4
 8002a1a:	eb45 0303 	adc.w	r3, r5, r3
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	00d9      	lsls	r1, r3, #3
 8002a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a2c:	00d0      	lsls	r0, r2, #3
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	eb12 0804 	adds.w	r8, r2, r4
 8002a36:	eb43 0905 	adc.w	r9, r3, r5
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	008b      	lsls	r3, r1, #2
 8002a4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a52:	0082      	lsls	r2, r0, #2
 8002a54:	4640      	mov	r0, r8
 8002a56:	4649      	mov	r1, r9
 8002a58:	f7fd fbc8 	bl	80001ec <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <UART_SetConfig+0x38c>)
 8002a62:	fba3 2302 	umull	r2, r3, r3, r2
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	011e      	lsls	r6, r3, #4
 8002a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	1894      	adds	r4, r2, r2
 8002a78:	60bc      	str	r4, [r7, #8]
 8002a7a:	415b      	adcs	r3, r3
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a82:	1812      	adds	r2, r2, r0
 8002a84:	eb41 0303 	adc.w	r3, r1, r3
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	f04f 0500 	mov.w	r5, #0
 8002a90:	00dd      	lsls	r5, r3, #3
 8002a92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a96:	00d4      	lsls	r4, r2, #3
 8002a98:	4622      	mov	r2, r4
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	1814      	adds	r4, r2, r0
 8002a9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002aa0:	414b      	adcs	r3, r1
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	008b      	lsls	r3, r1, #2
 8002ab8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002abc:	0082      	lsls	r2, r0, #2
 8002abe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ac2:	f7fd fb93 	bl	80001ec <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <UART_SetConfig+0x38c>)
 8002acc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	2164      	movs	r1, #100	; 0x64
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	3332      	adds	r3, #50	; 0x32
 8002ade:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <UART_SetConfig+0x38c>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aea:	441e      	add	r6, r3
 8002aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aee:	4618      	mov	r0, r3
 8002af0:	f04f 0100 	mov.w	r1, #0
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	1894      	adds	r4, r2, r2
 8002afa:	603c      	str	r4, [r7, #0]
 8002afc:	415b      	adcs	r3, r3
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b04:	1812      	adds	r2, r2, r0
 8002b06:	eb41 0303 	adc.w	r3, r1, r3
 8002b0a:	f04f 0400 	mov.w	r4, #0
 8002b0e:	f04f 0500 	mov.w	r5, #0
 8002b12:	00dd      	lsls	r5, r3, #3
 8002b14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b18:	00d4      	lsls	r4, r2, #3
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	eb12 0a00 	adds.w	sl, r2, r0
 8002b22:	eb43 0b01 	adc.w	fp, r3, r1
 8002b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	008b      	lsls	r3, r1, #2
 8002b3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b3e:	0082      	lsls	r2, r0, #2
 8002b40:	4650      	mov	r0, sl
 8002b42:	4659      	mov	r1, fp
 8002b44:	f7fd fb52 	bl	80001ec <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <UART_SetConfig+0x38c>)
 8002b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2164      	movs	r1, #100	; 0x64
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	3332      	adds	r3, #50	; 0x32
 8002b60:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <UART_SetConfig+0x38c>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4432      	add	r2, r6
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	377c      	adds	r7, #124	; 0x7c
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b7e:	bf00      	nop
 8002b80:	40011000 	.word	0x40011000
 8002b84:	40011400 	.word	0x40011400
 8002b88:	51eb851f 	.word	0x51eb851f

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	4d0d      	ldr	r5, [pc, #52]	; (8002bc4 <__libc_init_array+0x38>)
 8002b90:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <__libc_init_array+0x3c>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	2600      	movs	r6, #0
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	4d0b      	ldr	r5, [pc, #44]	; (8002bcc <__libc_init_array+0x40>)
 8002b9e:	4c0c      	ldr	r4, [pc, #48]	; (8002bd0 <__libc_init_array+0x44>)
 8002ba0:	f000 f820 	bl	8002be4 <_init>
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	2600      	movs	r6, #0
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08002c24 	.word	0x08002c24
 8002bc8:	08002c24 	.word	0x08002c24
 8002bcc:	08002c24 	.word	0x08002c24
 8002bd0:	08002c28 	.word	0x08002c28

08002bd4 <memset>:
 8002bd4:	4402      	add	r2, r0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <_init>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	bf00      	nop
 8002be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bea:	bc08      	pop	{r3}
 8002bec:	469e      	mov	lr, r3
 8002bee:	4770      	bx	lr

08002bf0 <_fini>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr
