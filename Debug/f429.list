
f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a90  08006a90  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a98  08006a98  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200000b8  08006b58  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  08006b58  00020dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f20a  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb5  00000000  00000000  0002f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00031ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00032b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002482c  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8fd  00000000  00000000  00057edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d85da  00000000  00000000  000677d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fdb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  0013fe08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006794 	.word	0x08006794

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08006794 	.word	0x08006794

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_DMA_Init+0xa8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_DMA_Init+0xa8>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_DMA_Init+0xa8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_DMA_Init+0xa8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200b      	movs	r0, #11
 80005cc:	f002 ff1b 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005d0:	200b      	movs	r0, #11
 80005d2:	f002 ff34 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	200f      	movs	r0, #15
 80005dc:	f002 ff13 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e0:	200f      	movs	r0, #15
 80005e2:	f002 ff2c 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2038      	movs	r0, #56	; 0x38
 80005ec:	f002 ff0b 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005f0:	2038      	movs	r0, #56	; 0x38
 80005f2:	f002 ff24 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	203b      	movs	r0, #59	; 0x3b
 80005fc:	f002 ff03 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000600:	203b      	movs	r0, #59	; 0x3b
 8000602:	f002 ff1c 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2044      	movs	r0, #68	; 0x44
 800060c:	f002 fefb 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000610:	2044      	movs	r0, #68	; 0x44
 8000612:	f002 ff14 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2045      	movs	r0, #69	; 0x45
 800061c:	f002 fef3 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000620:	2045      	movs	r0, #69	; 0x45
 8000622:	f002 ff0c 	bl	800343e <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a3b      	ldr	r2, [pc, #236]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MX_GPIO_Init+0x10c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_GPIO_Init+0x10c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a34      	ldr	r2, [pc, #208]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a2d      	ldr	r2, [pc, #180]	; (8000740 <MX_GPIO_Init+0x10c>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_GPIO_Init+0x10c>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <MX_GPIO_Init+0x110>)
 8000716:	f003 fb43 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0x110>)
 8000734:	f003 f988 	bl	8003a48 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	; 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40020400 	.word	0x40020400

08000748 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000748:	b5b0      	push	{r4, r5, r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af04      	add	r7, sp, #16
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8000758:	2300      	movs	r3, #0
 800075a:	82fb      	strh	r3, [r7, #22]
 800075c:	2300      	movs	r3, #0
 800075e:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	3301      	adds	r3, #1
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fc77 	bl	8002060 <WIZCHIP_READ>
 8000772:	4603      	mov	r3, r0
 8000774:	2b1c      	cmp	r3, #28
 8000776:	f200 80fe 	bhi.w	8000976 <loopback_tcps+0x22e>
 800077a:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <loopback_tcps+0x38>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	0800095b 	.word	0x0800095b
 8000784:	08000977 	.word	0x08000977
 8000788:	08000977 	.word	0x08000977
 800078c:	08000977 	.word	0x08000977
 8000790:	08000977 	.word	0x08000977
 8000794:	08000977 	.word	0x08000977
 8000798:	08000977 	.word	0x08000977
 800079c:	08000977 	.word	0x08000977
 80007a0:	08000977 	.word	0x08000977
 80007a4:	08000977 	.word	0x08000977
 80007a8:	08000977 	.word	0x08000977
 80007ac:	08000977 	.word	0x08000977
 80007b0:	08000977 	.word	0x08000977
 80007b4:	08000977 	.word	0x08000977
 80007b8:	08000977 	.word	0x08000977
 80007bc:	08000977 	.word	0x08000977
 80007c0:	08000977 	.word	0x08000977
 80007c4:	08000977 	.word	0x08000977
 80007c8:	08000977 	.word	0x08000977
 80007cc:	08000939 	.word	0x08000939
 80007d0:	08000977 	.word	0x08000977
 80007d4:	08000977 	.word	0x08000977
 80007d8:	08000977 	.word	0x08000977
 80007dc:	080007f5 	.word	0x080007f5
 80007e0:	08000977 	.word	0x08000977
 80007e4:	08000977 	.word	0x08000977
 80007e8:	08000977 	.word	0x08000977
 80007ec:	08000977 	.word	0x08000977
 80007f0:	08000917 	.word	0x08000917
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	3301      	adds	r3, #1
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fc2d 	bl	8002060 <WIZCHIP_READ>
 8000806:	4603      	mov	r3, r0
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d042      	beq.n	8000896 <loopback_tcps+0x14e>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	3301      	adds	r3, #1
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800081c:	4618      	mov	r0, r3
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2204      	movs	r2, #4
 8000824:	4619      	mov	r1, r3
 8000826:	f001 fcb5 	bl	8002194 <WIZCHIP_READ_BUF>
			destport = getSn_DPORT(sn);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	3301      	adds	r3, #1
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fc12 	bl	8002060 <WIZCHIP_READ>
 800083c:	4603      	mov	r3, r0
 800083e:	b29b      	uxth	r3, r3
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b29c      	uxth	r4, r3
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	3301      	adds	r3, #1
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fc05 	bl	8002060 <WIZCHIP_READ>
 8000856:	4603      	mov	r3, r0
 8000858:	b29b      	uxth	r3, r3
 800085a:	4423      	add	r3, r4
 800085c:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 800085e:	79f9      	ldrb	r1, [r7, #7]
 8000860:	7a3b      	ldrb	r3, [r7, #8]
 8000862:	461c      	mov	r4, r3
 8000864:	7a7b      	ldrb	r3, [r7, #9]
 8000866:	461d      	mov	r5, r3
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	461a      	mov	r2, r3
 800086c:	7afb      	ldrb	r3, [r7, #11]
 800086e:	4618      	mov	r0, r3
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	9001      	str	r0, [sp, #4]
 8000876:	9200      	str	r2, [sp, #0]
 8000878:	462b      	mov	r3, r5
 800087a:	4622      	mov	r2, r4
 800087c:	4844      	ldr	r0, [pc, #272]	; (8000990 <loopback_tcps+0x248>)
 800087e:	f004 ffbd 	bl	80057fc <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	3301      	adds	r3, #1
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800088e:	2101      	movs	r1, #1
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fc31 	bl	80020f8 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fd86 	bl	80023aa <getSn_RX_RSR>
 800089e:	4603      	mov	r3, r0
 80008a0:	82fb      	strh	r3, [r7, #22]
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d068      	beq.n	800097a <loopback_tcps+0x232>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80008a8:	8afb      	ldrh	r3, [r7, #22]
 80008aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008ae:	d902      	bls.n	80008b6 <loopback_tcps+0x16e>
 80008b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008b4:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 80008b6:	8afa      	ldrh	r2, [r7, #22]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	6839      	ldr	r1, [r7, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fd8f 	bl	80013e0 <recv>
 80008c2:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dc01      	bgt.n	80008ce <loopback_tcps+0x186>
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	e05b      	b.n	8000986 <loopback_tcps+0x23e>
			size = (uint16_t) ret;
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 80008d6:	e019      	b.n	800090c <loopback_tcps+0x1c4>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 80008d8:	8abb      	ldrh	r3, [r7, #20]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	18d1      	adds	r1, r2, r3
 80008de:	8afa      	ldrh	r2, [r7, #22]
 80008e0:	8abb      	ldrh	r3, [r7, #20]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fc7f 	bl	80011ec <send>
 80008ee:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da05      	bge.n	8000902 <loopback_tcps+0x1ba>
				{
					close(sn);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fb39 	bl	8000f70 <close>
					return ret;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	e041      	b.n	8000986 <loopback_tcps+0x23e>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	b29a      	uxth	r2, r3
 8000906:	8abb      	ldrh	r3, [r7, #20]
 8000908:	4413      	add	r3, r2
 800090a:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 800090c:	8afa      	ldrh	r2, [r7, #22]
 800090e:	8abb      	ldrh	r3, [r7, #20]
 8000910:	429a      	cmp	r2, r3
 8000912:	d1e1      	bne.n	80008d8 <loopback_tcps+0x190>
			}
         }
         break;
 8000914:	e031      	b.n	800097a <loopback_tcps+0x232>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fbf1 	bl	8001100 <disconnect>
 800091e:	4603      	mov	r3, r0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d001      	beq.n	800092c <loopback_tcps+0x1e4>
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	e02c      	b.n	8000986 <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4619      	mov	r1, r3
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <loopback_tcps+0x24c>)
 8000932:	f004 ff63 	bl	80057fc <iprintf>
#endif
         break;
 8000936:	e025      	b.n	8000984 <loopback_tcps+0x23c>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	88ba      	ldrh	r2, [r7, #4]
 800093c:	4619      	mov	r1, r3
 800093e:	4816      	ldr	r0, [pc, #88]	; (8000998 <loopback_tcps+0x250>)
 8000940:	f004 ff5c 	bl	80057fc <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fb80 	bl	800104c <listen>
 800094c:	4603      	mov	r3, r0
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d013      	beq.n	800097e <loopback_tcps+0x236>
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	e015      	b.n	8000986 <loopback_tcps+0x23e>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 800095a:	88ba      	ldrh	r2, [r7, #4]
 800095c:	79f8      	ldrb	r0, [r7, #7]
 800095e:	2300      	movs	r3, #0
 8000960:	2101      	movs	r1, #1
 8000962:	f000 f9ef 	bl	8000d44 <socket>
 8000966:	4603      	mov	r3, r0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	429a      	cmp	r2, r3
 8000970:	d007      	beq.n	8000982 <loopback_tcps+0x23a>
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	e007      	b.n	8000986 <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8000976:	bf00      	nop
 8000978:	e004      	b.n	8000984 <loopback_tcps+0x23c>
         break;
 800097a:	bf00      	nop
 800097c:	e002      	b.n	8000984 <loopback_tcps+0x23c>
         break;
 800097e:	bf00      	nop
 8000980:	e000      	b.n	8000984 <loopback_tcps+0x23c>
         break;
 8000982:	bf00      	nop
   }
   return 1;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bdb0      	pop	{r4, r5, r7, pc}
 800098e:	bf00      	nop
 8000990:	080067ac 	.word	0x080067ac
 8000994:	080067d0 	.word	0x080067d0
 8000998:	080067e4 	.word	0x080067e4

0800099c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 80009a4:	1d39      	adds	r1, r7, #4
 80009a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009aa:	2201      	movs	r2, #1
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <__io_putchar+0x20>)
 80009ae:	f004 fc4e 	bl	800524e <HAL_UART_Transmit>
  return ch;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000d54 	.word	0x20000d54

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint8_t tmp;
 int32_t retr = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <main+0xc4>)
 80009cc:	463c      	mov	r4, r7
 80009ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f002 fba6 	bl	8003124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f86c 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f7ff fe2a 	bl	8000634 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e0:	f7ff fdd2 	bl	8000588 <MX_DMA_Init>
  MX_SPI1_Init();
 80009e4:	f000 fdb2 	bl	800154c <MX_SPI1_Init>
  MX_SPI2_Init();
 80009e8:	f000 fde2 	bl	80015b0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80009ec:	f000 fe16 	bl	800161c <MX_SPI3_Init>
  MX_SPI4_Init();
 80009f0:	f000 fe46 	bl	8001680 <MX_SPI4_Init>
  MX_SPI5_Init();
 80009f4:	f000 fe76 	bl	80016e4 <MX_SPI5_Init>
  MX_SPI6_Init();
 80009f8:	f000 fea6 	bl	8001748 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 80009fc:	f001 fabe 	bl	8001f7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8000a00:	4921      	ldr	r1, [pc, #132]	; (8000a88 <main+0xc8>)
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <main+0xcc>)
 8000a04:	f001 fe38 	bl	8002678 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8000a08:	4921      	ldr	r1, [pc, #132]	; (8000a90 <main+0xd0>)
 8000a0a:	4822      	ldr	r0, [pc, #136]	; (8000a94 <main+0xd4>)
 8000a0c:	f001 fe5a 	bl	80026c4 <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000a10:	4921      	ldr	r1, [pc, #132]	; (8000a98 <main+0xd8>)
 8000a12:	4822      	ldr	r0, [pc, #136]	; (8000a9c <main+0xdc>)
 8000a14:	f001 fe82 	bl	800271c <reg_wizchip_spiburst_cbfunc>
  
  
  
  /* WIZCHIP SOCKET Buffer initialize */
  if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f001 fea9 	bl	8002774 <ctlwizchip>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d103      	bne.n	8000a32 <main+0x72>
  {
     printf("WIZCHIP Initialized fail.\r\n");
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <main+0xe0>)
 8000a2c:	f004 ff6c 	bl	8005908 <puts>
     while(1);
 8000a30:	e7fe      	b.n	8000a30 <main+0x70>
  }

  /* PHY link status check */
  do
  {
     if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8000a32:	f107 0313 	add.w	r3, r7, #19
 8000a36:	4619      	mov	r1, r3
 8000a38:	200f      	movs	r0, #15
 8000a3a:	f001 fe9b 	bl	8002774 <ctlwizchip>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d102      	bne.n	8000a4c <main+0x8c>
        printf("Unknown PHY Link stauts.\r\n");
 8000a46:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <main+0xe4>)
 8000a48:	f004 ff5e 	bl	8005908 <puts>
  }while(tmp == PHY_LINK_OFF);
 8000a4c:	7cfb      	ldrb	r3, [r7, #19]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0ef      	beq.n	8000a32 <main+0x72>
  printf("SOCKET ERROR =1");
 8000a52:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <main+0xe8>)
 8000a54:	f004 fed2 	bl	80057fc <iprintf>
  network_init();
 8000a58:	f000 f8e8 	bl	8000c2c <network_init>
  {




      HAL_Delay(500);
 8000a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a60:	f002 fbd2 	bl	8003208 <HAL_Delay>
     
//    DHT_data d = DHT_getData(DHT22);
//     printf("Temp: %2.1f \r\n", d.temp );
 
    
    if( (retr = loopback_tcps(SOCK_UDP, gDATABUF, 5000)) < 0) {
 8000a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a68:	4910      	ldr	r1, [pc, #64]	; (8000aac <main+0xec>)
 8000a6a:	2022      	movs	r0, #34	; 0x22
 8000a6c:	f7ff fe6c 	bl	8000748 <loopback_tcps>
 8000a70:	6178      	str	r0, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	daf1      	bge.n	8000a5c <main+0x9c>
      printf("SOCKET ERROR : %ld\r\n", retr);
 8000a78:	6979      	ldr	r1, [r7, #20]
 8000a7a:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <main+0xf0>)
 8000a7c:	f004 febe 	bl	80057fc <iprintf>
      HAL_Delay(500);
 8000a80:	e7ec      	b.n	8000a5c <main+0x9c>
 8000a82:	bf00      	nop
 8000a84:	08006920 	.word	0x08006920
 8000a88:	08000b8d 	.word	0x08000b8d
 8000a8c:	08000b75 	.word	0x08000b75
 8000a90:	08000c0f 	.word	0x08000c0f
 8000a94:	08000bf5 	.word	0x08000bf5
 8000a98:	08000bcd 	.word	0x08000bcd
 8000a9c:	08000ba5 	.word	0x08000ba5
 8000aa0:	080068c0 	.word	0x080068c0
 8000aa4:	080068dc 	.word	0x080068dc
 8000aa8:	080068f8 	.word	0x080068f8
 8000aac:	20000104 	.word	0x20000104
 8000ab0:	08006908 	.word	0x08006908

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 fe92 	bl	80057ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <SystemClock_Config+0xb8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <SystemClock_Config+0xb8>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <SystemClock_Config+0xb8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <SystemClock_Config+0xbc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <SystemClock_Config+0xbc>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <SystemClock_Config+0xbc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f953 	bl	8003dd4 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b34:	f000 f900 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 fbb6 	bl	80042c4 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b5e:	f000 f8eb 	bl	8000d38 <Error_Handler>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3750      	adds	r7, #80	; 0x50
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <W5500_Select>:

/* USER CODE BEGIN 4 */
void W5500_Select(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7e:	4802      	ldr	r0, [pc, #8]	; (8000b88 <W5500_Select+0x14>)
 8000b80:	f003 f90e 	bl	8003da0 <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020400 	.word	0x40020400

08000b8c <W5500_Unselect>:

void W5500_Unselect(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b96:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <W5500_Unselect+0x14>)
 8000b98:	f003 f902 	bl	8003da0 <HAL_GPIO_WritePin>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8000bb0:	887a      	ldrh	r2, [r7, #2]
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <W5500_ReadBuff+0x24>)
 8000bba:	f003 ff18 	bl	80049ee <HAL_SPI_Receive>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000904 	.word	0x20000904

08000bcc <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8000bd8:	887a      	ldrh	r2, [r7, #2]
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <W5500_WriteBuff+0x24>)
 8000be2:	f003 fdc8 	bl	8004776 <HAL_SPI_Transmit>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000904 	.word	0x20000904

08000bf4 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  uint8_t byte;
  W5500_ReadBuff(&byte, sizeof(byte));
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffd0 	bl	8000ba4 <W5500_ReadBuff>
  return byte;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
  W5500_WriteBuff(&byte, sizeof(byte));
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffd5 	bl	8000bcc <W5500_WriteBuff>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <network_init>:

void network_init(void)
{
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af04      	add	r7, sp, #16
  uint8_t tmpstr[6];
  ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000c32:	4939      	ldr	r1, [pc, #228]	; (8000d18 <network_init+0xec>)
 8000c34:	2000      	movs	r0, #0
 8000c36:	f001 fe7b 	bl	8002930 <ctlnetwork>
  ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8000c3a:	4937      	ldr	r1, [pc, #220]	; (8000d18 <network_init+0xec>)
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f001 fe77 	bl	8002930 <ctlnetwork>

  // Display Network Information
  ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000c42:	463b      	mov	r3, r7
 8000c44:	4619      	mov	r1, r3
 8000c46:	2008      	movs	r0, #8
 8000c48:	f001 fd94 	bl	8002774 <ctlwizchip>
  printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4832      	ldr	r0, [pc, #200]	; (8000d1c <network_init+0xf0>)
 8000c52:	f004 fdd3 	bl	80057fc <iprintf>
  printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <network_init+0xec>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <network_init+0xec>)
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	461c      	mov	r4, r3
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <network_init+0xec>)
 8000c64:	789b      	ldrb	r3, [r3, #2]
 8000c66:	461d      	mov	r5, r3
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <network_init+0xec>)
 8000c6a:	78db      	ldrb	r3, [r3, #3]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <network_init+0xec>)
 8000c70:	791b      	ldrb	r3, [r3, #4]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <network_init+0xec>)
 8000c76:	795b      	ldrb	r3, [r3, #5]
 8000c78:	9302      	str	r3, [sp, #8]
 8000c7a:	9101      	str	r1, [sp, #4]
 8000c7c:	9200      	str	r2, [sp, #0]
 8000c7e:	462b      	mov	r3, r5
 8000c80:	4622      	mov	r2, r4
 8000c82:	4601      	mov	r1, r0
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <network_init+0xf4>)
 8000c86:	f004 fdb9 	bl	80057fc <iprintf>
  printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <network_init+0xec>)
 8000c8c:	799b      	ldrb	r3, [r3, #6]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <network_init+0xec>)
 8000c92:	79db      	ldrb	r3, [r3, #7]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <network_init+0xec>)
 8000c98:	7a1b      	ldrb	r3, [r3, #8]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <network_init+0xec>)
 8000c9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	481f      	ldr	r0, [pc, #124]	; (8000d24 <network_init+0xf8>)
 8000ca6:	f004 fda9 	bl	80057fc <iprintf>
  printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <network_init+0xec>)
 8000cac:	7b9b      	ldrb	r3, [r3, #14]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <network_init+0xec>)
 8000cb2:	7bdb      	ldrb	r3, [r3, #15]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <network_init+0xec>)
 8000cb8:	7c1b      	ldrb	r3, [r3, #16]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <network_init+0xec>)
 8000cbe:	7c5b      	ldrb	r3, [r3, #17]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <network_init+0xfc>)
 8000cc6:	f004 fd99 	bl	80057fc <iprintf>
  printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <network_init+0xec>)
 8000ccc:	7a9b      	ldrb	r3, [r3, #10]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <network_init+0xec>)
 8000cd2:	7adb      	ldrb	r3, [r3, #11]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <network_init+0xec>)
 8000cd8:	7b1b      	ldrb	r3, [r3, #12]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <network_init+0xec>)
 8000cde:	7b5b      	ldrb	r3, [r3, #13]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <network_init+0x100>)
 8000ce6:	f004 fd89 	bl	80057fc <iprintf>
  printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <network_init+0xec>)
 8000cec:	7c9b      	ldrb	r3, [r3, #18]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <network_init+0xec>)
 8000cf2:	7cdb      	ldrb	r3, [r3, #19]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <network_init+0xec>)
 8000cf8:	7d1b      	ldrb	r3, [r3, #20]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <network_init+0xec>)
 8000cfe:	7d5b      	ldrb	r3, [r3, #21]
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4603      	mov	r3, r0
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <network_init+0x104>)
 8000d06:	f004 fd79 	bl	80057fc <iprintf>
  printf("======================\r\n");
 8000d0a:	480a      	ldr	r0, [pc, #40]	; (8000d34 <network_init+0x108>)
 8000d0c:	f004 fdfc 	bl	8005908 <puts>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bdb0      	pop	{r4, r5, r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	08006930 	.word	0x08006930
 8000d20:	08006948 	.word	0x08006948
 8000d24:	08006970 	.word	0x08006970
 8000d28:	08006984 	.word	0x08006984
 8000d2c:	08006998 	.word	0x08006998
 8000d30:	080069ac 	.word	0x080069ac
 8000d34:	080069c0 	.word	0x080069c0

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	4611      	mov	r1, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	4623      	mov	r3, r4
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	4603      	mov	r3, r0
 8000d58:	71bb      	strb	r3, [r7, #6]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	80bb      	strh	r3, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d902      	bls.n	8000d6e <socket+0x2a>
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	e0f2      	b.n	8000f54 <socket+0x210>
	switch(protocol)
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <socket+0x3c>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dd11      	ble.n	8000d9c <socket+0x58>
 8000d78:	3b02      	subs	r3, #2
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d80e      	bhi.n	8000d9c <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000d7e:	e010      	b.n	8000da2 <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2204      	movs	r2, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000d8c:	f001 fa02 	bl	8002194 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d105      	bne.n	8000da2 <socket+0x5e>
 8000d96:	f06f 0302 	mvn.w	r3, #2
 8000d9a:	e0db      	b.n	8000f54 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000d9c:	f06f 0304 	mvn.w	r3, #4
 8000da0:	e0d8      	b.n	8000f54 <socket+0x210>
         break;
 8000da2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <socket+0x70>
 8000dae:	f06f 0305 	mvn.w	r3, #5
 8000db2:	e0cf      	b.n	8000f54 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d025      	beq.n	8000e06 <socket+0xc2>
	{
   	switch(protocol)
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d002      	beq.n	8000dc6 <socket+0x82>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d008      	beq.n	8000dd6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000dc4:	e024      	b.n	8000e10 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d11c      	bne.n	8000e0a <socket+0xc6>
 8000dd0:	f06f 0305 	mvn.w	r3, #5
 8000dd4:	e0be      	b.n	8000f54 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d006      	beq.n	8000dee <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db02      	blt.n	8000dee <socket+0xaa>
 8000de8:	f06f 0305 	mvn.w	r3, #5
 8000dec:	e0b2      	b.n	8000f54 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00a      	beq.n	8000e0e <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db06      	blt.n	8000e0e <socket+0xca>
 8000e00:	f06f 0305 	mvn.w	r3, #5
 8000e04:	e0a6      	b.n	8000f54 <socket+0x210>
   	}
   }
 8000e06:	bf00      	nop
 8000e08:	e002      	b.n	8000e10 <socket+0xcc>
   	      break;
 8000e0a:	bf00      	nop
 8000e0c:	e000      	b.n	8000e10 <socket+0xcc>
   	      break;
 8000e0e:	bf00      	nop
	close(sn);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f8ac 	bl	8000f70 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e26:	f023 030f 	bic.w	r3, r3, #15
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	f001 f95e 	bl	80020f8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000e3c:	88bb      	ldrh	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d110      	bne.n	8000e64 <socket+0x120>
	{
	   port = sock_any_port++;
 8000e42:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <socket+0x218>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	b291      	uxth	r1, r2
 8000e4a:	4a44      	ldr	r2, [pc, #272]	; (8000f5c <socket+0x218>)
 8000e4c:	8011      	strh	r1, [r2, #0]
 8000e4e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000e50:	4b42      	ldr	r3, [pc, #264]	; (8000f5c <socket+0x218>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d103      	bne.n	8000e64 <socket+0x120>
 8000e5c:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <socket+0x218>)
 8000e5e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000e62:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	3301      	adds	r3, #1
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e70:	461a      	mov	r2, r3
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	f001 f93b 	bl	80020f8 <WIZCHIP_WRITE>
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3301      	adds	r3, #1
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e8e:	461a      	mov	r2, r3
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4619      	mov	r1, r3
 8000e96:	4610      	mov	r0, r2
 8000e98:	f001 f92e 	bl	80020f8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 f924 	bl	80020f8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000eb0:	bf00      	nop
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 f8ce 	bl	8002060 <WIZCHIP_READ>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f3      	bne.n	8000eb2 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <socket+0x21c>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <socket+0x21c>)
 8000ee6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <socket+0x21c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <socket+0x21c>)
 8000f04:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <socket+0x220>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <socket+0x220>)
 8000f22:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <socket+0x224>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <socket+0x228>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000f36:	bf00      	nop
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 f88b 	bl	8002060 <WIZCHIP_READ>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f3      	beq.n	8000f38 <socket+0x1f4>
   return (int8_t)sn;
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	20000018 	.word	0x20000018
 8000f60:	200000d4 	.word	0x200000d4
 8000f64:	200000d6 	.word	0x200000d6
 8000f68:	200000d8 	.word	0x200000d8
 8000f6c:	200000e8 	.word	0x200000e8

08000f70 <close>:

int8_t close(uint8_t sn)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d902      	bls.n	8000f86 <close+0x16>
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	e055      	b.n	8001032 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f92:	2110      	movs	r1, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 f8af 	bl	80020f8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000f9a:	bf00      	nop
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 f859 	bl	8002060 <WIZCHIP_READ>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f3      	bne.n	8000f9c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	3301      	adds	r3, #1
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fc0:	211f      	movs	r1, #31
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 f898 	bl	80020f8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <close+0xcc>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <close+0xcc>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <close+0xd0>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <close+0xd0>)
 8001002:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <close+0xd4>)
 8001008:	2100      	movs	r1, #0
 800100a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <close+0xd8>)
 8001012:	2100      	movs	r1, #0
 8001014:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001016:	bf00      	nop
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	3301      	adds	r3, #1
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001024:	4618      	mov	r0, r3
 8001026:	f001 f81b 	bl	8002060 <WIZCHIP_READ>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f3      	bne.n	8001018 <close+0xa8>
	return SOCK_OK;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000d4 	.word	0x200000d4
 8001040:	200000d6 	.word	0x200000d6
 8001044:	200000d8 	.word	0x200000d8
 8001048:	200000e8 	.word	0x200000e8

0800104c <listen>:

int8_t listen(uint8_t sn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b08      	cmp	r3, #8
 800105a:	d902      	bls.n	8001062 <listen+0x16>
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e049      	b.n	80010f6 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3301      	adds	r3, #1
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fff8 	bl	8002060 <WIZCHIP_READ>
 8001070:	4603      	mov	r3, r0
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	2b01      	cmp	r3, #1
 8001078:	d002      	beq.n	8001080 <listen+0x34>
 800107a:	f06f 0304 	mvn.w	r3, #4
 800107e:	e03a      	b.n	80010f6 <listen+0xaa>
	CHECK_SOCKINIT();
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	3301      	adds	r3, #1
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800108c:	4618      	mov	r0, r3
 800108e:	f000 ffe7 	bl	8002060 <WIZCHIP_READ>
 8001092:	4603      	mov	r3, r0
 8001094:	2b13      	cmp	r3, #19
 8001096:	d002      	beq.n	800109e <listen+0x52>
 8001098:	f06f 0302 	mvn.w	r3, #2
 800109c:	e02b      	b.n	80010f6 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	3301      	adds	r3, #1
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010aa:	2102      	movs	r1, #2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 f823 	bl	80020f8 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80010b2:	bf00      	nop
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	3301      	adds	r3, #1
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 ffcd 	bl	8002060 <WIZCHIP_READ>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f3      	bne.n	80010b4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80010cc:	e006      	b.n	80010dc <listen+0x90>
   {
         close(sn);
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff4d 	bl	8000f70 <close>
         return SOCKERR_SOCKCLOSED;
 80010d6:	f06f 0303 	mvn.w	r3, #3
 80010da:	e00c      	b.n	80010f6 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3301      	adds	r3, #1
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 ffb9 	bl	8002060 <WIZCHIP_READ>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b14      	cmp	r3, #20
 80010f2:	d1ec      	bne.n	80010ce <listen+0x82>
   }
   return SOCK_OK;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b08      	cmp	r3, #8
 800110e:	d902      	bls.n	8001116 <disconnect+0x16>
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	e062      	b.n	80011dc <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	3301      	adds	r3, #1
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 ff9e 	bl	8002060 <WIZCHIP_READ>
 8001124:	4603      	mov	r3, r0
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	2b01      	cmp	r3, #1
 800112c:	d002      	beq.n	8001134 <disconnect+0x34>
 800112e:	f06f 0304 	mvn.w	r3, #4
 8001132:	e053      	b.n	80011dc <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	3301      	adds	r3, #1
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001140:	2108      	movs	r1, #8
 8001142:	4618      	mov	r0, r3
 8001144:	f000 ffd8 	bl	80020f8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001148:	bf00      	nop
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	3301      	adds	r3, #1
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001156:	4618      	mov	r0, r3
 8001158:	f000 ff82 	bl	8002060 <WIZCHIP_READ>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f3      	bne.n	800114a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2201      	movs	r2, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	b21b      	sxth	r3, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	b21a      	sxth	r2, r3
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <disconnect+0xe4>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4013      	ands	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <disconnect+0xe4>)
 800117e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <disconnect+0xe8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	fa42 f303 	asr.w	r3, r2, r3
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d016      	beq.n	80011c2 <disconnect+0xc2>
 8001194:	2300      	movs	r3, #0
 8001196:	e021      	b.n	80011dc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	3301      	adds	r3, #1
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 ff5b 	bl	8002060 <WIZCHIP_READ>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <disconnect+0xc2>
	   {
	      close(sn);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff feda 	bl	8000f70 <close>
	      return SOCKERR_TIMEOUT;
 80011bc:	f06f 030c 	mvn.w	r3, #12
 80011c0:	e00c      	b.n	80011dc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	3301      	adds	r3, #1
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 ff46 	bl	8002060 <WIZCHIP_READ>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1de      	bne.n	8001198 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000d6 	.word	0x200000d6
 80011e8:	200000d4 	.word	0x200000d4

080011ec <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001200:	2300      	movs	r3, #0
 8001202:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b08      	cmp	r3, #8
 8001208:	d902      	bls.n	8001210 <send+0x24>
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e0de      	b.n	80013ce <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	3301      	adds	r3, #1
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4618      	mov	r0, r3
 800121a:	f000 ff21 	bl	8002060 <WIZCHIP_READ>
 800121e:	4603      	mov	r3, r0
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	2b01      	cmp	r3, #1
 8001226:	d002      	beq.n	800122e <send+0x42>
 8001228:	f06f 0304 	mvn.w	r3, #4
 800122c:	e0cf      	b.n	80013ce <send+0x1e2>
   CHECK_SOCKDATA();
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <send+0x4e>
 8001234:	f06f 030d 	mvn.w	r3, #13
 8001238:	e0c9      	b.n	80013ce <send+0x1e2>
   tmp = getSn_SR(sn);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	3301      	adds	r3, #1
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001246:	4618      	mov	r0, r3
 8001248:	f000 ff0a 	bl	8002060 <WIZCHIP_READ>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b17      	cmp	r3, #23
 8001254:	d005      	beq.n	8001262 <send+0x76>
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b1c      	cmp	r3, #28
 800125a:	d002      	beq.n	8001262 <send+0x76>
 800125c:	f06f 0306 	mvn.w	r3, #6
 8001260:	e0b5      	b.n	80013ce <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001262:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <send+0x1ec>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	fa42 f303 	asr.w	r3, r2, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d039      	beq.n	80012ea <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	3301      	adds	r3, #1
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001282:	4618      	mov	r0, r3
 8001284:	f000 feec 	bl	8002060 <WIZCHIP_READ>
 8001288:	4603      	mov	r3, r0
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	d019      	beq.n	80012ce <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	3301      	adds	r3, #1
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012a6:	2110      	movs	r1, #16
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 ff25 	bl	80020f8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2201      	movs	r2, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <send+0x1ec>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4013      	ands	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <send+0x1ec>)
 80012ca:	801a      	strh	r2, [r3, #0]
 80012cc:	e00d      	b.n	80012ea <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <send+0xfa>
      {
         close(sn);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe48 	bl	8000f70 <close>
         return SOCKERR_TIMEOUT;
 80012e0:	f06f 030c 	mvn.w	r3, #12
 80012e4:	e073      	b.n	80013ce <send+0x1e2>
      }
      else return SOCK_BUSY;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e071      	b.n	80013ce <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	3301      	adds	r3, #1
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 feb2 	bl	8002060 <WIZCHIP_READ>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29b      	uxth	r3, r3
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001304:	88ba      	ldrh	r2, [r7, #4]
 8001306:	89bb      	ldrh	r3, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d901      	bls.n	8001310 <send+0x124>
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fffe 	bl	8002314 <getSn_TX_FSR>
 8001318:	4603      	mov	r3, r0
 800131a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	3301      	adds	r3, #1
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fe99 	bl	8002060 <WIZCHIP_READ>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b17      	cmp	r3, #23
 8001336:	d009      	beq.n	800134c <send+0x160>
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2b1c      	cmp	r3, #28
 800133c:	d006      	beq.n	800134c <send+0x160>
      {
         close(sn);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe15 	bl	8000f70 <close>
         return SOCKERR_SOCKSTATUS;
 8001346:	f06f 0306 	mvn.w	r3, #6
 800134a:	e040      	b.n	80013ce <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <send+0x1f0>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	fa42 f303 	asr.w	r3, r2, r3
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <send+0x180>
 8001360:	88ba      	ldrh	r2, [r7, #4]
 8001362:	89bb      	ldrh	r3, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d901      	bls.n	800136c <send+0x180>
 8001368:	2300      	movs	r3, #0
 800136a:	e030      	b.n	80013ce <send+0x1e2>
      if(len <= freesize) break;
 800136c:	88ba      	ldrh	r2, [r7, #4]
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d900      	bls.n	8001376 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001374:	e7cc      	b.n	8001310 <send+0x124>
      if(len <= freesize) break;
 8001376:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f85e 	bl	8002440 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	3301      	adds	r3, #1
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001390:	2120      	movs	r1, #32
 8001392:	4618      	mov	r0, r3
 8001394:	f000 feb0 	bl	80020f8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001398:	bf00      	nop
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	3301      	adds	r3, #1
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fe5a 	bl	8002060 <WIZCHIP_READ>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f3      	bne.n	800139a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2201      	movs	r2, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <send+0x1ec>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <send+0x1ec>)
 80013ca:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80013cc:	88bb      	ldrh	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000d6 	.word	0x200000d6
 80013dc:	200000d4 	.word	0x200000d4

080013e0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4613      	mov	r3, r2
 80013ee:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d902      	bls.n	8001404 <recv+0x24>
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e09c      	b.n	800153e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	3301      	adds	r3, #1
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fe27 	bl	8002060 <WIZCHIP_READ>
 8001412:	4603      	mov	r3, r0
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	2b01      	cmp	r3, #1
 800141a:	d002      	beq.n	8001422 <recv+0x42>
 800141c:	f06f 0304 	mvn.w	r3, #4
 8001420:	e08d      	b.n	800153e <recv+0x15e>
   CHECK_SOCKDATA();
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <recv+0x4e>
 8001428:	f06f 030d 	mvn.w	r3, #13
 800142c:	e087      	b.n	800153e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	3301      	adds	r3, #1
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fe10 	bl	8002060 <WIZCHIP_READ>
 8001440:	4603      	mov	r3, r0
 8001442:	b29b      	uxth	r3, r3
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001448:	89ba      	ldrh	r2, [r7, #12]
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d201      	bcs.n	8001454 <recv+0x74>
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 ffa7 	bl	80023aa <getSn_RX_RSR>
 800145c:	4603      	mov	r3, r0
 800145e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	3301      	adds	r3, #1
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fdf7 	bl	8002060 <WIZCHIP_READ>
 8001472:	4603      	mov	r3, r0
 8001474:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b17      	cmp	r3, #23
 800147a:	d026      	beq.n	80014ca <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b1c      	cmp	r3, #28
 8001480:	d11c      	bne.n	80014bc <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d133      	bne.n	80014f0 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 ff42 	bl	8002314 <getSn_TX_FSR>
 8001490:	4603      	mov	r3, r0
 8001492:	461c      	mov	r4, r3
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3301      	adds	r3, #1
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fddd 	bl	8002060 <WIZCHIP_READ>
 80014a6:	4603      	mov	r3, r0
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	429c      	cmp	r4, r3
 80014ac:	d10d      	bne.n	80014ca <recv+0xea>
               {
                  close(sn);
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd5d 	bl	8000f70 <close>
                  return SOCKERR_SOCKSTATUS;
 80014b6:	f06f 0306 	mvn.w	r3, #6
 80014ba:	e040      	b.n	800153e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd56 	bl	8000f70 <close>
               return SOCKERR_SOCKSTATUS;
 80014c4:	f06f 0306 	mvn.w	r3, #6
 80014c8:	e039      	b.n	800153e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <recv+0x168>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	fa42 f303 	asr.w	r3, r2, r3
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <recv+0x108>
 80014de:	89bb      	ldrh	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <recv+0x108>
 80014e4:	2300      	movs	r3, #0
 80014e6:	e02a      	b.n	800153e <recv+0x15e>
         if(recvsize != 0) break;
 80014e8:	89bb      	ldrh	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80014ee:	e7b1      	b.n	8001454 <recv+0x74>
               if(recvsize != 0) break;
 80014f0:	bf00      	nop
 80014f2:	e000      	b.n	80014f6 <recv+0x116>
         if(recvsize != 0) break;
 80014f4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80014f6:	89ba      	ldrh	r2, [r7, #12]
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d201      	bcs.n	8001502 <recv+0x122>
 80014fe:	89bb      	ldrh	r3, [r7, #12]
 8001500:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001502:	88ba      	ldrh	r2, [r7, #4]
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	6839      	ldr	r1, [r7, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fff5 	bl	80024f8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	3301      	adds	r3, #1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fdeb 	bl	80020f8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001522:	bf00      	nop
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	3301      	adds	r3, #1
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fd95 	bl	8002060 <WIZCHIP_READ>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f3      	bne.n	8001524 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800153c:	88bb      	ldrh	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	200000d4 	.word	0x200000d4

0800154c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi6_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <MX_SPI1_Init+0x60>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_SPI1_Init+0x5c>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_SPI1_Init+0x5c>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_SPI1_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_SPI1_Init+0x5c>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001590:	220a      	movs	r2, #10
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_SPI1_Init+0x5c>)
 8001596:	f003 f865 	bl	8004664 <HAL_SPI_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80015a0:	f7ff fbca 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000b7c 	.word	0x20000b7c
 80015ac:	40013000 	.word	0x40013000

080015b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_SPI2_Init+0x64>)
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <MX_SPI2_Init+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_SPI2_Init+0x64>)
 80015bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_SPI2_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_SPI2_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_SPI2_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_SPI2_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_SPI2_Init+0x64>)
 80015dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_SPI2_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <MX_SPI2_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_SPI2_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <MX_SPI2_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_SPI2_Init+0x64>)
 80015fc:	220a      	movs	r2, #10
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_SPI2_Init+0x64>)
 8001602:	f003 f82f 	bl	8004664 <HAL_SPI_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800160c:	f7ff fb94 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000904 	.word	0x20000904
 8001618:	40003800 	.word	0x40003800

0800161c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <MX_SPI3_Init+0x60>)
 8001624:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_SPI3_Init+0x5c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_SPI3_Init+0x5c>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <MX_SPI3_Init+0x5c>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <MX_SPI3_Init+0x5c>)
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001660:	220a      	movs	r2, #10
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <MX_SPI3_Init+0x5c>)
 8001666:	f002 fffd 	bl	8004664 <HAL_SPI_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8001670:	f7ff fb62 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000acc 	.word	0x20000acc
 800167c:	40003c00 	.word	0x40003c00

08001680 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_SPI4_Init+0x5c>)
 8001686:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <MX_SPI4_Init+0x60>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MX_SPI4_Init+0x5c>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_SPI4_Init+0x5c>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_SPI4_Init+0x5c>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_SPI4_Init+0x5c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_SPI4_Init+0x5c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_SPI4_Init+0x5c>)
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_SPI4_Init+0x5c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_SPI4_Init+0x5c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_SPI4_Init+0x5c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_SPI4_Init+0x5c>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_SPI4_Init+0x5c>)
 80016ca:	f002 ffcb 	bl	8004664 <HAL_SPI_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_SPI4_Init+0x58>
  {
    Error_Handler();
 80016d4:	f7ff fb30 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000b24 	.word	0x20000b24
 80016e0:	40013400 	.word	0x40013400

080016e4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_SPI5_Init+0x5c>)
 80016ea:	4a16      	ldr	r2, [pc, #88]	; (8001744 <MX_SPI5_Init+0x60>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_SPI5_Init+0x5c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_SPI5_Init+0x5c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_SPI5_Init+0x5c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_SPI5_Init+0x5c>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_SPI5_Init+0x5c>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_SPI5_Init+0x5c>)
 800170e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001712:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <MX_SPI5_Init+0x5c>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_SPI5_Init+0x5c>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <MX_SPI5_Init+0x5c>)
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_SPI5_Init+0x5c>)
 8001728:	220a      	movs	r2, #10
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_SPI5_Init+0x5c>)
 800172e:	f002 ff99 	bl	8004664 <HAL_SPI_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_SPI5_Init+0x58>
  {
    Error_Handler();
 8001738:	f7ff fafe 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000095c 	.word	0x2000095c
 8001744:	40015000 	.word	0x40015000

08001748 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_SPI6_Init+0x5c>)
 800174e:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <MX_SPI6_Init+0x60>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_SPI6_Init+0x5c>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_SPI6_Init+0x5c>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_SPI6_Init+0x5c>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_SPI6_Init+0x5c>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_SPI6_Init+0x5c>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_SPI6_Init+0x5c>)
 8001772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001776:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_SPI6_Init+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_SPI6_Init+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_SPI6_Init+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_SPI6_Init+0x5c>)
 800178c:	220a      	movs	r2, #10
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_SPI6_Init+0x5c>)
 8001792:	f002 ff67 	bl	8004664 <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI6_Init+0x58>
  {
    Error_Handler();
 800179c:	f7ff facc 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000a74 	.word	0x20000a74
 80017a8:	40015400 	.word	0x40015400

080017ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	; 0x50
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a9d      	ldr	r2, [pc, #628]	; (8001a40 <HAL_SPI_MspInit+0x294>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d15a      	bne.n	8001884 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80017d2:	4b9c      	ldr	r3, [pc, #624]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a9b      	ldr	r2, [pc, #620]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80017d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b99      	ldr	r3, [pc, #612]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
 80017ee:	4b95      	ldr	r3, [pc, #596]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a94      	ldr	r2, [pc, #592]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
 8001804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001806:	23e0      	movs	r3, #224	; 0xe0
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001816:	2305      	movs	r3, #5
 8001818:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800181e:	4619      	mov	r1, r3
 8001820:	4889      	ldr	r0, [pc, #548]	; (8001a48 <HAL_SPI_MspInit+0x29c>)
 8001822:	f002 f911 	bl	8003a48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001826:	4b89      	ldr	r3, [pc, #548]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 8001828:	4a89      	ldr	r2, [pc, #548]	; (8001a50 <HAL_SPI_MspInit+0x2a4>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800182c:	4b87      	ldr	r3, [pc, #540]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 800182e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001832:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001834:	4b85      	ldr	r3, [pc, #532]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183a:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001840:	4b82      	ldr	r3, [pc, #520]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 8001842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001846:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001848:	4b80      	ldr	r3, [pc, #512]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184e:	4b7f      	ldr	r3, [pc, #508]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001854:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800185a:	4b7c      	ldr	r3, [pc, #496]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001860:	4b7a      	ldr	r3, [pc, #488]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001866:	4879      	ldr	r0, [pc, #484]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 8001868:	f001 fe04 	bl	8003474 <HAL_DMA_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001872:	f7ff fa61 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a74      	ldr	r2, [pc, #464]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 800187a:	64da      	str	r2, [r3, #76]	; 0x4c
 800187c:	4a73      	ldr	r2, [pc, #460]	; (8001a4c <HAL_SPI_MspInit+0x2a0>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001882:	e218      	b.n	8001cb6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a72      	ldr	r2, [pc, #456]	; (8001a54 <HAL_SPI_MspInit+0x2a8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d178      	bne.n	8001980 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
 8001892:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a6b      	ldr	r2, [pc, #428]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b69      	ldr	r3, [pc, #420]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
 80018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a64      	ldr	r2, [pc, #400]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ca:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e2:	230c      	movs	r3, #12
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f2:	2305      	movs	r3, #5
 80018f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018fa:	4619      	mov	r1, r3
 80018fc:	4856      	ldr	r0, [pc, #344]	; (8001a58 <HAL_SPI_MspInit+0x2ac>)
 80018fe:	f002 f8a3 	bl	8003a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001914:	2305      	movs	r3, #5
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800191c:	4619      	mov	r1, r3
 800191e:	484f      	ldr	r0, [pc, #316]	; (8001a5c <HAL_SPI_MspInit+0x2b0>)
 8001920:	f002 f892 	bl	8003a48 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001924:	4b4e      	ldr	r3, [pc, #312]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001926:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_SPI_MspInit+0x2b8>)
 8001928:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800192a:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001930:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001944:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800194a:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001950:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800195c:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001962:	483f      	ldr	r0, [pc, #252]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001964:	f001 fd86 	bl	8003474 <HAL_DMA_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 800196e:	f7ff f9e3 	bl	8000d38 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a3a      	ldr	r2, [pc, #232]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 8001976:	649a      	str	r2, [r3, #72]	; 0x48
 8001978:	4a39      	ldr	r2, [pc, #228]	; (8001a60 <HAL_SPI_MspInit+0x2b4>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800197e:	e19a      	b.n	8001cb6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI3)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_SPI_MspInit+0x2bc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d174      	bne.n	8001a74 <HAL_SPI_MspInit+0x2c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a2c      	ldr	r2, [pc, #176]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 8001994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_SPI_MspInit+0x298>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	623b      	str	r3, [r7, #32]
 80019c0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019d4:	2306      	movs	r3, #6
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019dc:	4619      	mov	r1, r3
 80019de:	481e      	ldr	r0, [pc, #120]	; (8001a58 <HAL_SPI_MspInit+0x2ac>)
 80019e0:	f002 f832 	bl	8003a48 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_SPI_MspInit+0x2c4>)
 80019e8:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 80019fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a02:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001a22:	4812      	ldr	r0, [pc, #72]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a24:	f001 fd26 	bl	8003474 <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_SPI_MspInit+0x286>
      Error_Handler();
 8001a2e:	f7ff f983 	bl	8000d38 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a38:	4a0c      	ldr	r2, [pc, #48]	; (8001a6c <HAL_SPI_MspInit+0x2c0>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a3e:	e13a      	b.n	8001cb6 <HAL_SPI_MspInit+0x50a>
 8001a40:	40013000 	.word	0x40013000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	20000bd4 	.word	0x20000bd4
 8001a50:	40026410 	.word	0x40026410
 8001a54:	40003800 	.word	0x40003800
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	20000c94 	.word	0x20000c94
 8001a64:	40026070 	.word	0x40026070
 8001a68:	40003c00 	.word	0x40003c00
 8001a6c:	20000cf4 	.word	0x20000cf4
 8001a70:	40026010 	.word	0x40026010
  else if(spiHandle->Instance==SPI4)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a91      	ldr	r2, [pc, #580]	; (8001cc0 <HAL_SPI_MspInit+0x514>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d15a      	bne.n	8001b34 <HAL_SPI_MspInit+0x388>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a8f      	ldr	r2, [pc, #572]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a88      	ldr	r2, [pc, #544]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b86      	ldr	r3, [pc, #536]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001ab6:	2364      	movs	r3, #100	; 0x64
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	487d      	ldr	r0, [pc, #500]	; (8001cc8 <HAL_SPI_MspInit+0x51c>)
 8001ad2:	f001 ffb9 	bl	8003a48 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001ad6:	4b7d      	ldr	r3, [pc, #500]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001ad8:	4a7d      	ldr	r2, [pc, #500]	; (8001cd0 <HAL_SPI_MspInit+0x524>)
 8001ada:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8001adc:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001ade:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001ae2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae4:	4b79      	ldr	r3, [pc, #484]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aea:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af0:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af8:	4b74      	ldr	r3, [pc, #464]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afe:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001b04:	4b71      	ldr	r3, [pc, #452]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b0a:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b10:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001b16:	486d      	ldr	r0, [pc, #436]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001b18:	f001 fcac 	bl	8003474 <HAL_DMA_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_SPI_MspInit+0x37a>
      Error_Handler();
 8001b22:	f7ff f909 	bl	8000d38 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a68      	ldr	r2, [pc, #416]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001b2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b2c:	4a67      	ldr	r2, [pc, #412]	; (8001ccc <HAL_SPI_MspInit+0x520>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b32:	e0c0      	b.n	8001cb6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI5)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a66      	ldr	r2, [pc, #408]	; (8001cd4 <HAL_SPI_MspInit+0x528>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d15b      	bne.n	8001bf6 <HAL_SPI_MspInit+0x44a>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a5f      	ldr	r2, [pc, #380]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001b64:	f043 0320 	orr.w	r3, r3, #32
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b56      	ldr	r3, [pc, #344]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b88:	2305      	movs	r3, #5
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b90:	4619      	mov	r1, r3
 8001b92:	4851      	ldr	r0, [pc, #324]	; (8001cd8 <HAL_SPI_MspInit+0x52c>)
 8001b94:	f001 ff58 	bl	8003a48 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream5;
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001b9a:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_SPI_MspInit+0x534>)
 8001b9c:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
 8001b9e:	4b4f      	ldr	r3, [pc, #316]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001ba0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ba4:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bac:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb8:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bba:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8001bc6:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bcc:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd2:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8001bd8:	4840      	ldr	r0, [pc, #256]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bda:	f001 fc4b 	bl	8003474 <HAL_DMA_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_SPI_MspInit+0x43c>
      Error_Handler();
 8001be4:	f7ff f8a8 	bl	8000d38 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3c      	ldr	r2, [pc, #240]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bee:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <HAL_SPI_MspInit+0x530>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bf4:	e05f      	b.n	8001cb6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI6)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <HAL_SPI_MspInit+0x538>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d15a      	bne.n	8001cb6 <HAL_SPI_MspInit+0x50a>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	4a2e      	ldr	r2, [pc, #184]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c10:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_SPI_MspInit+0x518>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001c38:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c52:	4619      	mov	r1, r3
 8001c54:	4824      	ldr	r0, [pc, #144]	; (8001ce8 <HAL_SPI_MspInit+0x53c>)
 8001c56:	f001 fef7 	bl	8003a48 <HAL_GPIO_Init>
    hdma_spi6_rx.Instance = DMA2_Stream6;
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <HAL_SPI_MspInit+0x544>)
 8001c5e:	601a      	str	r2, [r3, #0]
    hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c66:	605a      	str	r2, [r3, #4]
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c7a:	611a      	str	r2, [r3, #16]
    hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
    hdma_spi6_rx.Init.Mode = DMA_NORMAL;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
    hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
 8001c9a:	4814      	ldr	r0, [pc, #80]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001c9c:	f001 fbea 	bl	8003474 <HAL_DMA_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_SPI_MspInit+0x4fe>
      Error_Handler();
 8001ca6:	f7ff f847 	bl	8000d38 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001cae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cb0:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_SPI_MspInit+0x540>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cb6:	bf00      	nop
 8001cb8:	3750      	adds	r7, #80	; 0x50
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40013400 	.word	0x40013400
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	20000a14 	.word	0x20000a14
 8001cd0:	40026458 	.word	0x40026458
 8001cd4:	40015000 	.word	0x40015000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	200009b4 	.word	0x200009b4
 8001ce0:	40026488 	.word	0x40026488
 8001ce4:	40015400 	.word	0x40015400
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	20000c34 	.word	0x20000c34
 8001cf0:	400264a0 	.word	0x400264a0

08001cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <NMI_Handler+0x4>

08001d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <MemManage_Handler+0x4>

08001d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d90:	f001 fa1a 	bl	80031c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <DMA1_Stream0_IRQHandler+0x10>)
 8001d9e:	f001 fc17 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000cf4 	.word	0x20000cf4

08001dac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <DMA1_Stream4_IRQHandler+0x10>)
 8001db2:	f001 fc0d 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000c94 	.word	0x20000c94

08001dc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <DMA2_Stream0_IRQHandler+0x10>)
 8001dc6:	f001 fc03 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000bd4 	.word	0x20000bd4

08001dd4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <DMA2_Stream3_IRQHandler+0x10>)
 8001dda:	f001 fbf9 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000a14 	.word	0x20000a14

08001de8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA2_Stream5_IRQHandler+0x10>)
 8001dee:	f001 fbef 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200009b4 	.word	0x200009b4

08001dfc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA2_Stream6_IRQHandler+0x10>)
 8001e02:	f001 fbe5 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000c34 	.word	0x20000c34

08001e10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e00a      	b.n	8001e38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e22:	f3af 8000 	nop.w
 8001e26:	4601      	mov	r1, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	60ba      	str	r2, [r7, #8]
 8001e2e:	b2ca      	uxtb	r2, r1
 8001e30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbf0      	blt.n	8001e22 <_read+0x12>
	}

return len;
 8001e40:	687b      	ldr	r3, [r7, #4]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e009      	b.n	8001e70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	60ba      	str	r2, [r7, #8]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fd99 	bl	800099c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbf1      	blt.n	8001e5c <_write+0x12>
	}
	return len;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_close>:

int _close(int file)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eaa:	605a      	str	r2, [r3, #4]
	return 0;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_isatty>:

int _isatty(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
	return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f003 fc3c 	bl	8005798 <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	220c      	movs	r2, #12
 8001f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20030000 	.word	0x20030000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	200000f0 	.word	0x200000f0
 8001f54:	20000db0 	.word	0x20000db0

08001f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <SystemInit+0x20>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <SystemInit+0x20>)
 8001f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <MX_USART1_UART_Init+0x50>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_USART1_UART_Init+0x4c>)
 8001fb4:	f003 f8fe 	bl	80051b4 <HAL_UART_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fbe:	f7fe febb 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000d54 	.word	0x20000d54
 8001fcc:	40011000 	.word	0x40011000

08001fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_UART_MspInit+0x84>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d12c      	bne.n	800204c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_UART_MspInit+0x88>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_UART_MspInit+0x88>)
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_UART_MspInit+0x88>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_UART_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_UART_MspInit+0x88>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_UART_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800202a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800203c:	2307      	movs	r3, #7
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <HAL_UART_MspInit+0x8c>)
 8002048:	f001 fcfe 	bl	8003a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40011000 	.word	0x40011000
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000

08002060 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <WIZCHIP_READ+0x94>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <WIZCHIP_READ+0x94>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <WIZCHIP_READ+0x94>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <WIZCHIP_READ+0x24>
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <WIZCHIP_READ+0x94>)
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d114      	bne.n	80020ae <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <WIZCHIP_READ+0x94>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	0c12      	lsrs	r2, r2, #16
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	4610      	mov	r0, r2
 8002090:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <WIZCHIP_READ+0x94>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	0a12      	lsrs	r2, r2, #8
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	4610      	mov	r0, r2
 800209e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <WIZCHIP_READ+0x94>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	4610      	mov	r0, r2
 80020aa:	4798      	blx	r3
 80020ac:	e011      	b.n	80020d2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <WIZCHIP_READ+0x94>)
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f107 020c 	add.w	r2, r7, #12
 80020cc:	2103      	movs	r1, #3
 80020ce:	4610      	mov	r0, r2
 80020d0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <WIZCHIP_READ+0x94>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4798      	blx	r3
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <WIZCHIP_READ+0x94>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <WIZCHIP_READ+0x94>)
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	4798      	blx	r3
   return ret;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000020 	.word	0x20000020

080020f8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <WIZCHIP_WRITE+0x98>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4798      	blx	r3
   WIZCHIP.CS._select();
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <WIZCHIP_WRITE+0x98>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <WIZCHIP_WRITE+0x98>)
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d119      	bne.n	8002154 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <WIZCHIP_WRITE+0x98>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	0c12      	lsrs	r2, r2, #16
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	4610      	mov	r0, r2
 800212c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <WIZCHIP_WRITE+0x98>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	0a12      	lsrs	r2, r2, #8
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	4610      	mov	r0, r2
 800213a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <WIZCHIP_WRITE+0x98>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	4610      	mov	r0, r2
 8002146:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <WIZCHIP_WRITE+0x98>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	4610      	mov	r0, r2
 8002150:	4798      	blx	r3
 8002152:	e013      	b.n	800217c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	b2db      	uxtb	r3, r3
 800215a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	b2db      	uxtb	r3, r3
 8002162:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <WIZCHIP_WRITE+0x98>)
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	2104      	movs	r1, #4
 8002178:	4610      	mov	r0, r2
 800217a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <WIZCHIP_WRITE+0x98>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002182:	4b03      	ldr	r3, [pc, #12]	; (8002190 <WIZCHIP_WRITE+0x98>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	4798      	blx	r3
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000020 	.word	0x20000020

08002194 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80021ae:	4b28      	ldr	r3, [pc, #160]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <WIZCHIP_READ_BUF+0x2a>
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d126      	bne.n	800220c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	0c12      	lsrs	r2, r2, #16
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	4610      	mov	r0, r2
 80021ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	0a12      	lsrs	r2, r2, #8
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	4610      	mov	r0, r2
 80021d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	4610      	mov	r0, r2
 80021e4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	82fb      	strh	r3, [r7, #22]
 80021ea:	e00a      	b.n	8002202 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	8afa      	ldrh	r2, [r7, #22]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	188c      	adds	r4, r1, r2
 80021f6:	4798      	blx	r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80021fc:	8afb      	ldrh	r3, [r7, #22]
 80021fe:	3301      	adds	r3, #1
 8002200:	82fb      	strh	r3, [r7, #22]
 8002202:	8afa      	ldrh	r2, [r7, #22]
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3f0      	bcc.n	80021ec <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800220a:	e017      	b.n	800223c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	b2db      	uxtb	r3, r3
 8002212:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	b2db      	uxtb	r3, r3
 800221a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f107 0210 	add.w	r2, r7, #16
 800222a:	2103      	movs	r1, #3
 800222c:	4610      	mov	r0, r2
 800222e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	88fa      	ldrh	r2, [r7, #6]
 8002236:	4611      	mov	r1, r2
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002242:	4b03      	ldr	r3, [pc, #12]	; (8002250 <WIZCHIP_READ_BUF+0xbc>)
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	4798      	blx	r3
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	20000020 	.word	0x20000020

08002254 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d126      	bne.n	80022cc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	0c12      	lsrs	r2, r2, #16
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	4610      	mov	r0, r2
 800228a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	0a12      	lsrs	r2, r2, #8
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4610      	mov	r0, r2
 8002298:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	4610      	mov	r0, r2
 80022a4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	82fb      	strh	r3, [r7, #22]
 80022aa:	e00a      	b.n	80022c2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	8afa      	ldrh	r2, [r7, #22]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	440a      	add	r2, r1
 80022b6:	7812      	ldrb	r2, [r2, #0]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80022bc:	8afb      	ldrh	r3, [r7, #22]
 80022be:	3301      	adds	r3, #1
 80022c0:	82fb      	strh	r3, [r7, #22]
 80022c2:	8afa      	ldrh	r2, [r7, #22]
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3f0      	bcc.n	80022ac <WIZCHIP_WRITE_BUF+0x58>
 80022ca:	e017      	b.n	80022fc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	f107 0210 	add.w	r2, r7, #16
 80022ea:	2103      	movs	r1, #3
 80022ec:	4610      	mov	r0, r2
 80022ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	4611      	mov	r1, r2
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <WIZCHIP_WRITE_BUF+0xbc>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4798      	blx	r3
}
 8002308:	bf00      	nop
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000020 	.word	0x20000020

08002314 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800231e:	2300      	movs	r3, #0
 8002320:	81fb      	strh	r3, [r7, #14]
 8002322:	2300      	movs	r3, #0
 8002324:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3301      	adds	r3, #1
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fe94 	bl	8002060 <WIZCHIP_READ>
 8002338:	4603      	mov	r3, r0
 800233a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b29c      	uxth	r4, r3
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3301      	adds	r3, #1
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fe86 	bl	8002060 <WIZCHIP_READ>
 8002354:	4603      	mov	r3, r0
 8002356:	b29b      	uxth	r3, r3
 8002358:	4423      	add	r3, r4
 800235a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3301      	adds	r3, #1
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fe76 	bl	8002060 <WIZCHIP_READ>
 8002374:	4603      	mov	r3, r0
 8002376:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002378:	89fb      	ldrh	r3, [r7, #14]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	b29c      	uxth	r4, r3
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3301      	adds	r3, #1
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe68 	bl	8002060 <WIZCHIP_READ>
 8002390:	4603      	mov	r3, r0
 8002392:	b29b      	uxth	r3, r3
 8002394:	4423      	add	r3, r4
 8002396:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002398:	89fa      	ldrh	r2, [r7, #14]
 800239a:	89bb      	ldrh	r3, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d1c2      	bne.n	8002326 <getSn_TX_FSR+0x12>
   return val;
 80023a0:	89fb      	ldrh	r3, [r7, #14]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}

080023aa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80023aa:	b590      	push	{r4, r7, lr}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	81fb      	strh	r3, [r7, #14]
 80023b8:	2300      	movs	r3, #0
 80023ba:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	3301      	adds	r3, #1
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fe49 	bl	8002060 <WIZCHIP_READ>
 80023ce:	4603      	mov	r3, r0
 80023d0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80023d2:	89bb      	ldrh	r3, [r7, #12]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b29c      	uxth	r4, r3
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	3301      	adds	r3, #1
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe3b 	bl	8002060 <WIZCHIP_READ>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4423      	add	r3, r4
 80023f0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80023f2:	89bb      	ldrh	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01a      	beq.n	800242e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	3301      	adds	r3, #1
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fe2b 	bl	8002060 <WIZCHIP_READ>
 800240a:	4603      	mov	r3, r0
 800240c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b29c      	uxth	r4, r3
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	3301      	adds	r3, #1
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fe1d 	bl	8002060 <WIZCHIP_READ>
 8002426:	4603      	mov	r3, r0
 8002428:	b29b      	uxth	r3, r3
 800242a:	4423      	add	r3, r4
 800242c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800242e:	89fa      	ldrh	r2, [r7, #14]
 8002430:	89bb      	ldrh	r3, [r7, #12]
 8002432:	429a      	cmp	r2, r3
 8002434:	d1c2      	bne.n	80023bc <getSn_RX_RSR+0x12>
   return val;
 8002436:	89fb      	ldrh	r3, [r7, #14]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
 800244c:	4613      	mov	r3, r2
 800244e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d048      	beq.n	80024f0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	3301      	adds	r3, #1
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fdf8 	bl	8002060 <WIZCHIP_READ>
 8002470:	4603      	mov	r3, r0
 8002472:	b29b      	uxth	r3, r3
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b29c      	uxth	r4, r3
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	3301      	adds	r3, #1
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fdeb 	bl	8002060 <WIZCHIP_READ>
 800248a:	4603      	mov	r3, r0
 800248c:	b29b      	uxth	r3, r3
 800248e:	4423      	add	r3, r4
 8002490:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	79fa      	ldrb	r2, [r7, #7]
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	3202      	adds	r2, #2
 800249c:	00d2      	lsls	r2, r2, #3
 800249e:	4413      	add	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80024a2:	88bb      	ldrh	r3, [r7, #4]
 80024a4:	461a      	mov	r2, r3
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	68b8      	ldr	r0, [r7, #8]
 80024aa:	f7ff fed3 	bl	8002254 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80024ae:	89fa      	ldrh	r2, [r7, #14]
 80024b0:	88bb      	ldrh	r3, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3301      	adds	r3, #1
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80024c2:	461a      	mov	r2, r3
 80024c4:	89fb      	ldrh	r3, [r7, #14]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f7ff fe12 	bl	80020f8 <WIZCHIP_WRITE>
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3301      	adds	r3, #1
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80024e0:	461a      	mov	r2, r3
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7ff fe05 	bl	80020f8 <WIZCHIP_WRITE>
 80024ee:	e000      	b.n	80024f2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80024f0:	bf00      	nop
}
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd90      	pop	{r4, r7, pc}

080024f8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	4613      	mov	r3, r2
 8002506:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002510:	88bb      	ldrh	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d048      	beq.n	80025a8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	3301      	adds	r3, #1
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fd9c 	bl	8002060 <WIZCHIP_READ>
 8002528:	4603      	mov	r3, r0
 800252a:	b29b      	uxth	r3, r3
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b29c      	uxth	r4, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	3301      	adds	r3, #1
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fd8f 	bl	8002060 <WIZCHIP_READ>
 8002542:	4603      	mov	r3, r0
 8002544:	b29b      	uxth	r3, r3
 8002546:	4423      	add	r3, r4
 8002548:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800254a:	89fb      	ldrh	r3, [r7, #14]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	79fa      	ldrb	r2, [r7, #7]
 8002550:	0092      	lsls	r2, r2, #2
 8002552:	3203      	adds	r2, #3
 8002554:	00d2      	lsls	r2, r2, #3
 8002556:	4413      	add	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800255a:	88bb      	ldrh	r3, [r7, #4]
 800255c:	461a      	mov	r2, r3
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	68b8      	ldr	r0, [r7, #8]
 8002562:	f7ff fe17 	bl	8002194 <WIZCHIP_READ_BUF>
   ptr += len;
 8002566:	89fa      	ldrh	r2, [r7, #14]
 8002568:	88bb      	ldrh	r3, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	3301      	adds	r3, #1
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800257a:	461a      	mov	r2, r3
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b29b      	uxth	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f7ff fdb6 	bl	80020f8 <WIZCHIP_WRITE>
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	3301      	adds	r3, #1
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002598:	461a      	mov	r2, r3
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f7ff fda9 	bl	80020f8 <WIZCHIP_WRITE>
 80025a6:	e000      	b.n	80025aa <wiz_recv_data+0xb2>
   if(len == 0) return;
 80025a8:	bf00      	nop
}
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd90      	pop	{r4, r7, pc}

080025b0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
 8002624:	2300      	movs	r3, #0
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	807b      	strh	r3, [r7, #2]
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	807b      	strh	r3, [r7, #2]
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <reg_wizchip_cs_cbfunc+0x16>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <reg_wizchip_cs_cbfunc+0x40>)
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <reg_wizchip_cs_cbfunc+0x44>)
 8002692:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <reg_wizchip_cs_cbfunc+0x40>)
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <reg_wizchip_cs_cbfunc+0x48>)
 8002698:	619a      	str	r2, [r3, #24]
 800269a:	e006      	b.n	80026aa <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <reg_wizchip_cs_cbfunc+0x40>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <reg_wizchip_cs_cbfunc+0x40>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6193      	str	r3, [r2, #24]
   }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000020 	.word	0x20000020
 80026bc:	080025cd 	.word	0x080025cd
 80026c0:	080025db 	.word	0x080025db

080026c4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80026ce:	bf00      	nop
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <reg_wizchip_spi_cbfunc+0x4c>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f9      	beq.n	80026d0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <reg_wizchip_spi_cbfunc+0x24>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <reg_wizchip_spi_cbfunc+0x4c>)
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <reg_wizchip_spi_cbfunc+0x50>)
 80026ec:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <reg_wizchip_spi_cbfunc+0x4c>)
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <reg_wizchip_spi_cbfunc+0x54>)
 80026f2:	621a      	str	r2, [r3, #32]
 80026f4:	e006      	b.n	8002704 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80026f6:	4a06      	ldr	r2, [pc, #24]	; (8002710 <reg_wizchip_spi_cbfunc+0x4c>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <reg_wizchip_spi_cbfunc+0x4c>)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6213      	str	r3, [r2, #32]
   }
}
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20000020 	.word	0x20000020
 8002714:	08002621 	.word	0x08002621
 8002718:	08002631 	.word	0x08002631

0800271c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002726:	bf00      	nop
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f9      	beq.n	8002728 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <reg_wizchip_spiburst_cbfunc+0x24>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <reg_wizchip_spiburst_cbfunc+0x50>)
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <reg_wizchip_spiburst_cbfunc+0x54>)
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
 800274c:	e006      	b.n	800275c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800274e:	4a06      	ldr	r2, [pc, #24]	; (8002768 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	20000020 	.word	0x20000020
 800276c:	08002647 	.word	0x08002647
 8002770:	0800265f 	.word	0x0800265f

08002774 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	f200 80c2 	bhi.w	8002918 <ctlwizchip+0x1a4>
 8002794:	a201      	add	r2, pc, #4	; (adr r2, 800279c <ctlwizchip+0x28>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027dd 	.word	0x080027dd
 80027a0:	080027e3 	.word	0x080027e3
 80027a4:	0800280f 	.word	0x0800280f
 80027a8:	08002803 	.word	0x08002803
 80027ac:	0800281d 	.word	0x0800281d
 80027b0:	08002829 	.word	0x08002829
 80027b4:	08002837 	.word	0x08002837
 80027b8:	0800285d 	.word	0x0800285d
 80027bc:	08002883 	.word	0x08002883
 80027c0:	080028bd 	.word	0x080028bd
 80027c4:	080028c3 	.word	0x080028c3
 80027c8:	080028cb 	.word	0x080028cb
 80027cc:	0800291f 	.word	0x0800291f
 80027d0:	080028d3 	.word	0x080028d3
 80027d4:	080028e1 	.word	0x080028e1
 80027d8:	080028fd 	.word	0x080028fd
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80027dc:	f000 f8e6 	bl	80029ac <wizchip_sw_reset>
         break;
 80027e0:	e09e      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3308      	adds	r3, #8
 80027f0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f923 	bl	8002a44 <wizchip_init>
 80027fe:	4603      	mov	r3, r0
 8002800:	e08f      	b.n	8002922 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f9a8 	bl	8002b5c <wizchip_clrinterrupt>
         break;
 800280c:	e088      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800280e:	f000 f9c3 	bl	8002b98 <wizchip_getinterrupt>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	801a      	strh	r2, [r3, #0]
         break;
 800281a:	e081      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f9de 	bl	8002be2 <wizchip_setinterruptmask>
         break;         
 8002826:	e07b      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002828:	f000 f9f6 	bl	8002c18 <wizchip_getinterruptmask>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	801a      	strh	r2, [r3, #0]
         break;
 8002834:	e074      	b.n	8002920 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29b      	uxth	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4619      	mov	r1, r3
 8002842:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002846:	f7ff fc57 	bl	80020f8 <WIZCHIP_WRITE>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002856:	f7ff fc4f 	bl	80020f8 <WIZCHIP_WRITE>
         break;
 800285a:	e061      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 800285c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002860:	f7ff fbfe 	bl	8002060 <WIZCHIP_READ>
 8002864:	4603      	mov	r3, r0
 8002866:	b29b      	uxth	r3, r3
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	b29c      	uxth	r4, r3
 800286c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002870:	f7ff fbf6 	bl	8002060 <WIZCHIP_READ>
 8002874:	4603      	mov	r3, r0
 8002876:	b29b      	uxth	r3, r3
 8002878:	4423      	add	r3, r4
 800287a:	b29a      	uxth	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	801a      	strh	r2, [r3, #0]
         break;
 8002880:	e04e      	b.n	8002920 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <ctlwizchip+0x1b8>)
 8002884:	789a      	ldrb	r2, [r3, #2]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a27      	ldr	r2, [pc, #156]	; (800292c <ctlwizchip+0x1b8>)
 8002890:	78d2      	ldrb	r2, [r2, #3]
 8002892:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	3302      	adds	r3, #2
 8002898:	4a24      	ldr	r2, [pc, #144]	; (800292c <ctlwizchip+0x1b8>)
 800289a:	7912      	ldrb	r2, [r2, #4]
 800289c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	3303      	adds	r3, #3
 80028a2:	4a22      	ldr	r2, [pc, #136]	; (800292c <ctlwizchip+0x1b8>)
 80028a4:	7952      	ldrb	r2, [r2, #5]
 80028a6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4a1f      	ldr	r2, [pc, #124]	; (800292c <ctlwizchip+0x1b8>)
 80028ae:	7992      	ldrb	r2, [r2, #6]
 80028b0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3305      	adds	r3, #5
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
         break;
 80028ba:	e031      	b.n	8002920 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80028bc:	f000 f9fe 	bl	8002cbc <wizphy_reset>
         break;
 80028c0:	e02e      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	f000 fa21 	bl	8002d0a <wizphy_setphyconf>
         break;
 80028c8:	e02a      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	f000 fa5f 	bl	8002d8e <wizphy_getphyconf>
         break;
 80028d0:	e026      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fac2 	bl	8002e60 <wizphy_setphypmode>
 80028dc:	4603      	mov	r3, r0
 80028de:	e020      	b.n	8002922 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80028e0:	f000 f9d3 	bl	8002c8a <wizphy_getphypmode>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2bff      	cmp	r3, #255	; 0xff
 80028ec:	d102      	bne.n	80028f4 <ctlwizchip+0x180>
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e016      	b.n	8002922 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	7dfa      	ldrb	r2, [r7, #23]
 80028f8:	701a      	strb	r2, [r3, #0]
         break;
 80028fa:	e011      	b.n	8002920 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80028fc:	f000 f9af 	bl	8002c5e <wizphy_getphylink>
 8002900:	4603      	mov	r3, r0
 8002902:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	2bff      	cmp	r3, #255	; 0xff
 8002908:	d102      	bne.n	8002910 <ctlwizchip+0x19c>
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e008      	b.n	8002922 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	7dfa      	ldrb	r2, [r7, #23]
 8002914:	701a      	strb	r2, [r3, #0]
         break;
 8002916:	e003      	b.n	8002920 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
 800291c:	e001      	b.n	8002922 <ctlwizchip+0x1ae>
         break;
 800291e:	bf00      	nop
   }
   return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	20000020 	.word	0x20000020

08002930 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d82c      	bhi.n	800299c <ctlnetwork+0x6c>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <ctlnetwork+0x18>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002961 	.word	0x08002961
 800294c:	08002969 	.word	0x08002969
 8002950:	08002971 	.word	0x08002971
 8002954:	0800297f 	.word	0x0800297f
 8002958:	0800298d 	.word	0x0800298d
 800295c:	08002995 	.word	0x08002995
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f000 fac7 	bl	8002ef4 <wizchip_setnetinfo>
         break;
 8002966:	e01c      	b.n	80029a2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002968:	6838      	ldr	r0, [r7, #0]
 800296a:	f000 fb03 	bl	8002f74 <wizchip_getnetinfo>
         break;
 800296e:	e018      	b.n	80029a2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fb3d 	bl	8002ff4 <wizchip_setnetmode>
 800297a:	4603      	mov	r3, r0
 800297c:	e012      	b.n	80029a4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800297e:	f000 fb5b 	bl	8003038 <wizchip_getnetmode>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	701a      	strb	r2, [r3, #0]
         break;
 800298a:	e00a      	b.n	80029a2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800298c:	6838      	ldr	r0, [r7, #0]
 800298e:	f000 fb5b 	bl	8003048 <wizchip_settimeout>
         break;
 8002992:	e006      	b.n	80029a2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002994:	6838      	ldr	r0, [r7, #0]
 8002996:	f000 fb78 	bl	800308a <wizchip_gettimeout>
         break;
 800299a:	e002      	b.n	80029a2 <ctlnetwork+0x72>
      default:
         return -1;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
 80029a0:	e000      	b.n	80029a4 <ctlnetwork+0x74>
   }
   return 0;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2206      	movs	r2, #6
 80029b6:	4619      	mov	r1, r3
 80029b8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80029bc:	f7ff fbea 	bl	8002194 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2204      	movs	r2, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029cc:	f7ff fbe2 	bl	8002194 <WIZCHIP_READ_BUF>
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	2204      	movs	r2, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80029dc:	f7ff fbda 	bl	8002194 <WIZCHIP_READ_BUF>
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	2204      	movs	r2, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80029ec:	f7ff fbd2 	bl	8002194 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7ff fb80 	bl	80020f8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff fb31 	bl	8002060 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2206      	movs	r2, #6
 8002a02:	4619      	mov	r1, r3
 8002a04:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a08:	f7ff fc24 	bl	8002254 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2204      	movs	r2, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a18:	f7ff fc1c 	bl	8002254 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	2204      	movs	r2, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a28:	f7ff fc14 	bl	8002254 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	2204      	movs	r2, #4
 8002a32:	4619      	mov	r1, r3
 8002a34:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a38:	f7ff fc0c 	bl	8002254 <WIZCHIP_WRITE_BUF>
}
 8002a3c:	bf00      	nop
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002a52:	f7ff ffab 	bl	80029ac <wizchip_sw_reset>
   if(txsize)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03b      	beq.n	8002ad4 <wizchip_init+0x90>
   {
      tmp = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e015      	b.n	8002a92 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	4413      	add	r3, r2
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	dd02      	ble.n	8002a86 <wizchip_init+0x42>
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e066      	b.n	8002b54 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	2b07      	cmp	r3, #7
 8002a98:	dde5      	ble.n	8002a66 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	e015      	b.n	8002acc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7ff fb1c 	bl	80020f8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad0:	2b07      	cmp	r3, #7
 8002ad2:	dde5      	ble.n	8002aa0 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d03b      	beq.n	8002b52 <wizchip_init+0x10e>
   {
      tmp = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e015      	b.n	8002b10 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	7bbb      	ldrb	r3, [r7, #14]
 8002af0:	4413      	add	r3, r2
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	dd02      	ble.n	8002b04 <wizchip_init+0xc0>
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e027      	b.n	8002b54 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b14:	2b07      	cmp	r3, #7
 8002b16:	dde5      	ble.n	8002ae4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	e015      	b.n	8002b4a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	3301      	adds	r3, #1
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7ff fadd 	bl	80020f8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	2b07      	cmp	r3, #7
 8002b50:	dde5      	ble.n	8002b1e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	f023 030f 	bic.w	r3, r3, #15
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002b80:	f7ff faba 	bl	80020f8 <WIZCHIP_WRITE>
   setSIR(sir);
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	4619      	mov	r1, r3
 8002b88:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002b8c:	f7ff fab4 	bl	80020f8 <WIZCHIP_WRITE>
#endif   
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002baa:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002bae:	f7ff fa57 	bl	8002060 <WIZCHIP_READ>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f023 030f 	bic.w	r3, r3, #15
 8002bb8:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002bba:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002bbe:	f7ff fa4f 	bl	8002060 <WIZCHIP_READ>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002bc6:	79bb      	ldrb	r3, [r7, #6]
 8002bc8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002bca:	88bb      	ldrh	r3, [r7, #4]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002bd8:	88bb      	ldrh	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002c00:	f7ff fa7a 	bl	80020f8 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002c04:	7bbb      	ldrb	r3, [r7, #14]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002c0c:	f7ff fa74 	bl	80020f8 <WIZCHIP_WRITE>
#endif   
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002c2a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002c2e:	f7ff fa17 	bl	8002060 <WIZCHIP_READ>
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002c36:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002c3a:	f7ff fa11 	bl	8002060 <WIZCHIP_READ>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002c42:	79bb      	ldrb	r3, [r7, #6]
 8002c44:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002c46:	88bb      	ldrh	r3, [r7, #4]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002c54:	88bb      	ldrh	r3, [r7, #4]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002c64:	2300      	movs	r3, #0
 8002c66:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002c68:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c6c:	f7ff f9f8 	bl	8002060 <WIZCHIP_READ>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002c94:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c98:	f7ff f9e2 	bl	8002060 <WIZCHIP_READ>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca2:	2b30      	cmp	r3, #48	; 0x30
 8002ca4:	d102      	bne.n	8002cac <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	71fb      	strb	r3, [r7, #7]
 8002caa:	e001      	b.n	8002cb0 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002cac:	2300      	movs	r3, #0
 8002cae:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002cc2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002cc6:	f7ff f9cb 	bl	8002060 <WIZCHIP_READ>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002cde:	f7ff fa0b 	bl	80020f8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002ce2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ce6:	f7ff f9bb 	bl	8002060 <WIZCHIP_READ>
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cf4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002cfe:	f7ff f9fb 	bl	80020f8 <WIZCHIP_WRITE>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d104      	bne.n	8002d28 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e003      	b.n	8002d30 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d104      	bne.n	8002d42 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e019      	b.n	8002d76 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	78db      	ldrb	r3, [r3, #3]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10d      	bne.n	8002d66 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d104      	bne.n	8002d5c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	f043 0318 	orr.w	r3, r3, #24
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	e00c      	b.n	8002d76 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	f043 0308 	orr.w	r3, r3, #8
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e007      	b.n	8002d76 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	789b      	ldrb	r3, [r3, #2]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d103      	bne.n	8002d76 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	f043 0310 	orr.w	r3, r3, #16
 8002d74:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d7e:	f7ff f9bb 	bl	80020f8 <WIZCHIP_WRITE>
   wizphy_reset();
 8002d82:	f7ff ff9b 	bl	8002cbc <wizphy_reset>
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002d9a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d9e:	f7ff f95f 	bl	8002060 <WIZCHIP_READ>
 8002da2:	4603      	mov	r3, r0
 8002da4:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	119b      	asrs	r3, r3, #6
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d001      	beq.n	8002dc4 <wizphy_getphyconf+0x36>
 8002dc0:	2b38      	cmp	r3, #56	; 0x38
 8002dc2:	d103      	bne.n	8002dcc <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	705a      	strb	r2, [r3, #1]
         break;
 8002dca:	e003      	b.n	8002dd4 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
         break;
 8002dd2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dda:	3b10      	subs	r3, #16
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	bf8c      	ite	hi
 8002de0:	2201      	movhi	r2, #1
 8002de2:	2200      	movls	r2, #0
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	2a00      	cmp	r2, #0
 8002de8:	d111      	bne.n	8002e0e <wizphy_getphyconf+0x80>
 8002dea:	2201      	movs	r2, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	709a      	strb	r2, [r3, #2]
         break;
 8002e0c:	e003      	b.n	8002e16 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	709a      	strb	r2, [r3, #2]
         break;
 8002e14:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1c:	3b08      	subs	r3, #8
 8002e1e:	2b18      	cmp	r3, #24
 8002e20:	bf8c      	ite	hi
 8002e22:	2201      	movhi	r2, #1
 8002e24:	2200      	movls	r2, #0
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	2a00      	cmp	r2, #0
 8002e2a:	d111      	bne.n	8002e50 <wizphy_getphyconf+0xc2>
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	70da      	strb	r2, [r3, #3]
         break;
 8002e4e:	e003      	b.n	8002e58 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	70da      	strb	r2, [r3, #3]
         break;
 8002e56:	bf00      	nop
   }
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002e6e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e72:	f7ff f8f5 	bl	8002060 <WIZCHIP_READ>
 8002e76:	4603      	mov	r3, r0
 8002e78:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <wizphy_setphypmode+0x2a>
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e030      	b.n	8002eec <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002e90:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d104      	bne.n	8002ea2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e003      	b.n	8002eaa <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002ea8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002eb2:	f7ff f921 	bl	80020f8 <WIZCHIP_WRITE>
   wizphy_reset();
 8002eb6:	f7ff ff01 	bl	8002cbc <wizphy_reset>
   tmp = getPHYCFGR();
 8002eba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ebe:	f7ff f8cf 	bl	8002060 <WIZCHIP_READ>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d106      	bne.n	8002eda <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <wizphy_setphypmode+0x88>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e008      	b.n	8002eec <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <wizphy_setphypmode+0x88>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e001      	b.n	8002eec <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2206      	movs	r2, #6
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002f06:	f7ff f9a5 	bl	8002254 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	330e      	adds	r3, #14
 8002f0e:	2204      	movs	r2, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f16:	f7ff f99d 	bl	8002254 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	330a      	adds	r3, #10
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002f26:	f7ff f995 	bl	8002254 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002f36:	f7ff f98d 	bl	8002254 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7c9a      	ldrb	r2, [r3, #18]
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <wizchip_setnetinfo+0x78>)
 8002f40:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7cda      	ldrb	r2, [r3, #19]
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <wizchip_setnetinfo+0x78>)
 8002f48:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	7d1a      	ldrb	r2, [r3, #20]
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <wizchip_setnetinfo+0x78>)
 8002f50:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7d5a      	ldrb	r2, [r3, #21]
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <wizchip_setnetinfo+0x78>)
 8002f58:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7d9a      	ldrb	r2, [r3, #22]
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <wizchip_setnetinfo+0x7c>)
 8002f60:	701a      	strb	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200000f4 	.word	0x200000f4
 8002f70:	200000f8 	.word	0x200000f8

08002f74 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2206      	movs	r2, #6
 8002f80:	4619      	mov	r1, r3
 8002f82:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002f86:	f7ff f905 	bl	8002194 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	330e      	adds	r3, #14
 8002f8e:	2204      	movs	r2, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f96:	f7ff f8fd 	bl	8002194 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	330a      	adds	r3, #10
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002fa6:	f7ff f8f5 	bl	8002194 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3306      	adds	r3, #6
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002fb6:	f7ff f8ed 	bl	8002194 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <wizchip_getnetinfo+0x78>)
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <wizchip_getnetinfo+0x78>)
 8002fc4:	785a      	ldrb	r2, [r3, #1]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <wizchip_getnetinfo+0x78>)
 8002fcc:	789a      	ldrb	r2, [r3, #2]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <wizchip_getnetinfo+0x78>)
 8002fd4:	78da      	ldrb	r2, [r3, #3]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <wizchip_getnetinfo+0x7c>)
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	759a      	strb	r2, [r3, #22]
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200000f4 	.word	0x200000f4
 8002ff0:	200000f8 	.word	0x200000f8

08002ff4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <wizchip_setnetmode+0x1e>
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
 8003010:	e00e      	b.n	8003030 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003012:	2000      	movs	r0, #0
 8003014:	f7ff f824 	bl	8002060 <WIZCHIP_READ>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	4313      	orrs	r3, r2
 8003022:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	4619      	mov	r1, r3
 8003028:	2000      	movs	r0, #0
 800302a:	f7ff f865 	bl	80020f8 <WIZCHIP_WRITE>
   return 0;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800303c:	2000      	movs	r0, #0
 800303e:	f7ff f80f 	bl	8002060 <WIZCHIP_READ>
 8003042:	4603      	mov	r3, r0
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}

08003048 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800305a:	f7ff f84d 	bl	80020f8 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	885b      	ldrh	r3, [r3, #2]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	b29b      	uxth	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800306e:	f7ff f843 	bl	80020f8 <WIZCHIP_WRITE>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	885b      	ldrh	r3, [r3, #2]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800307e:	f7ff f83b 	bl	80020f8 <WIZCHIP_WRITE>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003092:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003096:	f7fe ffe3 	bl	8002060 <WIZCHIP_READ>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80030a2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80030a6:	f7fe ffdb 	bl	8002060 <WIZCHIP_READ>
 80030aa:	4603      	mov	r3, r0
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	b29c      	uxth	r4, r3
 80030b2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80030b6:	f7fe ffd3 	bl	8002060 <WIZCHIP_READ>
 80030ba:	4603      	mov	r3, r0
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4423      	add	r3, r4
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	805a      	strh	r2, [r3, #2]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
	...

080030d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003108 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030d4:	480d      	ldr	r0, [pc, #52]	; (800310c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030d6:	490e      	ldr	r1, [pc, #56]	; (8003110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030d8:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030dc:	e002      	b.n	80030e4 <LoopCopyDataInit>

080030de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e2:	3304      	adds	r3, #4

080030e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e8:	d3f9      	bcc.n	80030de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ea:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030ec:	4c0b      	ldr	r4, [pc, #44]	; (800311c <LoopFillZerobss+0x26>)
  movs r3, #0
 80030ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f0:	e001      	b.n	80030f6 <LoopFillZerobss>

080030f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f4:	3204      	adds	r2, #4

080030f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f8:	d3fb      	bcc.n	80030f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030fa:	f7fe ff2d 	bl	8001f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030fe:	f002 fb51 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003102:	f7fd fc5d 	bl	80009c0 <main>
  bx  lr    
 8003106:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003108:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800310c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003110:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8003114:	08006aa0 	.word	0x08006aa0
  ldr r2, =_sbss
 8003118:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 800311c:	20000dac 	.word	0x20000dac

08003120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC_IRQHandler>
	...

08003124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_Init+0x40>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_Init+0x40>)
 800312e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_Init+0x40>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_Init+0x40>)
 800313a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_Init+0x40>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_Init+0x40>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314c:	2003      	movs	r0, #3
 800314e:	f000 f94f 	bl	80033f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003152:	2000      	movs	r0, #0
 8003154:	f000 f808 	bl	8003168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003158:	f7fe fdcc 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023c00 	.word	0x40023c00

08003168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_InitTick+0x54>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_InitTick+0x58>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f967 	bl	800345a <HAL_SYSTICK_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00e      	b.n	80031b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b0f      	cmp	r3, #15
 800319a:	d80a      	bhi.n	80031b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800319c:	2200      	movs	r2, #0
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f000 f92f 	bl	8003406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a8:	4a06      	ldr	r2, [pc, #24]	; (80031c4 <HAL_InitTick+0x5c>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	2000001c 	.word	0x2000001c
 80031c0:	20000050 	.word	0x20000050
 80031c4:	2000004c 	.word	0x2000004c

080031c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_IncTick+0x20>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_IncTick+0x24>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_IncTick+0x24>)
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000050 	.word	0x20000050
 80031ec:	20000d98 	.word	0x20000d98

080031f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return uwTick;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_GetTick+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000d98 	.word	0x20000d98

08003208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff ffee 	bl	80031f0 <HAL_GetTick>
 8003214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d005      	beq.n	800322e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_Delay+0x44>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800322e:	bf00      	nop
 8003230:	f7ff ffde 	bl	80031f0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d8f7      	bhi.n	8003230 <HAL_Delay+0x28>
  {
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000050 	.word	0x20000050

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	; (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	; (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033bc:	d301      	bcc.n	80033c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033be:	2301      	movs	r3, #1
 80033c0:	e00f      	b.n	80033e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c2:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <SysTick_Config+0x40>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ca:	210f      	movs	r1, #15
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f7ff ff8e 	bl	80032f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <SysTick_Config+0x40>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <SysTick_Config+0x40>)
 80033dc:	2207      	movs	r2, #7
 80033de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	e000e010 	.word	0xe000e010

080033f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff29 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003418:	f7ff ff3e 	bl	8003298 <__NVIC_GetPriorityGrouping>
 800341c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f7ff ff8e 	bl	8003344 <NVIC_EncodePriority>
 8003428:	4602      	mov	r2, r0
 800342a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff5d 	bl	80032f0 <__NVIC_SetPriority>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff31 	bl	80032b4 <__NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffa2 	bl	80033ac <SysTick_Config>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003480:	f7ff feb6 	bl	80031f0 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e099      	b.n	80035c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b0:	e00f      	b.n	80034d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b2:	f7ff fe9d 	bl	80031f0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d908      	bls.n	80034d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e078      	b.n	80035c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e8      	bne.n	80034b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_DMA_Init+0x158>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b04      	cmp	r3, #4
 800352a:	d107      	bne.n	800353c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4313      	orrs	r3, r2
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f023 0307 	bic.w	r3, r3, #7
 8003552:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b04      	cmp	r3, #4
 8003564:	d117      	bne.n	8003596 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f9e9 	bl	8003950 <DMA_CheckFifoParam>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003592:	2301      	movs	r3, #1
 8003594:	e016      	b.n	80035c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9a0 	bl	80038e4 <DMA_CalcBaseAndBitshift>
 80035a4:	4603      	mov	r3, r0
 80035a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	223f      	movs	r2, #63	; 0x3f
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	f010803f 	.word	0xf010803f

080035d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035dc:	4b92      	ldr	r3, [pc, #584]	; (8003828 <HAL_DMA_IRQHandler+0x258>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a92      	ldr	r2, [pc, #584]	; (800382c <HAL_DMA_IRQHandler+0x25c>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0a9b      	lsrs	r3, r3, #10
 80035e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	2208      	movs	r2, #8
 80035fc:	409a      	lsls	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01a      	beq.n	800363c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0204 	bic.w	r2, r2, #4
 8003622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	2208      	movs	r2, #8
 800362a:	409a      	lsls	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	2201      	movs	r2, #1
 8003642:	409a      	lsls	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f043 0202 	orr.w	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	2204      	movs	r2, #4
 8003678:	409a      	lsls	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d012      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2204      	movs	r2, #4
 8003696:	409a      	lsls	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	f043 0204 	orr.w	r2, r3, #4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	2210      	movs	r2, #16
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d043      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d03c      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2210      	movs	r2, #16
 80036cc:	409a      	lsls	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d018      	beq.n	8003712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d108      	bne.n	8003700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	e01f      	b.n	8003740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01b      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
 8003710:	e016      	b.n	8003740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0208 	bic.w	r2, r2, #8
 800372e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2220      	movs	r2, #32
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 808e 	beq.w	800386e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8086 	beq.w	800386e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	2220      	movs	r2, #32
 8003768:	409a      	lsls	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b05      	cmp	r3, #5
 8003778:	d136      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0216 	bic.w	r2, r2, #22
 8003788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_DMA_IRQHandler+0x1da>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0208 	bic.w	r2, r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	223f      	movs	r2, #63	; 0x3f
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d07d      	beq.n	80038da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
        }
        return;
 80037e6:	e078      	b.n	80038da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01c      	beq.n	8003830 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d108      	bne.n	8003816 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	2b00      	cmp	r3, #0
 800380a:	d030      	beq.n	800386e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
 8003814:	e02b      	b.n	800386e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d027      	beq.n	800386e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
 8003826:	e022      	b.n	800386e <HAL_DMA_IRQHandler+0x29e>
 8003828:	2000001c 	.word	0x2000001c
 800382c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10f      	bne.n	800385e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0210 	bic.w	r2, r2, #16
 800384c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	2b00      	cmp	r3, #0
 8003874:	d032      	beq.n	80038dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d022      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2205      	movs	r2, #5
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	3301      	adds	r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d307      	bcc.n	80038b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f2      	bne.n	800389a <HAL_DMA_IRQHandler+0x2ca>
 80038b4:	e000      	b.n	80038b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
 80038d8:	e000      	b.n	80038dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80038da:	bf00      	nop
    }
  }
}
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop

080038e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	3b10      	subs	r3, #16
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <DMA_CalcBaseAndBitshift+0x64>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <DMA_CalcBaseAndBitshift+0x68>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d909      	bls.n	8003926 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	1d1a      	adds	r2, r3, #4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	659a      	str	r2, [r3, #88]	; 0x58
 8003924:	e007      	b.n	8003936 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	aaaaaaab 	.word	0xaaaaaaab
 800394c:	080069f0 	.word	0x080069f0

08003950 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11f      	bne.n	80039aa <DMA_CheckFifoParam+0x5a>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d856      	bhi.n	8003a1e <DMA_CheckFifoParam+0xce>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <DMA_CheckFifoParam+0x28>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	08003989 	.word	0x08003989
 800397c:	0800399b 	.word	0x0800399b
 8003980:	08003989 	.word	0x08003989
 8003984:	08003a1f 	.word	0x08003a1f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d046      	beq.n	8003a22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003998:	e043      	b.n	8003a22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a2:	d140      	bne.n	8003a26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a8:	e03d      	b.n	8003a26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b2:	d121      	bne.n	80039f8 <DMA_CheckFifoParam+0xa8>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d837      	bhi.n	8003a2a <DMA_CheckFifoParam+0xda>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <DMA_CheckFifoParam+0x70>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039d7 	.word	0x080039d7
 80039c8:	080039d1 	.word	0x080039d1
 80039cc:	080039e9 	.word	0x080039e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e030      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d025      	beq.n	8003a2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e6:	e022      	b.n	8003a2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f0:	d11f      	bne.n	8003a32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039f6:	e01c      	b.n	8003a32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d903      	bls.n	8003a06 <DMA_CheckFifoParam+0xb6>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d003      	beq.n	8003a0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a04:	e018      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      break;
 8003a0a:	e015      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1c:	e00b      	b.n	8003a36 <DMA_CheckFifoParam+0xe6>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e00a      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
 8003a24:	e008      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      break;
 8003a26:	bf00      	nop
 8003a28:	e006      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e004      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e002      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
    }
  } 
  
  return status; 
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop

08003a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	e177      	b.n	8003d54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a64:	2201      	movs	r2, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	f040 8166 	bne.w	8003d4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d005      	beq.n	8003a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d130      	bne.n	8003afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 0201 	and.w	r2, r3, #1
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d017      	beq.n	8003b38 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d123      	bne.n	8003b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	08da      	lsrs	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3208      	adds	r2, #8
 8003b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	08da      	lsrs	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3208      	adds	r2, #8
 8003b86:	69b9      	ldr	r1, [r7, #24]
 8003b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	2203      	movs	r2, #3
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0203 	and.w	r2, r3, #3
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80c0 	beq.w	8003d4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_GPIO_Init+0x324>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4a65      	ldr	r2, [pc, #404]	; (8003d6c <HAL_GPIO_Init+0x324>)
 8003bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_GPIO_Init+0x324>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bea:	4a61      	ldr	r2, [pc, #388]	; (8003d70 <HAL_GPIO_Init+0x328>)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	220f      	movs	r2, #15
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a58      	ldr	r2, [pc, #352]	; (8003d74 <HAL_GPIO_Init+0x32c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d037      	beq.n	8003c86 <HAL_GPIO_Init+0x23e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a57      	ldr	r2, [pc, #348]	; (8003d78 <HAL_GPIO_Init+0x330>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d031      	beq.n	8003c82 <HAL_GPIO_Init+0x23a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a56      	ldr	r2, [pc, #344]	; (8003d7c <HAL_GPIO_Init+0x334>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d02b      	beq.n	8003c7e <HAL_GPIO_Init+0x236>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a55      	ldr	r2, [pc, #340]	; (8003d80 <HAL_GPIO_Init+0x338>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d025      	beq.n	8003c7a <HAL_GPIO_Init+0x232>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a54      	ldr	r2, [pc, #336]	; (8003d84 <HAL_GPIO_Init+0x33c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01f      	beq.n	8003c76 <HAL_GPIO_Init+0x22e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a53      	ldr	r2, [pc, #332]	; (8003d88 <HAL_GPIO_Init+0x340>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d019      	beq.n	8003c72 <HAL_GPIO_Init+0x22a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a52      	ldr	r2, [pc, #328]	; (8003d8c <HAL_GPIO_Init+0x344>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_GPIO_Init+0x226>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a51      	ldr	r2, [pc, #324]	; (8003d90 <HAL_GPIO_Init+0x348>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00d      	beq.n	8003c6a <HAL_GPIO_Init+0x222>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <HAL_GPIO_Init+0x34c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <HAL_GPIO_Init+0x21e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4f      	ldr	r2, [pc, #316]	; (8003d98 <HAL_GPIO_Init+0x350>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_GPIO_Init+0x21a>
 8003c5e:	2309      	movs	r3, #9
 8003c60:	e012      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c62:	230a      	movs	r3, #10
 8003c64:	e010      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c66:	2308      	movs	r3, #8
 8003c68:	e00e      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	e00c      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c6e:	2306      	movs	r3, #6
 8003c70:	e00a      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c72:	2305      	movs	r3, #5
 8003c74:	e008      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c76:	2304      	movs	r3, #4
 8003c78:	e006      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e004      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e002      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c86:	2300      	movs	r3, #0
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	f002 0203 	and.w	r2, r2, #3
 8003c8e:	0092      	lsls	r2, r2, #2
 8003c90:	4093      	lsls	r3, r2
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c98:	4935      	ldr	r1, [pc, #212]	; (8003d70 <HAL_GPIO_Init+0x328>)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca6:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cca:	4a34      	ldr	r2, [pc, #208]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cd0:	4b32      	ldr	r3, [pc, #200]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf4:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d1e:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3301      	adds	r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	f67f ae84 	bls.w	8003a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40013800 	.word	0x40013800
 8003d74:	40020000 	.word	0x40020000
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	40020800 	.word	0x40020800
 8003d80:	40020c00 	.word	0x40020c00
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40021400 	.word	0x40021400
 8003d8c:	40021800 	.word	0x40021800
 8003d90:	40021c00 	.word	0x40021c00
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40022400 	.word	0x40022400
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
 8003dac:	4613      	mov	r3, r2
 8003dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dbc:	e003      	b.n	8003dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	041a      	lsls	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e264      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d075      	beq.n	8003ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df2:	4ba3      	ldr	r3, [pc, #652]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d00c      	beq.n	8003e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfe:	4ba0      	ldr	r3, [pc, #640]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d112      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0a:	4b9d      	ldr	r3, [pc, #628]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	4b99      	ldr	r3, [pc, #612]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05b      	beq.n	8003edc <HAL_RCC_OscConfig+0x108>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d157      	bne.n	8003edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e23f      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCC_OscConfig+0x74>
 8003e3a:	4b91      	ldr	r3, [pc, #580]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a90      	ldr	r2, [pc, #576]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x98>
 8003e52:	4b8b      	ldr	r3, [pc, #556]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a8a      	ldr	r2, [pc, #552]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b88      	ldr	r3, [pc, #544]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a87      	ldr	r2, [pc, #540]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xb0>
 8003e6c:	4b84      	ldr	r3, [pc, #528]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a83      	ldr	r2, [pc, #524]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b81      	ldr	r3, [pc, #516]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a80      	ldr	r2, [pc, #512]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7ff f9b0 	bl	80031f0 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e94:	f7ff f9ac 	bl	80031f0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e204      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b76      	ldr	r3, [pc, #472]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xc0>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7ff f99c 	bl	80031f0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7ff f998 	bl	80031f0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1f0      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	4b6c      	ldr	r3, [pc, #432]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0xe8>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d063      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eea:	4b65      	ldr	r3, [pc, #404]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b62      	ldr	r3, [pc, #392]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d116      	bne.n	8003f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCC_OscConfig+0x152>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1c4      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4b56      	ldr	r3, [pc, #344]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4952      	ldr	r1, [pc, #328]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	e03a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f44:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCC_OscConfig+0x2b0>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7ff f951 	bl	80031f0 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f52:	f7ff f94d 	bl	80031f0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1a5      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	4b46      	ldr	r3, [pc, #280]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b43      	ldr	r3, [pc, #268]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4940      	ldr	r1, [pc, #256]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]
 8003f84:	e015      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <HAL_RCC_OscConfig+0x2b0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7ff f930 	bl	80031f0 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f94:	f7ff f92c 	bl	80031f0 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e184      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d030      	beq.n	8004020 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc6:	4b30      	ldr	r3, [pc, #192]	; (8004088 <HAL_RCC_OscConfig+0x2b4>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7ff f910 	bl	80031f0 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd4:	f7ff f90c 	bl	80031f0 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e164      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	4b26      	ldr	r3, [pc, #152]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x200>
 8003ff2:	e015      	b.n	8004020 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <HAL_RCC_OscConfig+0x2b4>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7ff f8f9 	bl	80031f0 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004002:	f7ff f8f5 	bl	80031f0 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e14d      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a0 	beq.w	800416e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	; 0x40
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x2b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d121      	bne.n	80040ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_RCC_OscConfig+0x2b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <HAL_RCC_OscConfig+0x2b8>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7ff f8bb 	bl	80031f0 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	e011      	b.n	80040a2 <HAL_RCC_OscConfig+0x2ce>
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	42470000 	.word	0x42470000
 8004088:	42470e80 	.word	0x42470e80
 800408c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7ff f8ae 	bl	80031f0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e106      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b85      	ldr	r3, [pc, #532]	; (80042b8 <HAL_RCC_OscConfig+0x4e4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
 80040b6:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a80      	ldr	r2, [pc, #512]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	e01c      	b.n	80040fe <HAL_RCC_OscConfig+0x32a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0x312>
 80040cc:	4b7b      	ldr	r3, [pc, #492]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a7a      	ldr	r2, [pc, #488]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	4b78      	ldr	r3, [pc, #480]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a77      	ldr	r2, [pc, #476]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	e00b      	b.n	80040fe <HAL_RCC_OscConfig+0x32a>
 80040e6:	4b75      	ldr	r3, [pc, #468]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a74      	ldr	r2, [pc, #464]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	4b72      	ldr	r3, [pc, #456]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a71      	ldr	r2, [pc, #452]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7ff f873 	bl	80031f0 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7ff f86f 	bl	80031f0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0c5      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCC_OscConfig+0x33a>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7ff f85d 	bl	80031f0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7ff f859 	bl	80031f0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0af      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	4b5a      	ldr	r3, [pc, #360]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004162:	4b56      	ldr	r3, [pc, #344]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4a55      	ldr	r2, [pc, #340]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 809b 	beq.w	80042ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004178:	4b50      	ldr	r3, [pc, #320]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d05c      	beq.n	800423e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d141      	bne.n	8004210 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418c:	4b4c      	ldr	r3, [pc, #304]	; (80042c0 <HAL_RCC_OscConfig+0x4ec>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7ff f82d 	bl	80031f0 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419a:	f7ff f829 	bl	80031f0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e081      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ac:	4b43      	ldr	r3, [pc, #268]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	019b      	lsls	r3, r3, #6
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	3b01      	subs	r3, #1
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	4937      	ldr	r1, [pc, #220]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e2:	4b37      	ldr	r3, [pc, #220]	; (80042c0 <HAL_RCC_OscConfig+0x4ec>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7ff f802 	bl	80031f0 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fe fffe 	bl	80031f0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e056      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x41c>
 800420e:	e04e      	b.n	80042ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x4ec>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fe ffeb 	bl	80031f0 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421e:	f7fe ffe7 	bl	80031f0 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e03f      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x44a>
 800423c:	e037      	b.n	80042ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e032      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <HAL_RCC_OscConfig+0x4e8>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d028      	beq.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d121      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d11a      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800427a:	4013      	ands	r3, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004280:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	3b01      	subs	r3, #1
 8004294:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004296:	429a      	cmp	r2, r3
 8004298:	d107      	bne.n	80042aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40007000 	.word	0x40007000
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470060 	.word	0x42470060

080042c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0cc      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d8:	4b68      	ldr	r3, [pc, #416]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d90c      	bls.n	8004300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b65      	ldr	r3, [pc, #404]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b63      	ldr	r3, [pc, #396]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b8      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a58      	ldr	r2, [pc, #352]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004330:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a52      	ldr	r2, [pc, #328]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800433a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433c:	4b50      	ldr	r3, [pc, #320]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	494d      	ldr	r1, [pc, #308]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d044      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d119      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e07f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d003      	beq.n	8004382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437e:	2b03      	cmp	r3, #3
 8004380:	d107      	bne.n	8004392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e06f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e067      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a2:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f023 0203 	bic.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4934      	ldr	r1, [pc, #208]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b4:	f7fe ff1c 	bl	80031f0 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043bc:	f7fe ff18 	bl	80031f0 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e04f      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d2:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 020c 	and.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d1eb      	bne.n	80043bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d20c      	bcs.n	800440c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e032      	b.n	8004472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4916      	ldr	r1, [pc, #88]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	490e      	ldr	r1, [pc, #56]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800444a:	f000 f821 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800444e:	4602      	mov	r2, r0
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	490a      	ldr	r1, [pc, #40]	; (8004484 <HAL_RCC_ClockConfig+0x1c0>)
 800445c:	5ccb      	ldrb	r3, [r1, r3]
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fe7c 	bl	8003168 <HAL_InitTick>

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023c00 	.word	0x40023c00
 8004480:	40023800 	.word	0x40023800
 8004484:	080069d8 	.word	0x080069d8
 8004488:	2000001c 	.word	0x2000001c
 800448c:	2000004c 	.word	0x2000004c

08004490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	b5b0      	push	{r4, r5, r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004496:	2100      	movs	r1, #0
 8004498:	6079      	str	r1, [r7, #4]
 800449a:	2100      	movs	r1, #0
 800449c:	60f9      	str	r1, [r7, #12]
 800449e:	2100      	movs	r1, #0
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044a2:	2100      	movs	r1, #0
 80044a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a6:	4952      	ldr	r1, [pc, #328]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a8:	6889      	ldr	r1, [r1, #8]
 80044aa:	f001 010c 	and.w	r1, r1, #12
 80044ae:	2908      	cmp	r1, #8
 80044b0:	d00d      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x3e>
 80044b2:	2908      	cmp	r1, #8
 80044b4:	f200 8094 	bhi.w	80045e0 <HAL_RCC_GetSysClockFreq+0x150>
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d002      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0x32>
 80044bc:	2904      	cmp	r1, #4
 80044be:	d003      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0x38>
 80044c0:	e08e      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c2:	4b4c      	ldr	r3, [pc, #304]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80044c4:	60bb      	str	r3, [r7, #8]
       break;
 80044c6:	e08e      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c8:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80044ca:	60bb      	str	r3, [r7, #8]
      break;
 80044cc:	e08b      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ce:	4948      	ldr	r1, [pc, #288]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044d0:	6849      	ldr	r1, [r1, #4]
 80044d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80044d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d8:	4945      	ldr	r1, [pc, #276]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044da:	6849      	ldr	r1, [r1, #4]
 80044dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044e0:	2900      	cmp	r1, #0
 80044e2:	d024      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e4:	4942      	ldr	r1, [pc, #264]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044e6:	6849      	ldr	r1, [r1, #4]
 80044e8:	0989      	lsrs	r1, r1, #6
 80044ea:	4608      	mov	r0, r1
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044f4:	f04f 0500 	mov.w	r5, #0
 80044f8:	ea00 0204 	and.w	r2, r0, r4
 80044fc:	ea01 0305 	and.w	r3, r1, r5
 8004500:	493d      	ldr	r1, [pc, #244]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004502:	fb01 f003 	mul.w	r0, r1, r3
 8004506:	2100      	movs	r1, #0
 8004508:	fb01 f102 	mul.w	r1, r1, r2
 800450c:	1844      	adds	r4, r0, r1
 800450e:	493a      	ldr	r1, [pc, #232]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004510:	fba2 0101 	umull	r0, r1, r2, r1
 8004514:	1863      	adds	r3, r4, r1
 8004516:	4619      	mov	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	f7fb feb6 	bl	8000290 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	e04a      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	461a      	mov	r2, r3
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	ea02 0400 	and.w	r4, r2, r0
 8004546:	ea03 0501 	and.w	r5, r3, r1
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	014b      	lsls	r3, r1, #5
 8004558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800455c:	0142      	lsls	r2, r0, #5
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	1b00      	subs	r0, r0, r4
 8004564:	eb61 0105 	sbc.w	r1, r1, r5
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	018b      	lsls	r3, r1, #6
 8004572:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004576:	0182      	lsls	r2, r0, #6
 8004578:	1a12      	subs	r2, r2, r0
 800457a:	eb63 0301 	sbc.w	r3, r3, r1
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	00d9      	lsls	r1, r3, #3
 8004588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800458c:	00d0      	lsls	r0, r2, #3
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	1912      	adds	r2, r2, r4
 8004594:	eb45 0303 	adc.w	r3, r5, r3
 8004598:	f04f 0000 	mov.w	r0, #0
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	0299      	lsls	r1, r3, #10
 80045a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045a6:	0290      	lsls	r0, r2, #10
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	f7fb fe6a 	bl	8000290 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	60bb      	str	r3, [r7, #8]
      break;
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80045e2:	60bb      	str	r3, [r7, #8]
      break;
 80045e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e6:	68bb      	ldr	r3, [r7, #8]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bdb0      	pop	{r4, r5, r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	00f42400 	.word	0x00f42400
 80045f8:	017d7840 	.word	0x017d7840

080045fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCC_GetHCLKFreq+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2000001c 	.word	0x2000001c

08004614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004618:	f7ff fff0 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0a9b      	lsrs	r3, r3, #10
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	080069e8 	.word	0x080069e8

0800463c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004640:	f7ff ffdc 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0b5b      	lsrs	r3, r3, #13
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4903      	ldr	r1, [pc, #12]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40023800 	.word	0x40023800
 8004660:	080069e8 	.word	0x080069e8

08004664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e07b      	b.n	800476e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	d108      	bne.n	8004690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004686:	d009      	beq.n	800469c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	61da      	str	r2, [r3, #28]
 800468e:	e005      	b.n	800469c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd f878 	bl	80017ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004720:	ea42 0103 	orr.w	r1, r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	0c1b      	lsrs	r3, r3, #16
 800473a:	f003 0104 	and.w	r1, r3, #4
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0210 	and.w	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b088      	sub	sp, #32
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	4613      	mov	r3, r2
 8004784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_SPI_Transmit+0x22>
 8004794:	2302      	movs	r3, #2
 8004796:	e126      	b.n	80049e6 <HAL_SPI_Transmit+0x270>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a0:	f7fe fd26 	bl	80031f0 <HAL_GetTick>
 80047a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d002      	beq.n	80047bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
 80047b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ba:	e10b      	b.n	80049d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Transmit+0x52>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047cc:	e102      	b.n	80049d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2203      	movs	r2, #3
 80047d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004814:	d10f      	bne.n	8004836 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004824:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004834:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d007      	beq.n	8004854 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485c:	d14b      	bne.n	80048f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_SPI_Transmit+0xf6>
 8004866:	8afb      	ldrh	r3, [r7, #22]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d13e      	bne.n	80048ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	881a      	ldrh	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	1c9a      	adds	r2, r3, #2
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004890:	e02b      	b.n	80048ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b02      	cmp	r3, #2
 800489e:	d112      	bne.n	80048c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	881a      	ldrh	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	1c9a      	adds	r2, r3, #2
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80048c4:	e011      	b.n	80048ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c6:	f7fe fc93 	bl	80031f0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d803      	bhi.n	80048de <HAL_SPI_Transmit+0x168>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d102      	bne.n	80048e4 <HAL_SPI_Transmit+0x16e>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048e8:	e074      	b.n	80049d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ce      	bne.n	8004892 <HAL_SPI_Transmit+0x11c>
 80048f4:	e04c      	b.n	8004990 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x18e>
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d140      	bne.n	8004986 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800492a:	e02c      	b.n	8004986 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d113      	bne.n	8004962 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004960:	e011      	b.n	8004986 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004962:	f7fe fc45 	bl	80031f0 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d803      	bhi.n	800497a <HAL_SPI_Transmit+0x204>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d102      	bne.n	8004980 <HAL_SPI_Transmit+0x20a>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004984:	e026      	b.n	80049d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1cd      	bne.n	800492c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	6839      	ldr	r1, [r7, #0]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fbcb 	bl	8005130 <SPI_EndRxTxTransaction>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e000      	b.n	80049d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b088      	sub	sp, #32
 80049f2:	af02      	add	r7, sp, #8
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	603b      	str	r3, [r7, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0a:	d112      	bne.n	8004a32 <HAL_SPI_Receive+0x44>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10e      	bne.n	8004a32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2204      	movs	r2, #4
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f8f1 	bl	8004c10 <HAL_SPI_TransmitReceive>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	e0ea      	b.n	8004c08 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_SPI_Receive+0x52>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e0e3      	b.n	8004c08 <HAL_SPI_Receive+0x21a>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a48:	f7fe fbd2 	bl	80031f0 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d002      	beq.n	8004a60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a5e:	e0ca      	b.n	8004bf6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_Receive+0x7e>
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a70:	e0c1      	b.n	8004bf6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2204      	movs	r2, #4
 8004a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab8:	d10f      	bne.n	8004ada <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d162      	bne.n	8004bc6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b00:	e02e      	b.n	8004b60 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d115      	bne.n	8004b3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f103 020c 	add.w	r2, r3, #12
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3a:	e011      	b.n	8004b60 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3c:	f7fe fb58 	bl	80031f0 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d803      	bhi.n	8004b54 <HAL_SPI_Receive+0x166>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d102      	bne.n	8004b5a <HAL_SPI_Receive+0x16c>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b5e:	e04a      	b.n	8004bf6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1cb      	bne.n	8004b02 <HAL_SPI_Receive+0x114>
 8004b6a:	e031      	b.n	8004bd0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d113      	bne.n	8004ba2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	b292      	uxth	r2, r2
 8004b86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	1c9a      	adds	r2, r3, #2
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba0:	e011      	b.n	8004bc6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba2:	f7fe fb25 	bl	80031f0 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d803      	bhi.n	8004bba <HAL_SPI_Receive+0x1cc>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d102      	bne.n	8004bc0 <HAL_SPI_Receive+0x1d2>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bc4:	e017      	b.n	8004bf6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1cd      	bne.n	8004b6c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fa45 	bl	8005064 <SPI_EndRxTransaction>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
 8004bf2:	e000      	b.n	8004bf6 <HAL_SPI_Receive+0x208>
  }

error :
 8004bf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x26>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e18a      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x33c>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c3e:	f7fe fad7 	bl	80031f0 <HAL_GetTick>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c54:	887b      	ldrh	r3, [r7, #2]
 8004c56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d00f      	beq.n	8004c80 <HAL_SPI_TransmitReceive+0x70>
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c66:	d107      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x68>
 8004c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d003      	beq.n	8004c80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c7e:	e15b      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x82>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_SPI_TransmitReceive+0x82>
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c98:	e14e      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d003      	beq.n	8004cae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2205      	movs	r2, #5
 8004caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	887a      	ldrh	r2, [r7, #2]
 8004cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	887a      	ldrh	r2, [r7, #2]
 8004cd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d007      	beq.n	8004d02 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0a:	d178      	bne.n	8004dfe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_SPI_TransmitReceive+0x10a>
 8004d14:	8b7b      	ldrh	r3, [r7, #26]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d166      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	1c9a      	adds	r2, r3, #2
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3e:	e053      	b.n	8004de8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d11b      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x176>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d016      	beq.n	8004d86 <HAL_SPI_TransmitReceive+0x176>
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d113      	bne.n	8004d86 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	1c9a      	adds	r2, r3, #2
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d119      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x1b8>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d014      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	b292      	uxth	r2, r2
 8004daa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	1c9a      	adds	r2, r3, #2
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dc8:	f7fe fa12 	bl	80031f0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d807      	bhi.n	8004de8 <HAL_SPI_TransmitReceive+0x1d8>
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dde:	d003      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004de6:	e0a7      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1a6      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x130>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1a1      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x130>
 8004dfc:	e07c      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x1fc>
 8004e06:	8b7b      	ldrh	r3, [r7, #26]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d16b      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	7812      	ldrb	r2, [r2, #0]
 8004e18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e32:	e057      	b.n	8004ee4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d11c      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x26c>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d017      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x26c>
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d114      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d119      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x2ae>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d014      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ebe:	f7fe f997 	bl	80031f0 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d803      	bhi.n	8004ed6 <HAL_SPI_TransmitReceive+0x2c6>
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d102      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x2cc>
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ee2:	e029      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1a2      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x224>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d19d      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f917 	bl	8005130 <SPI_EndRxTxTransaction>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f14:	e010      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	e000      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3730      	adds	r7, #48	; 0x30
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f64:	f7fe f944 	bl	80031f0 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f74:	f7fe f93c 	bl	80031f0 <HAL_GetTick>
 8004f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f7a:	4b39      	ldr	r3, [pc, #228]	; (8005060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	015b      	lsls	r3, r3, #5
 8004f80:	0d1b      	lsrs	r3, r3, #20
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8a:	e054      	b.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d050      	beq.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f94:	f7fe f92c 	bl	80031f0 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d902      	bls.n	8004faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13d      	bne.n	8005026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d111      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fcc:	d004      	beq.n	8004fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d107      	bne.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff0:	d10f      	bne.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e017      	b.n	8005056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3b01      	subs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	bf0c      	ite	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	2300      	movne	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	429a      	cmp	r2, r3
 8005052:	d19b      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	2000001c 	.word	0x2000001c

08005064 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005078:	d111      	bne.n	800509e <SPI_EndRxTransaction+0x3a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005082:	d004      	beq.n	800508e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508c:	d107      	bne.n	800509e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a6:	d12a      	bne.n	80050fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b0:	d012      	beq.n	80050d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff ff49 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02d      	beq.n	8005124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e026      	b.n	8005126 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	2101      	movs	r1, #1
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff ff36 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01a      	beq.n	8005124 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e013      	b.n	8005126 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	2101      	movs	r1, #1
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ff23 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e000      	b.n	8005126 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800513c:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <SPI_EndRxTxTransaction+0x7c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <SPI_EndRxTxTransaction+0x80>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0d5b      	lsrs	r3, r3, #21
 8005148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515a:	d112      	bne.n	8005182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff fef4 	bl	8004f54 <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e00f      	b.n	80051a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b80      	cmp	r3, #128	; 0x80
 800519a:	d0f2      	beq.n	8005182 <SPI_EndRxTxTransaction+0x52>
 800519c:	e000      	b.n	80051a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800519e:	bf00      	nop
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	2000001c 	.word	0x2000001c
 80051b0:	165e9f81 	.word	0x165e9f81

080051b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e03f      	b.n	8005246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fef8 	bl	8001fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	; 0x24
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f905 	bl	8005408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800520c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800521c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b08a      	sub	sp, #40	; 0x28
 8005252:	af02      	add	r7, sp, #8
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b20      	cmp	r3, #32
 800526c:	d17c      	bne.n	8005368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_UART_Transmit+0x2c>
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e075      	b.n	800536a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_UART_Transmit+0x3e>
 8005288:	2302      	movs	r3, #2
 800528a:	e06e      	b.n	800536a <HAL_UART_Transmit+0x11c>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2221      	movs	r2, #33	; 0x21
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a2:	f7fd ffa5 	bl	80031f0 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052bc:	d108      	bne.n	80052d0 <HAL_UART_Transmit+0x82>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e003      	b.n	80052d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052e0:	e02a      	b.n	8005338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2180      	movs	r1, #128	; 0x80
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f840 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e036      	b.n	800536a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	3302      	adds	r3, #2
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e007      	b.n	800532a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	3301      	adds	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1cf      	bne.n	80052e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2200      	movs	r2, #0
 800534a:	2140      	movs	r1, #64	; 0x40
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f810 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e006      	b.n	800536a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005382:	e02c      	b.n	80053de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	d028      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005392:	f7fd ff2d 	bl	80031f0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d21d      	bcs.n	80053de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e00f      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d0c3      	beq.n	8005384 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	b09f      	sub	sp, #124	; 0x7c
 800540e:	af00      	add	r7, sp, #0
 8005410:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800541c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541e:	68d9      	ldr	r1, [r3, #12]
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	ea40 0301 	orr.w	r3, r0, r1
 8005428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	431a      	orrs	r2, r3
 8005434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	431a      	orrs	r2, r3
 800543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	4313      	orrs	r3, r2
 8005440:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800544c:	f021 010c 	bic.w	r1, r1, #12
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005456:	430b      	orrs	r3, r1
 8005458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800545a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005466:	6999      	ldr	r1, [r3, #24]
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	ea40 0301 	orr.w	r3, r0, r1
 8005470:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4bc5      	ldr	r3, [pc, #788]	; (800578c <UART_SetConfig+0x384>)
 8005478:	429a      	cmp	r2, r3
 800547a:	d004      	beq.n	8005486 <UART_SetConfig+0x7e>
 800547c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4bc3      	ldr	r3, [pc, #780]	; (8005790 <UART_SetConfig+0x388>)
 8005482:	429a      	cmp	r2, r3
 8005484:	d103      	bne.n	800548e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005486:	f7ff f8d9 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 800548a:	6778      	str	r0, [r7, #116]	; 0x74
 800548c:	e002      	b.n	8005494 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800548e:	f7ff f8c1 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8005492:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	f040 80b6 	bne.w	800560c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a2:	461c      	mov	r4, r3
 80054a4:	f04f 0500 	mov.w	r5, #0
 80054a8:	4622      	mov	r2, r4
 80054aa:	462b      	mov	r3, r5
 80054ac:	1891      	adds	r1, r2, r2
 80054ae:	6439      	str	r1, [r7, #64]	; 0x40
 80054b0:	415b      	adcs	r3, r3
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
 80054b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054b8:	1912      	adds	r2, r2, r4
 80054ba:	eb45 0303 	adc.w	r3, r5, r3
 80054be:	f04f 0000 	mov.w	r0, #0
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	00d9      	lsls	r1, r3, #3
 80054c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054cc:	00d0      	lsls	r0, r2, #3
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	1911      	adds	r1, r2, r4
 80054d4:	6639      	str	r1, [r7, #96]	; 0x60
 80054d6:	416b      	adcs	r3, r5
 80054d8:	667b      	str	r3, [r7, #100]	; 0x64
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054e8:	415b      	adcs	r3, r3
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054f4:	f7fa fecc 	bl	8000290 <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4ba5      	ldr	r3, [pc, #660]	; (8005794 <UART_SetConfig+0x38c>)
 80054fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	011e      	lsls	r6, r3, #4
 8005506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005508:	461c      	mov	r4, r3
 800550a:	f04f 0500 	mov.w	r5, #0
 800550e:	4622      	mov	r2, r4
 8005510:	462b      	mov	r3, r5
 8005512:	1891      	adds	r1, r2, r2
 8005514:	6339      	str	r1, [r7, #48]	; 0x30
 8005516:	415b      	adcs	r3, r3
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800551e:	1912      	adds	r2, r2, r4
 8005520:	eb45 0303 	adc.w	r3, r5, r3
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	00d9      	lsls	r1, r3, #3
 800552e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005532:	00d0      	lsls	r0, r2, #3
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	1911      	adds	r1, r2, r4
 800553a:	65b9      	str	r1, [r7, #88]	; 0x58
 800553c:	416b      	adcs	r3, r5
 800553e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	461a      	mov	r2, r3
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	1891      	adds	r1, r2, r2
 800554c:	62b9      	str	r1, [r7, #40]	; 0x28
 800554e:	415b      	adcs	r3, r3
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005556:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800555a:	f7fa fe99 	bl	8000290 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4b8c      	ldr	r3, [pc, #560]	; (8005794 <UART_SetConfig+0x38c>)
 8005564:	fba3 1302 	umull	r1, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	2164      	movs	r1, #100	; 0x64
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	3332      	adds	r3, #50	; 0x32
 8005576:	4a87      	ldr	r2, [pc, #540]	; (8005794 <UART_SetConfig+0x38c>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005584:	441e      	add	r6, r3
 8005586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005588:	4618      	mov	r0, r3
 800558a:	f04f 0100 	mov.w	r1, #0
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	1894      	adds	r4, r2, r2
 8005594:	623c      	str	r4, [r7, #32]
 8005596:	415b      	adcs	r3, r3
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
 800559a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800559e:	1812      	adds	r2, r2, r0
 80055a0:	eb41 0303 	adc.w	r3, r1, r3
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	f04f 0500 	mov.w	r5, #0
 80055ac:	00dd      	lsls	r5, r3, #3
 80055ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055b2:	00d4      	lsls	r4, r2, #3
 80055b4:	4622      	mov	r2, r4
 80055b6:	462b      	mov	r3, r5
 80055b8:	1814      	adds	r4, r2, r0
 80055ba:	653c      	str	r4, [r7, #80]	; 0x50
 80055bc:	414b      	adcs	r3, r1
 80055be:	657b      	str	r3, [r7, #84]	; 0x54
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	461a      	mov	r2, r3
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	1891      	adds	r1, r2, r2
 80055cc:	61b9      	str	r1, [r7, #24]
 80055ce:	415b      	adcs	r3, r3
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055da:	f7fa fe59 	bl	8000290 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b6c      	ldr	r3, [pc, #432]	; (8005794 <UART_SetConfig+0x38c>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a67      	ldr	r2, [pc, #412]	; (8005794 <UART_SetConfig+0x38c>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 0207 	and.w	r2, r3, #7
 8005602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4432      	add	r2, r6
 8005608:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800560a:	e0b9      	b.n	8005780 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800560c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560e:	461c      	mov	r4, r3
 8005610:	f04f 0500 	mov.w	r5, #0
 8005614:	4622      	mov	r2, r4
 8005616:	462b      	mov	r3, r5
 8005618:	1891      	adds	r1, r2, r2
 800561a:	6139      	str	r1, [r7, #16]
 800561c:	415b      	adcs	r3, r3
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005624:	1912      	adds	r2, r2, r4
 8005626:	eb45 0303 	adc.w	r3, r5, r3
 800562a:	f04f 0000 	mov.w	r0, #0
 800562e:	f04f 0100 	mov.w	r1, #0
 8005632:	00d9      	lsls	r1, r3, #3
 8005634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005638:	00d0      	lsls	r0, r2, #3
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	eb12 0804 	adds.w	r8, r2, r4
 8005642:	eb43 0905 	adc.w	r9, r3, r5
 8005646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4618      	mov	r0, r3
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	008b      	lsls	r3, r1, #2
 800565a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800565e:	0082      	lsls	r2, r0, #2
 8005660:	4640      	mov	r0, r8
 8005662:	4649      	mov	r1, r9
 8005664:	f7fa fe14 	bl	8000290 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b49      	ldr	r3, [pc, #292]	; (8005794 <UART_SetConfig+0x38c>)
 800566e:	fba3 2302 	umull	r2, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	011e      	lsls	r6, r3, #4
 8005676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005678:	4618      	mov	r0, r3
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	1894      	adds	r4, r2, r2
 8005684:	60bc      	str	r4, [r7, #8]
 8005686:	415b      	adcs	r3, r3
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800568e:	1812      	adds	r2, r2, r0
 8005690:	eb41 0303 	adc.w	r3, r1, r3
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	f04f 0500 	mov.w	r5, #0
 800569c:	00dd      	lsls	r5, r3, #3
 800569e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056a2:	00d4      	lsls	r4, r2, #3
 80056a4:	4622      	mov	r2, r4
 80056a6:	462b      	mov	r3, r5
 80056a8:	1814      	adds	r4, r2, r0
 80056aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80056ac:	414b      	adcs	r3, r1
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f04f 0100 	mov.w	r1, #0
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	008b      	lsls	r3, r1, #2
 80056c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056c8:	0082      	lsls	r2, r0, #2
 80056ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056ce:	f7fa fddf 	bl	8000290 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <UART_SetConfig+0x38c>)
 80056d8:	fba3 1302 	umull	r1, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2164      	movs	r1, #100	; 0x64
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <UART_SetConfig+0x38c>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f6:	441e      	add	r6, r3
 80056f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056fa:	4618      	mov	r0, r3
 80056fc:	f04f 0100 	mov.w	r1, #0
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	1894      	adds	r4, r2, r2
 8005706:	603c      	str	r4, [r7, #0]
 8005708:	415b      	adcs	r3, r3
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005710:	1812      	adds	r2, r2, r0
 8005712:	eb41 0303 	adc.w	r3, r1, r3
 8005716:	f04f 0400 	mov.w	r4, #0
 800571a:	f04f 0500 	mov.w	r5, #0
 800571e:	00dd      	lsls	r5, r3, #3
 8005720:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005724:	00d4      	lsls	r4, r2, #3
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	eb12 0a00 	adds.w	sl, r2, r0
 800572e:	eb43 0b01 	adc.w	fp, r3, r1
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4618      	mov	r0, r3
 8005738:	f04f 0100 	mov.w	r1, #0
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	008b      	lsls	r3, r1, #2
 8005746:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800574a:	0082      	lsls	r2, r0, #2
 800574c:	4650      	mov	r0, sl
 800574e:	4659      	mov	r1, fp
 8005750:	f7fa fd9e 	bl	8000290 <__aeabi_uldivmod>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <UART_SetConfig+0x38c>)
 800575a:	fba3 1302 	umull	r1, r3, r3, r2
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	2164      	movs	r1, #100	; 0x64
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	3332      	adds	r3, #50	; 0x32
 800576c:	4a09      	ldr	r2, [pc, #36]	; (8005794 <UART_SetConfig+0x38c>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4432      	add	r2, r6
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	377c      	adds	r7, #124	; 0x7c
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578a:	bf00      	nop
 800578c:	40011000 	.word	0x40011000
 8005790:	40011400 	.word	0x40011400
 8005794:	51eb851f 	.word	0x51eb851f

08005798 <__errno>:
 8005798:	4b01      	ldr	r3, [pc, #4]	; (80057a0 <__errno+0x8>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000054 	.word	0x20000054

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 ffec 	bl	8006794 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	08006a98 	.word	0x08006a98
 80057e0:	08006a98 	.word	0x08006a98
 80057e4:	08006a98 	.word	0x08006a98
 80057e8:	08006a9c 	.word	0x08006a9c

080057ec <memset>:
 80057ec:	4402      	add	r2, r0
 80057ee:	4603      	mov	r3, r0
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <memset+0xa>
 80057f4:	4770      	bx	lr
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
 80057fa:	e7f9      	b.n	80057f0 <memset+0x4>

080057fc <iprintf>:
 80057fc:	b40f      	push	{r0, r1, r2, r3}
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <iprintf+0x2c>)
 8005800:	b513      	push	{r0, r1, r4, lr}
 8005802:	681c      	ldr	r4, [r3, #0]
 8005804:	b124      	cbz	r4, 8005810 <iprintf+0x14>
 8005806:	69a3      	ldr	r3, [r4, #24]
 8005808:	b913      	cbnz	r3, 8005810 <iprintf+0x14>
 800580a:	4620      	mov	r0, r4
 800580c:	f000 fa5e 	bl	8005ccc <__sinit>
 8005810:	ab05      	add	r3, sp, #20
 8005812:	9a04      	ldr	r2, [sp, #16]
 8005814:	68a1      	ldr	r1, [r4, #8]
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fc2f 	bl	800607c <_vfiprintf_r>
 800581e:	b002      	add	sp, #8
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	20000054 	.word	0x20000054

0800582c <_puts_r>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	460e      	mov	r6, r1
 8005830:	4605      	mov	r5, r0
 8005832:	b118      	cbz	r0, 800583c <_puts_r+0x10>
 8005834:	6983      	ldr	r3, [r0, #24]
 8005836:	b90b      	cbnz	r3, 800583c <_puts_r+0x10>
 8005838:	f000 fa48 	bl	8005ccc <__sinit>
 800583c:	69ab      	ldr	r3, [r5, #24]
 800583e:	68ac      	ldr	r4, [r5, #8]
 8005840:	b913      	cbnz	r3, 8005848 <_puts_r+0x1c>
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fa42 	bl	8005ccc <__sinit>
 8005848:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <_puts_r+0xd0>)
 800584a:	429c      	cmp	r4, r3
 800584c:	d120      	bne.n	8005890 <_puts_r+0x64>
 800584e:	686c      	ldr	r4, [r5, #4]
 8005850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005852:	07db      	lsls	r3, r3, #31
 8005854:	d405      	bmi.n	8005862 <_puts_r+0x36>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	0598      	lsls	r0, r3, #22
 800585a:	d402      	bmi.n	8005862 <_puts_r+0x36>
 800585c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585e:	f000 fad3 	bl	8005e08 <__retarget_lock_acquire_recursive>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	0719      	lsls	r1, r3, #28
 8005866:	d51d      	bpl.n	80058a4 <_puts_r+0x78>
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	b1db      	cbz	r3, 80058a4 <_puts_r+0x78>
 800586c:	3e01      	subs	r6, #1
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005874:	3b01      	subs	r3, #1
 8005876:	60a3      	str	r3, [r4, #8]
 8005878:	bb39      	cbnz	r1, 80058ca <_puts_r+0x9e>
 800587a:	2b00      	cmp	r3, #0
 800587c:	da38      	bge.n	80058f0 <_puts_r+0xc4>
 800587e:	4622      	mov	r2, r4
 8005880:	210a      	movs	r1, #10
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f848 	bl	8005918 <__swbuf_r>
 8005888:	3001      	adds	r0, #1
 800588a:	d011      	beq.n	80058b0 <_puts_r+0x84>
 800588c:	250a      	movs	r5, #10
 800588e:	e011      	b.n	80058b4 <_puts_r+0x88>
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <_puts_r+0xd4>)
 8005892:	429c      	cmp	r4, r3
 8005894:	d101      	bne.n	800589a <_puts_r+0x6e>
 8005896:	68ac      	ldr	r4, [r5, #8]
 8005898:	e7da      	b.n	8005850 <_puts_r+0x24>
 800589a:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <_puts_r+0xd8>)
 800589c:	429c      	cmp	r4, r3
 800589e:	bf08      	it	eq
 80058a0:	68ec      	ldreq	r4, [r5, #12]
 80058a2:	e7d5      	b.n	8005850 <_puts_r+0x24>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 f888 	bl	80059bc <__swsetup_r>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d0dd      	beq.n	800586c <_puts_r+0x40>
 80058b0:	f04f 35ff 	mov.w	r5, #4294967295
 80058b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058b6:	07da      	lsls	r2, r3, #31
 80058b8:	d405      	bmi.n	80058c6 <_puts_r+0x9a>
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	059b      	lsls	r3, r3, #22
 80058be:	d402      	bmi.n	80058c6 <_puts_r+0x9a>
 80058c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c2:	f000 faa2 	bl	8005e0a <__retarget_lock_release_recursive>
 80058c6:	4628      	mov	r0, r5
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da04      	bge.n	80058d8 <_puts_r+0xac>
 80058ce:	69a2      	ldr	r2, [r4, #24]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	dc06      	bgt.n	80058e2 <_puts_r+0xb6>
 80058d4:	290a      	cmp	r1, #10
 80058d6:	d004      	beq.n	80058e2 <_puts_r+0xb6>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	6022      	str	r2, [r4, #0]
 80058de:	7019      	strb	r1, [r3, #0]
 80058e0:	e7c5      	b.n	800586e <_puts_r+0x42>
 80058e2:	4622      	mov	r2, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f817 	bl	8005918 <__swbuf_r>
 80058ea:	3001      	adds	r0, #1
 80058ec:	d1bf      	bne.n	800586e <_puts_r+0x42>
 80058ee:	e7df      	b.n	80058b0 <_puts_r+0x84>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	250a      	movs	r5, #10
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	6022      	str	r2, [r4, #0]
 80058f8:	701d      	strb	r5, [r3, #0]
 80058fa:	e7db      	b.n	80058b4 <_puts_r+0x88>
 80058fc:	08006a1c 	.word	0x08006a1c
 8005900:	08006a3c 	.word	0x08006a3c
 8005904:	080069fc 	.word	0x080069fc

08005908 <puts>:
 8005908:	4b02      	ldr	r3, [pc, #8]	; (8005914 <puts+0xc>)
 800590a:	4601      	mov	r1, r0
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	f7ff bf8d 	b.w	800582c <_puts_r>
 8005912:	bf00      	nop
 8005914:	20000054 	.word	0x20000054

08005918 <__swbuf_r>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	460e      	mov	r6, r1
 800591c:	4614      	mov	r4, r2
 800591e:	4605      	mov	r5, r0
 8005920:	b118      	cbz	r0, 800592a <__swbuf_r+0x12>
 8005922:	6983      	ldr	r3, [r0, #24]
 8005924:	b90b      	cbnz	r3, 800592a <__swbuf_r+0x12>
 8005926:	f000 f9d1 	bl	8005ccc <__sinit>
 800592a:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <__swbuf_r+0x98>)
 800592c:	429c      	cmp	r4, r3
 800592e:	d12b      	bne.n	8005988 <__swbuf_r+0x70>
 8005930:	686c      	ldr	r4, [r5, #4]
 8005932:	69a3      	ldr	r3, [r4, #24]
 8005934:	60a3      	str	r3, [r4, #8]
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	071a      	lsls	r2, r3, #28
 800593a:	d52f      	bpl.n	800599c <__swbuf_r+0x84>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	b36b      	cbz	r3, 800599c <__swbuf_r+0x84>
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	1ac0      	subs	r0, r0, r3
 8005946:	6963      	ldr	r3, [r4, #20]
 8005948:	b2f6      	uxtb	r6, r6
 800594a:	4283      	cmp	r3, r0
 800594c:	4637      	mov	r7, r6
 800594e:	dc04      	bgt.n	800595a <__swbuf_r+0x42>
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f000 f926 	bl	8005ba4 <_fflush_r>
 8005958:	bb30      	cbnz	r0, 80059a8 <__swbuf_r+0x90>
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	3b01      	subs	r3, #1
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	701e      	strb	r6, [r3, #0]
 8005968:	6963      	ldr	r3, [r4, #20]
 800596a:	3001      	adds	r0, #1
 800596c:	4283      	cmp	r3, r0
 800596e:	d004      	beq.n	800597a <__swbuf_r+0x62>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	07db      	lsls	r3, r3, #31
 8005974:	d506      	bpl.n	8005984 <__swbuf_r+0x6c>
 8005976:	2e0a      	cmp	r6, #10
 8005978:	d104      	bne.n	8005984 <__swbuf_r+0x6c>
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 f911 	bl	8005ba4 <_fflush_r>
 8005982:	b988      	cbnz	r0, 80059a8 <__swbuf_r+0x90>
 8005984:	4638      	mov	r0, r7
 8005986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <__swbuf_r+0x9c>)
 800598a:	429c      	cmp	r4, r3
 800598c:	d101      	bne.n	8005992 <__swbuf_r+0x7a>
 800598e:	68ac      	ldr	r4, [r5, #8]
 8005990:	e7cf      	b.n	8005932 <__swbuf_r+0x1a>
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <__swbuf_r+0xa0>)
 8005994:	429c      	cmp	r4, r3
 8005996:	bf08      	it	eq
 8005998:	68ec      	ldreq	r4, [r5, #12]
 800599a:	e7ca      	b.n	8005932 <__swbuf_r+0x1a>
 800599c:	4621      	mov	r1, r4
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 f80c 	bl	80059bc <__swsetup_r>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d0cb      	beq.n	8005940 <__swbuf_r+0x28>
 80059a8:	f04f 37ff 	mov.w	r7, #4294967295
 80059ac:	e7ea      	b.n	8005984 <__swbuf_r+0x6c>
 80059ae:	bf00      	nop
 80059b0:	08006a1c 	.word	0x08006a1c
 80059b4:	08006a3c 	.word	0x08006a3c
 80059b8:	080069fc 	.word	0x080069fc

080059bc <__swsetup_r>:
 80059bc:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <__swsetup_r+0xcc>)
 80059be:	b570      	push	{r4, r5, r6, lr}
 80059c0:	681d      	ldr	r5, [r3, #0]
 80059c2:	4606      	mov	r6, r0
 80059c4:	460c      	mov	r4, r1
 80059c6:	b125      	cbz	r5, 80059d2 <__swsetup_r+0x16>
 80059c8:	69ab      	ldr	r3, [r5, #24]
 80059ca:	b913      	cbnz	r3, 80059d2 <__swsetup_r+0x16>
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 f97d 	bl	8005ccc <__sinit>
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <__swsetup_r+0xd0>)
 80059d4:	429c      	cmp	r4, r3
 80059d6:	d10f      	bne.n	80059f8 <__swsetup_r+0x3c>
 80059d8:	686c      	ldr	r4, [r5, #4]
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e0:	0719      	lsls	r1, r3, #28
 80059e2:	d42c      	bmi.n	8005a3e <__swsetup_r+0x82>
 80059e4:	06dd      	lsls	r5, r3, #27
 80059e6:	d411      	bmi.n	8005a0c <__swsetup_r+0x50>
 80059e8:	2309      	movs	r3, #9
 80059ea:	6033      	str	r3, [r6, #0]
 80059ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	f04f 30ff 	mov.w	r0, #4294967295
 80059f6:	e03e      	b.n	8005a76 <__swsetup_r+0xba>
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <__swsetup_r+0xd4>)
 80059fa:	429c      	cmp	r4, r3
 80059fc:	d101      	bne.n	8005a02 <__swsetup_r+0x46>
 80059fe:	68ac      	ldr	r4, [r5, #8]
 8005a00:	e7eb      	b.n	80059da <__swsetup_r+0x1e>
 8005a02:	4b24      	ldr	r3, [pc, #144]	; (8005a94 <__swsetup_r+0xd8>)
 8005a04:	429c      	cmp	r4, r3
 8005a06:	bf08      	it	eq
 8005a08:	68ec      	ldreq	r4, [r5, #12]
 8005a0a:	e7e6      	b.n	80059da <__swsetup_r+0x1e>
 8005a0c:	0758      	lsls	r0, r3, #29
 8005a0e:	d512      	bpl.n	8005a36 <__swsetup_r+0x7a>
 8005a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a12:	b141      	cbz	r1, 8005a26 <__swsetup_r+0x6a>
 8005a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a18:	4299      	cmp	r1, r3
 8005a1a:	d002      	beq.n	8005a22 <__swsetup_r+0x66>
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 fa59 	bl	8005ed4 <_free_r>
 8005a22:	2300      	movs	r3, #0
 8005a24:	6363      	str	r3, [r4, #52]	; 0x34
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a2c:	81a3      	strh	r3, [r4, #12]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	89a3      	ldrh	r3, [r4, #12]
 8005a38:	f043 0308 	orr.w	r3, r3, #8
 8005a3c:	81a3      	strh	r3, [r4, #12]
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	b94b      	cbnz	r3, 8005a56 <__swsetup_r+0x9a>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4c:	d003      	beq.n	8005a56 <__swsetup_r+0x9a>
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4630      	mov	r0, r6
 8005a52:	f000 f9ff 	bl	8005e54 <__smakebuf_r>
 8005a56:	89a0      	ldrh	r0, [r4, #12]
 8005a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a5c:	f010 0301 	ands.w	r3, r0, #1
 8005a60:	d00a      	beq.n	8005a78 <__swsetup_r+0xbc>
 8005a62:	2300      	movs	r3, #0
 8005a64:	60a3      	str	r3, [r4, #8]
 8005a66:	6963      	ldr	r3, [r4, #20]
 8005a68:	425b      	negs	r3, r3
 8005a6a:	61a3      	str	r3, [r4, #24]
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	b943      	cbnz	r3, 8005a82 <__swsetup_r+0xc6>
 8005a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a74:	d1ba      	bne.n	80059ec <__swsetup_r+0x30>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	0781      	lsls	r1, r0, #30
 8005a7a:	bf58      	it	pl
 8005a7c:	6963      	ldrpl	r3, [r4, #20]
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	e7f4      	b.n	8005a6c <__swsetup_r+0xb0>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e7f7      	b.n	8005a76 <__swsetup_r+0xba>
 8005a86:	bf00      	nop
 8005a88:	20000054 	.word	0x20000054
 8005a8c:	08006a1c 	.word	0x08006a1c
 8005a90:	08006a3c 	.word	0x08006a3c
 8005a94:	080069fc 	.word	0x080069fc

08005a98 <__sflush_r>:
 8005a98:	898a      	ldrh	r2, [r1, #12]
 8005a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	0710      	lsls	r0, r2, #28
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	d458      	bmi.n	8005b58 <__sflush_r+0xc0>
 8005aa6:	684b      	ldr	r3, [r1, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dc05      	bgt.n	8005ab8 <__sflush_r+0x20>
 8005aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	dc02      	bgt.n	8005ab8 <__sflush_r+0x20>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aba:	2e00      	cmp	r6, #0
 8005abc:	d0f9      	beq.n	8005ab2 <__sflush_r+0x1a>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ac4:	682f      	ldr	r7, [r5, #0]
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	d032      	beq.n	8005b30 <__sflush_r+0x98>
 8005aca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	075a      	lsls	r2, r3, #29
 8005ad0:	d505      	bpl.n	8005ade <__sflush_r+0x46>
 8005ad2:	6863      	ldr	r3, [r4, #4]
 8005ad4:	1ac0      	subs	r0, r0, r3
 8005ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ad8:	b10b      	cbz	r3, 8005ade <__sflush_r+0x46>
 8005ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005adc:	1ac0      	subs	r0, r0, r3
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ae4:	6a21      	ldr	r1, [r4, #32]
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b0      	blx	r6
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	d106      	bne.n	8005afe <__sflush_r+0x66>
 8005af0:	6829      	ldr	r1, [r5, #0]
 8005af2:	291d      	cmp	r1, #29
 8005af4:	d82c      	bhi.n	8005b50 <__sflush_r+0xb8>
 8005af6:	4a2a      	ldr	r2, [pc, #168]	; (8005ba0 <__sflush_r+0x108>)
 8005af8:	40ca      	lsrs	r2, r1
 8005afa:	07d6      	lsls	r6, r2, #31
 8005afc:	d528      	bpl.n	8005b50 <__sflush_r+0xb8>
 8005afe:	2200      	movs	r2, #0
 8005b00:	6062      	str	r2, [r4, #4]
 8005b02:	04d9      	lsls	r1, r3, #19
 8005b04:	6922      	ldr	r2, [r4, #16]
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	d504      	bpl.n	8005b14 <__sflush_r+0x7c>
 8005b0a:	1c42      	adds	r2, r0, #1
 8005b0c:	d101      	bne.n	8005b12 <__sflush_r+0x7a>
 8005b0e:	682b      	ldr	r3, [r5, #0]
 8005b10:	b903      	cbnz	r3, 8005b14 <__sflush_r+0x7c>
 8005b12:	6560      	str	r0, [r4, #84]	; 0x54
 8005b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b16:	602f      	str	r7, [r5, #0]
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	d0ca      	beq.n	8005ab2 <__sflush_r+0x1a>
 8005b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b20:	4299      	cmp	r1, r3
 8005b22:	d002      	beq.n	8005b2a <__sflush_r+0x92>
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 f9d5 	bl	8005ed4 <_free_r>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	6360      	str	r0, [r4, #52]	; 0x34
 8005b2e:	e7c1      	b.n	8005ab4 <__sflush_r+0x1c>
 8005b30:	6a21      	ldr	r1, [r4, #32]
 8005b32:	2301      	movs	r3, #1
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b0      	blx	r6
 8005b38:	1c41      	adds	r1, r0, #1
 8005b3a:	d1c7      	bne.n	8005acc <__sflush_r+0x34>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0c4      	beq.n	8005acc <__sflush_r+0x34>
 8005b42:	2b1d      	cmp	r3, #29
 8005b44:	d001      	beq.n	8005b4a <__sflush_r+0xb2>
 8005b46:	2b16      	cmp	r3, #22
 8005b48:	d101      	bne.n	8005b4e <__sflush_r+0xb6>
 8005b4a:	602f      	str	r7, [r5, #0]
 8005b4c:	e7b1      	b.n	8005ab2 <__sflush_r+0x1a>
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	e7ad      	b.n	8005ab4 <__sflush_r+0x1c>
 8005b58:	690f      	ldr	r7, [r1, #16]
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	d0a9      	beq.n	8005ab2 <__sflush_r+0x1a>
 8005b5e:	0793      	lsls	r3, r2, #30
 8005b60:	680e      	ldr	r6, [r1, #0]
 8005b62:	bf08      	it	eq
 8005b64:	694b      	ldreq	r3, [r1, #20]
 8005b66:	600f      	str	r7, [r1, #0]
 8005b68:	bf18      	it	ne
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	eba6 0807 	sub.w	r8, r6, r7
 8005b70:	608b      	str	r3, [r1, #8]
 8005b72:	f1b8 0f00 	cmp.w	r8, #0
 8005b76:	dd9c      	ble.n	8005ab2 <__sflush_r+0x1a>
 8005b78:	6a21      	ldr	r1, [r4, #32]
 8005b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b0      	blx	r6
 8005b84:	2800      	cmp	r0, #0
 8005b86:	dc06      	bgt.n	8005b96 <__sflush_r+0xfe>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	e78e      	b.n	8005ab4 <__sflush_r+0x1c>
 8005b96:	4407      	add	r7, r0
 8005b98:	eba8 0800 	sub.w	r8, r8, r0
 8005b9c:	e7e9      	b.n	8005b72 <__sflush_r+0xda>
 8005b9e:	bf00      	nop
 8005ba0:	20400001 	.word	0x20400001

08005ba4 <_fflush_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	690b      	ldr	r3, [r1, #16]
 8005ba8:	4605      	mov	r5, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	b913      	cbnz	r3, 8005bb4 <_fflush_r+0x10>
 8005bae:	2500      	movs	r5, #0
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	b118      	cbz	r0, 8005bbe <_fflush_r+0x1a>
 8005bb6:	6983      	ldr	r3, [r0, #24]
 8005bb8:	b90b      	cbnz	r3, 8005bbe <_fflush_r+0x1a>
 8005bba:	f000 f887 	bl	8005ccc <__sinit>
 8005bbe:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <_fflush_r+0x6c>)
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	d11b      	bne.n	8005bfc <_fflush_r+0x58>
 8005bc4:	686c      	ldr	r4, [r5, #4]
 8005bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0ef      	beq.n	8005bae <_fflush_r+0xa>
 8005bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bd0:	07d0      	lsls	r0, r2, #31
 8005bd2:	d404      	bmi.n	8005bde <_fflush_r+0x3a>
 8005bd4:	0599      	lsls	r1, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_fflush_r+0x3a>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bda:	f000 f915 	bl	8005e08 <__retarget_lock_acquire_recursive>
 8005bde:	4628      	mov	r0, r5
 8005be0:	4621      	mov	r1, r4
 8005be2:	f7ff ff59 	bl	8005a98 <__sflush_r>
 8005be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be8:	07da      	lsls	r2, r3, #31
 8005bea:	4605      	mov	r5, r0
 8005bec:	d4e0      	bmi.n	8005bb0 <_fflush_r+0xc>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	059b      	lsls	r3, r3, #22
 8005bf2:	d4dd      	bmi.n	8005bb0 <_fflush_r+0xc>
 8005bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bf6:	f000 f908 	bl	8005e0a <__retarget_lock_release_recursive>
 8005bfa:	e7d9      	b.n	8005bb0 <_fflush_r+0xc>
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <_fflush_r+0x70>)
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d101      	bne.n	8005c06 <_fflush_r+0x62>
 8005c02:	68ac      	ldr	r4, [r5, #8]
 8005c04:	e7df      	b.n	8005bc6 <_fflush_r+0x22>
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <_fflush_r+0x74>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	bf08      	it	eq
 8005c0c:	68ec      	ldreq	r4, [r5, #12]
 8005c0e:	e7da      	b.n	8005bc6 <_fflush_r+0x22>
 8005c10:	08006a1c 	.word	0x08006a1c
 8005c14:	08006a3c 	.word	0x08006a3c
 8005c18:	080069fc 	.word	0x080069fc

08005c1c <std>:
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	4604      	mov	r4, r0
 8005c22:	e9c0 3300 	strd	r3, r3, [r0]
 8005c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c2a:	6083      	str	r3, [r0, #8]
 8005c2c:	8181      	strh	r1, [r0, #12]
 8005c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8005c30:	81c2      	strh	r2, [r0, #14]
 8005c32:	6183      	str	r3, [r0, #24]
 8005c34:	4619      	mov	r1, r3
 8005c36:	2208      	movs	r2, #8
 8005c38:	305c      	adds	r0, #92	; 0x5c
 8005c3a:	f7ff fdd7 	bl	80057ec <memset>
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <std+0x38>)
 8005c40:	6263      	str	r3, [r4, #36]	; 0x24
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <std+0x3c>)
 8005c44:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <std+0x40>)
 8005c48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <std+0x44>)
 8005c4c:	6224      	str	r4, [r4, #32]
 8005c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	bf00      	nop
 8005c54:	08006625 	.word	0x08006625
 8005c58:	08006647 	.word	0x08006647
 8005c5c:	0800667f 	.word	0x0800667f
 8005c60:	080066a3 	.word	0x080066a3

08005c64 <_cleanup_r>:
 8005c64:	4901      	ldr	r1, [pc, #4]	; (8005c6c <_cleanup_r+0x8>)
 8005c66:	f000 b8af 	b.w	8005dc8 <_fwalk_reent>
 8005c6a:	bf00      	nop
 8005c6c:	08005ba5 	.word	0x08005ba5

08005c70 <__sfmoreglue>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	1e4a      	subs	r2, r1, #1
 8005c74:	2568      	movs	r5, #104	; 0x68
 8005c76:	4355      	muls	r5, r2
 8005c78:	460e      	mov	r6, r1
 8005c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c7e:	f000 f979 	bl	8005f74 <_malloc_r>
 8005c82:	4604      	mov	r4, r0
 8005c84:	b140      	cbz	r0, 8005c98 <__sfmoreglue+0x28>
 8005c86:	2100      	movs	r1, #0
 8005c88:	e9c0 1600 	strd	r1, r6, [r0]
 8005c8c:	300c      	adds	r0, #12
 8005c8e:	60a0      	str	r0, [r4, #8]
 8005c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c94:	f7ff fdaa 	bl	80057ec <memset>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}

08005c9c <__sfp_lock_acquire>:
 8005c9c:	4801      	ldr	r0, [pc, #4]	; (8005ca4 <__sfp_lock_acquire+0x8>)
 8005c9e:	f000 b8b3 	b.w	8005e08 <__retarget_lock_acquire_recursive>
 8005ca2:	bf00      	nop
 8005ca4:	20000da4 	.word	0x20000da4

08005ca8 <__sfp_lock_release>:
 8005ca8:	4801      	ldr	r0, [pc, #4]	; (8005cb0 <__sfp_lock_release+0x8>)
 8005caa:	f000 b8ae 	b.w	8005e0a <__retarget_lock_release_recursive>
 8005cae:	bf00      	nop
 8005cb0:	20000da4 	.word	0x20000da4

08005cb4 <__sinit_lock_acquire>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__sinit_lock_acquire+0x8>)
 8005cb6:	f000 b8a7 	b.w	8005e08 <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20000d9f 	.word	0x20000d9f

08005cc0 <__sinit_lock_release>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	; (8005cc8 <__sinit_lock_release+0x8>)
 8005cc2:	f000 b8a2 	b.w	8005e0a <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20000d9f 	.word	0x20000d9f

08005ccc <__sinit>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	4604      	mov	r4, r0
 8005cd0:	f7ff fff0 	bl	8005cb4 <__sinit_lock_acquire>
 8005cd4:	69a3      	ldr	r3, [r4, #24]
 8005cd6:	b11b      	cbz	r3, 8005ce0 <__sinit+0x14>
 8005cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cdc:	f7ff bff0 	b.w	8005cc0 <__sinit_lock_release>
 8005ce0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ce4:	6523      	str	r3, [r4, #80]	; 0x50
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <__sinit+0x68>)
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <__sinit+0x6c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	bf04      	itt	eq
 8005cf2:	2301      	moveq	r3, #1
 8005cf4:	61a3      	streq	r3, [r4, #24]
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 f820 	bl	8005d3c <__sfp>
 8005cfc:	6060      	str	r0, [r4, #4]
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f81c 	bl	8005d3c <__sfp>
 8005d04:	60a0      	str	r0, [r4, #8]
 8005d06:	4620      	mov	r0, r4
 8005d08:	f000 f818 	bl	8005d3c <__sfp>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	60e0      	str	r0, [r4, #12]
 8005d10:	2104      	movs	r1, #4
 8005d12:	6860      	ldr	r0, [r4, #4]
 8005d14:	f7ff ff82 	bl	8005c1c <std>
 8005d18:	68a0      	ldr	r0, [r4, #8]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	2109      	movs	r1, #9
 8005d1e:	f7ff ff7d 	bl	8005c1c <std>
 8005d22:	68e0      	ldr	r0, [r4, #12]
 8005d24:	2202      	movs	r2, #2
 8005d26:	2112      	movs	r1, #18
 8005d28:	f7ff ff78 	bl	8005c1c <std>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	61a3      	str	r3, [r4, #24]
 8005d30:	e7d2      	b.n	8005cd8 <__sinit+0xc>
 8005d32:	bf00      	nop
 8005d34:	080069f8 	.word	0x080069f8
 8005d38:	08005c65 	.word	0x08005c65

08005d3c <__sfp>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	4607      	mov	r7, r0
 8005d40:	f7ff ffac 	bl	8005c9c <__sfp_lock_acquire>
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <__sfp+0x84>)
 8005d46:	681e      	ldr	r6, [r3, #0]
 8005d48:	69b3      	ldr	r3, [r6, #24]
 8005d4a:	b913      	cbnz	r3, 8005d52 <__sfp+0x16>
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7ff ffbd 	bl	8005ccc <__sinit>
 8005d52:	3648      	adds	r6, #72	; 0x48
 8005d54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	d503      	bpl.n	8005d64 <__sfp+0x28>
 8005d5c:	6833      	ldr	r3, [r6, #0]
 8005d5e:	b30b      	cbz	r3, 8005da4 <__sfp+0x68>
 8005d60:	6836      	ldr	r6, [r6, #0]
 8005d62:	e7f7      	b.n	8005d54 <__sfp+0x18>
 8005d64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d68:	b9d5      	cbnz	r5, 8005da0 <__sfp+0x64>
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <__sfp+0x88>)
 8005d6c:	60e3      	str	r3, [r4, #12]
 8005d6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d72:	6665      	str	r5, [r4, #100]	; 0x64
 8005d74:	f000 f847 	bl	8005e06 <__retarget_lock_init_recursive>
 8005d78:	f7ff ff96 	bl	8005ca8 <__sfp_lock_release>
 8005d7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d84:	6025      	str	r5, [r4, #0]
 8005d86:	61a5      	str	r5, [r4, #24]
 8005d88:	2208      	movs	r2, #8
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d90:	f7ff fd2c 	bl	80057ec <memset>
 8005d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da0:	3468      	adds	r4, #104	; 0x68
 8005da2:	e7d9      	b.n	8005d58 <__sfp+0x1c>
 8005da4:	2104      	movs	r1, #4
 8005da6:	4638      	mov	r0, r7
 8005da8:	f7ff ff62 	bl	8005c70 <__sfmoreglue>
 8005dac:	4604      	mov	r4, r0
 8005dae:	6030      	str	r0, [r6, #0]
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d1d5      	bne.n	8005d60 <__sfp+0x24>
 8005db4:	f7ff ff78 	bl	8005ca8 <__sfp_lock_release>
 8005db8:	230c      	movs	r3, #12
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	e7ee      	b.n	8005d9c <__sfp+0x60>
 8005dbe:	bf00      	nop
 8005dc0:	080069f8 	.word	0x080069f8
 8005dc4:	ffff0001 	.word	0xffff0001

08005dc8 <_fwalk_reent>:
 8005dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dcc:	4606      	mov	r6, r0
 8005dce:	4688      	mov	r8, r1
 8005dd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dd4:	2700      	movs	r7, #0
 8005dd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dda:	f1b9 0901 	subs.w	r9, r9, #1
 8005dde:	d505      	bpl.n	8005dec <_fwalk_reent+0x24>
 8005de0:	6824      	ldr	r4, [r4, #0]
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	d1f7      	bne.n	8005dd6 <_fwalk_reent+0xe>
 8005de6:	4638      	mov	r0, r7
 8005de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dec:	89ab      	ldrh	r3, [r5, #12]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d907      	bls.n	8005e02 <_fwalk_reent+0x3a>
 8005df2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005df6:	3301      	adds	r3, #1
 8005df8:	d003      	beq.n	8005e02 <_fwalk_reent+0x3a>
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	47c0      	blx	r8
 8005e00:	4307      	orrs	r7, r0
 8005e02:	3568      	adds	r5, #104	; 0x68
 8005e04:	e7e9      	b.n	8005dda <_fwalk_reent+0x12>

08005e06 <__retarget_lock_init_recursive>:
 8005e06:	4770      	bx	lr

08005e08 <__retarget_lock_acquire_recursive>:
 8005e08:	4770      	bx	lr

08005e0a <__retarget_lock_release_recursive>:
 8005e0a:	4770      	bx	lr

08005e0c <__swhatbuf_r>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	460e      	mov	r6, r1
 8005e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	b096      	sub	sp, #88	; 0x58
 8005e18:	4614      	mov	r4, r2
 8005e1a:	461d      	mov	r5, r3
 8005e1c:	da07      	bge.n	8005e2e <__swhatbuf_r+0x22>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	89b3      	ldrh	r3, [r6, #12]
 8005e24:	061a      	lsls	r2, r3, #24
 8005e26:	d410      	bmi.n	8005e4a <__swhatbuf_r+0x3e>
 8005e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2c:	e00e      	b.n	8005e4c <__swhatbuf_r+0x40>
 8005e2e:	466a      	mov	r2, sp
 8005e30:	f000 fc5e 	bl	80066f0 <_fstat_r>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	dbf2      	blt.n	8005e1e <__swhatbuf_r+0x12>
 8005e38:	9a01      	ldr	r2, [sp, #4]
 8005e3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e42:	425a      	negs	r2, r3
 8005e44:	415a      	adcs	r2, r3
 8005e46:	602a      	str	r2, [r5, #0]
 8005e48:	e7ee      	b.n	8005e28 <__swhatbuf_r+0x1c>
 8005e4a:	2340      	movs	r3, #64	; 0x40
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	b016      	add	sp, #88	; 0x58
 8005e52:	bd70      	pop	{r4, r5, r6, pc}

08005e54 <__smakebuf_r>:
 8005e54:	898b      	ldrh	r3, [r1, #12]
 8005e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e58:	079d      	lsls	r5, r3, #30
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	d507      	bpl.n	8005e70 <__smakebuf_r+0x1c>
 8005e60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	6163      	str	r3, [r4, #20]
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	ab01      	add	r3, sp, #4
 8005e72:	466a      	mov	r2, sp
 8005e74:	f7ff ffca 	bl	8005e0c <__swhatbuf_r>
 8005e78:	9900      	ldr	r1, [sp, #0]
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f879 	bl	8005f74 <_malloc_r>
 8005e82:	b948      	cbnz	r0, 8005e98 <__smakebuf_r+0x44>
 8005e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e88:	059a      	lsls	r2, r3, #22
 8005e8a:	d4ef      	bmi.n	8005e6c <__smakebuf_r+0x18>
 8005e8c:	f023 0303 	bic.w	r3, r3, #3
 8005e90:	f043 0302 	orr.w	r3, r3, #2
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	e7e3      	b.n	8005e60 <__smakebuf_r+0xc>
 8005e98:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <__smakebuf_r+0x7c>)
 8005e9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	6020      	str	r0, [r4, #0]
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	9b00      	ldr	r3, [sp, #0]
 8005ea8:	6163      	str	r3, [r4, #20]
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	6120      	str	r0, [r4, #16]
 8005eae:	b15b      	cbz	r3, 8005ec8 <__smakebuf_r+0x74>
 8005eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 fc2d 	bl	8006714 <_isatty_r>
 8005eba:	b128      	cbz	r0, 8005ec8 <__smakebuf_r+0x74>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	89a0      	ldrh	r0, [r4, #12]
 8005eca:	4305      	orrs	r5, r0
 8005ecc:	81a5      	strh	r5, [r4, #12]
 8005ece:	e7cd      	b.n	8005e6c <__smakebuf_r+0x18>
 8005ed0:	08005c65 	.word	0x08005c65

08005ed4 <_free_r>:
 8005ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ed6:	2900      	cmp	r1, #0
 8005ed8:	d048      	beq.n	8005f6c <_free_r+0x98>
 8005eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ede:	9001      	str	r0, [sp, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ee6:	bfb8      	it	lt
 8005ee8:	18e4      	addlt	r4, r4, r3
 8005eea:	f000 fc35 	bl	8006758 <__malloc_lock>
 8005eee:	4a20      	ldr	r2, [pc, #128]	; (8005f70 <_free_r+0x9c>)
 8005ef0:	9801      	ldr	r0, [sp, #4]
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	b933      	cbnz	r3, 8005f06 <_free_r+0x32>
 8005ef8:	6063      	str	r3, [r4, #4]
 8005efa:	6014      	str	r4, [r2, #0]
 8005efc:	b003      	add	sp, #12
 8005efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f02:	f000 bc2f 	b.w	8006764 <__malloc_unlock>
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	d90b      	bls.n	8005f22 <_free_r+0x4e>
 8005f0a:	6821      	ldr	r1, [r4, #0]
 8005f0c:	1862      	adds	r2, r4, r1
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	bf04      	itt	eq
 8005f12:	681a      	ldreq	r2, [r3, #0]
 8005f14:	685b      	ldreq	r3, [r3, #4]
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	bf04      	itt	eq
 8005f1a:	1852      	addeq	r2, r2, r1
 8005f1c:	6022      	streq	r2, [r4, #0]
 8005f1e:	602c      	str	r4, [r5, #0]
 8005f20:	e7ec      	b.n	8005efc <_free_r+0x28>
 8005f22:	461a      	mov	r2, r3
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	b10b      	cbz	r3, 8005f2c <_free_r+0x58>
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d9fa      	bls.n	8005f22 <_free_r+0x4e>
 8005f2c:	6811      	ldr	r1, [r2, #0]
 8005f2e:	1855      	adds	r5, r2, r1
 8005f30:	42a5      	cmp	r5, r4
 8005f32:	d10b      	bne.n	8005f4c <_free_r+0x78>
 8005f34:	6824      	ldr	r4, [r4, #0]
 8005f36:	4421      	add	r1, r4
 8005f38:	1854      	adds	r4, r2, r1
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	6011      	str	r1, [r2, #0]
 8005f3e:	d1dd      	bne.n	8005efc <_free_r+0x28>
 8005f40:	681c      	ldr	r4, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	6053      	str	r3, [r2, #4]
 8005f46:	4421      	add	r1, r4
 8005f48:	6011      	str	r1, [r2, #0]
 8005f4a:	e7d7      	b.n	8005efc <_free_r+0x28>
 8005f4c:	d902      	bls.n	8005f54 <_free_r+0x80>
 8005f4e:	230c      	movs	r3, #12
 8005f50:	6003      	str	r3, [r0, #0]
 8005f52:	e7d3      	b.n	8005efc <_free_r+0x28>
 8005f54:	6825      	ldr	r5, [r4, #0]
 8005f56:	1961      	adds	r1, r4, r5
 8005f58:	428b      	cmp	r3, r1
 8005f5a:	bf04      	itt	eq
 8005f5c:	6819      	ldreq	r1, [r3, #0]
 8005f5e:	685b      	ldreq	r3, [r3, #4]
 8005f60:	6063      	str	r3, [r4, #4]
 8005f62:	bf04      	itt	eq
 8005f64:	1949      	addeq	r1, r1, r5
 8005f66:	6021      	streq	r1, [r4, #0]
 8005f68:	6054      	str	r4, [r2, #4]
 8005f6a:	e7c7      	b.n	8005efc <_free_r+0x28>
 8005f6c:	b003      	add	sp, #12
 8005f6e:	bd30      	pop	{r4, r5, pc}
 8005f70:	200000fc 	.word	0x200000fc

08005f74 <_malloc_r>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	1ccd      	adds	r5, r1, #3
 8005f78:	f025 0503 	bic.w	r5, r5, #3
 8005f7c:	3508      	adds	r5, #8
 8005f7e:	2d0c      	cmp	r5, #12
 8005f80:	bf38      	it	cc
 8005f82:	250c      	movcc	r5, #12
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	4606      	mov	r6, r0
 8005f88:	db01      	blt.n	8005f8e <_malloc_r+0x1a>
 8005f8a:	42a9      	cmp	r1, r5
 8005f8c:	d903      	bls.n	8005f96 <_malloc_r+0x22>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	2000      	movs	r0, #0
 8005f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f96:	f000 fbdf 	bl	8006758 <__malloc_lock>
 8005f9a:	4921      	ldr	r1, [pc, #132]	; (8006020 <_malloc_r+0xac>)
 8005f9c:	680a      	ldr	r2, [r1, #0]
 8005f9e:	4614      	mov	r4, r2
 8005fa0:	b99c      	cbnz	r4, 8005fca <_malloc_r+0x56>
 8005fa2:	4f20      	ldr	r7, [pc, #128]	; (8006024 <_malloc_r+0xb0>)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	b923      	cbnz	r3, 8005fb2 <_malloc_r+0x3e>
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 fb2a 	bl	8006604 <_sbrk_r>
 8005fb0:	6038      	str	r0, [r7, #0]
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 fb25 	bl	8006604 <_sbrk_r>
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	d123      	bne.n	8006006 <_malloc_r+0x92>
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	6033      	str	r3, [r6, #0]
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f000 fbce 	bl	8006764 <__malloc_unlock>
 8005fc8:	e7e3      	b.n	8005f92 <_malloc_r+0x1e>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	1b5b      	subs	r3, r3, r5
 8005fce:	d417      	bmi.n	8006000 <_malloc_r+0x8c>
 8005fd0:	2b0b      	cmp	r3, #11
 8005fd2:	d903      	bls.n	8005fdc <_malloc_r+0x68>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	441c      	add	r4, r3
 8005fd8:	6025      	str	r5, [r4, #0]
 8005fda:	e004      	b.n	8005fe6 <_malloc_r+0x72>
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	42a2      	cmp	r2, r4
 8005fe0:	bf0c      	ite	eq
 8005fe2:	600b      	streq	r3, [r1, #0]
 8005fe4:	6053      	strne	r3, [r2, #4]
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 fbbc 	bl	8006764 <__malloc_unlock>
 8005fec:	f104 000b 	add.w	r0, r4, #11
 8005ff0:	1d23      	adds	r3, r4, #4
 8005ff2:	f020 0007 	bic.w	r0, r0, #7
 8005ff6:	1ac2      	subs	r2, r0, r3
 8005ff8:	d0cc      	beq.n	8005f94 <_malloc_r+0x20>
 8005ffa:	1a1b      	subs	r3, r3, r0
 8005ffc:	50a3      	str	r3, [r4, r2]
 8005ffe:	e7c9      	b.n	8005f94 <_malloc_r+0x20>
 8006000:	4622      	mov	r2, r4
 8006002:	6864      	ldr	r4, [r4, #4]
 8006004:	e7cc      	b.n	8005fa0 <_malloc_r+0x2c>
 8006006:	1cc4      	adds	r4, r0, #3
 8006008:	f024 0403 	bic.w	r4, r4, #3
 800600c:	42a0      	cmp	r0, r4
 800600e:	d0e3      	beq.n	8005fd8 <_malloc_r+0x64>
 8006010:	1a21      	subs	r1, r4, r0
 8006012:	4630      	mov	r0, r6
 8006014:	f000 faf6 	bl	8006604 <_sbrk_r>
 8006018:	3001      	adds	r0, #1
 800601a:	d1dd      	bne.n	8005fd8 <_malloc_r+0x64>
 800601c:	e7cf      	b.n	8005fbe <_malloc_r+0x4a>
 800601e:	bf00      	nop
 8006020:	200000fc 	.word	0x200000fc
 8006024:	20000100 	.word	0x20000100

08006028 <__sfputc_r>:
 8006028:	6893      	ldr	r3, [r2, #8]
 800602a:	3b01      	subs	r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	b410      	push	{r4}
 8006030:	6093      	str	r3, [r2, #8]
 8006032:	da08      	bge.n	8006046 <__sfputc_r+0x1e>
 8006034:	6994      	ldr	r4, [r2, #24]
 8006036:	42a3      	cmp	r3, r4
 8006038:	db01      	blt.n	800603e <__sfputc_r+0x16>
 800603a:	290a      	cmp	r1, #10
 800603c:	d103      	bne.n	8006046 <__sfputc_r+0x1e>
 800603e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006042:	f7ff bc69 	b.w	8005918 <__swbuf_r>
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	1c58      	adds	r0, r3, #1
 800604a:	6010      	str	r0, [r2, #0]
 800604c:	7019      	strb	r1, [r3, #0]
 800604e:	4608      	mov	r0, r1
 8006050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006054:	4770      	bx	lr

08006056 <__sfputs_r>:
 8006056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006058:	4606      	mov	r6, r0
 800605a:	460f      	mov	r7, r1
 800605c:	4614      	mov	r4, r2
 800605e:	18d5      	adds	r5, r2, r3
 8006060:	42ac      	cmp	r4, r5
 8006062:	d101      	bne.n	8006068 <__sfputs_r+0x12>
 8006064:	2000      	movs	r0, #0
 8006066:	e007      	b.n	8006078 <__sfputs_r+0x22>
 8006068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606c:	463a      	mov	r2, r7
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff ffda 	bl	8006028 <__sfputc_r>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d1f3      	bne.n	8006060 <__sfputs_r+0xa>
 8006078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800607c <_vfiprintf_r>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	460d      	mov	r5, r1
 8006082:	b09d      	sub	sp, #116	; 0x74
 8006084:	4614      	mov	r4, r2
 8006086:	4698      	mov	r8, r3
 8006088:	4606      	mov	r6, r0
 800608a:	b118      	cbz	r0, 8006094 <_vfiprintf_r+0x18>
 800608c:	6983      	ldr	r3, [r0, #24]
 800608e:	b90b      	cbnz	r3, 8006094 <_vfiprintf_r+0x18>
 8006090:	f7ff fe1c 	bl	8005ccc <__sinit>
 8006094:	4b89      	ldr	r3, [pc, #548]	; (80062bc <_vfiprintf_r+0x240>)
 8006096:	429d      	cmp	r5, r3
 8006098:	d11b      	bne.n	80060d2 <_vfiprintf_r+0x56>
 800609a:	6875      	ldr	r5, [r6, #4]
 800609c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800609e:	07d9      	lsls	r1, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_vfiprintf_r+0x32>
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_vfiprintf_r+0x32>
 80060a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060aa:	f7ff fead 	bl	8005e08 <__retarget_lock_acquire_recursive>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	d501      	bpl.n	80060b8 <_vfiprintf_r+0x3c>
 80060b4:	692b      	ldr	r3, [r5, #16]
 80060b6:	b9eb      	cbnz	r3, 80060f4 <_vfiprintf_r+0x78>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff fc7e 	bl	80059bc <__swsetup_r>
 80060c0:	b1c0      	cbz	r0, 80060f4 <_vfiprintf_r+0x78>
 80060c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060c4:	07dc      	lsls	r4, r3, #31
 80060c6:	d50e      	bpl.n	80060e6 <_vfiprintf_r+0x6a>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	b01d      	add	sp, #116	; 0x74
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	4b7b      	ldr	r3, [pc, #492]	; (80062c0 <_vfiprintf_r+0x244>)
 80060d4:	429d      	cmp	r5, r3
 80060d6:	d101      	bne.n	80060dc <_vfiprintf_r+0x60>
 80060d8:	68b5      	ldr	r5, [r6, #8]
 80060da:	e7df      	b.n	800609c <_vfiprintf_r+0x20>
 80060dc:	4b79      	ldr	r3, [pc, #484]	; (80062c4 <_vfiprintf_r+0x248>)
 80060de:	429d      	cmp	r5, r3
 80060e0:	bf08      	it	eq
 80060e2:	68f5      	ldreq	r5, [r6, #12]
 80060e4:	e7da      	b.n	800609c <_vfiprintf_r+0x20>
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	0598      	lsls	r0, r3, #22
 80060ea:	d4ed      	bmi.n	80060c8 <_vfiprintf_r+0x4c>
 80060ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ee:	f7ff fe8c 	bl	8005e0a <__retarget_lock_release_recursive>
 80060f2:	e7e9      	b.n	80060c8 <_vfiprintf_r+0x4c>
 80060f4:	2300      	movs	r3, #0
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	2320      	movs	r3, #32
 80060fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006102:	2330      	movs	r3, #48	; 0x30
 8006104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062c8 <_vfiprintf_r+0x24c>
 8006108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800610c:	f04f 0901 	mov.w	r9, #1
 8006110:	4623      	mov	r3, r4
 8006112:	469a      	mov	sl, r3
 8006114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006118:	b10a      	cbz	r2, 800611e <_vfiprintf_r+0xa2>
 800611a:	2a25      	cmp	r2, #37	; 0x25
 800611c:	d1f9      	bne.n	8006112 <_vfiprintf_r+0x96>
 800611e:	ebba 0b04 	subs.w	fp, sl, r4
 8006122:	d00b      	beq.n	800613c <_vfiprintf_r+0xc0>
 8006124:	465b      	mov	r3, fp
 8006126:	4622      	mov	r2, r4
 8006128:	4629      	mov	r1, r5
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff ff93 	bl	8006056 <__sfputs_r>
 8006130:	3001      	adds	r0, #1
 8006132:	f000 80aa 	beq.w	800628a <_vfiprintf_r+0x20e>
 8006136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006138:	445a      	add	r2, fp
 800613a:	9209      	str	r2, [sp, #36]	; 0x24
 800613c:	f89a 3000 	ldrb.w	r3, [sl]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a2 	beq.w	800628a <_vfiprintf_r+0x20e>
 8006146:	2300      	movs	r3, #0
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006150:	f10a 0a01 	add.w	sl, sl, #1
 8006154:	9304      	str	r3, [sp, #16]
 8006156:	9307      	str	r3, [sp, #28]
 8006158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800615c:	931a      	str	r3, [sp, #104]	; 0x68
 800615e:	4654      	mov	r4, sl
 8006160:	2205      	movs	r2, #5
 8006162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006166:	4858      	ldr	r0, [pc, #352]	; (80062c8 <_vfiprintf_r+0x24c>)
 8006168:	f7fa f842 	bl	80001f0 <memchr>
 800616c:	9a04      	ldr	r2, [sp, #16]
 800616e:	b9d8      	cbnz	r0, 80061a8 <_vfiprintf_r+0x12c>
 8006170:	06d1      	lsls	r1, r2, #27
 8006172:	bf44      	itt	mi
 8006174:	2320      	movmi	r3, #32
 8006176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800617a:	0713      	lsls	r3, r2, #28
 800617c:	bf44      	itt	mi
 800617e:	232b      	movmi	r3, #43	; 0x2b
 8006180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006184:	f89a 3000 	ldrb.w	r3, [sl]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d015      	beq.n	80061b8 <_vfiprintf_r+0x13c>
 800618c:	9a07      	ldr	r2, [sp, #28]
 800618e:	4654      	mov	r4, sl
 8006190:	2000      	movs	r0, #0
 8006192:	f04f 0c0a 	mov.w	ip, #10
 8006196:	4621      	mov	r1, r4
 8006198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800619c:	3b30      	subs	r3, #48	; 0x30
 800619e:	2b09      	cmp	r3, #9
 80061a0:	d94e      	bls.n	8006240 <_vfiprintf_r+0x1c4>
 80061a2:	b1b0      	cbz	r0, 80061d2 <_vfiprintf_r+0x156>
 80061a4:	9207      	str	r2, [sp, #28]
 80061a6:	e014      	b.n	80061d2 <_vfiprintf_r+0x156>
 80061a8:	eba0 0308 	sub.w	r3, r0, r8
 80061ac:	fa09 f303 	lsl.w	r3, r9, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	46a2      	mov	sl, r4
 80061b6:	e7d2      	b.n	800615e <_vfiprintf_r+0xe2>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	1d19      	adds	r1, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9103      	str	r1, [sp, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bfbb      	ittet	lt
 80061c4:	425b      	neglt	r3, r3
 80061c6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ca:	9307      	strge	r3, [sp, #28]
 80061cc:	9307      	strlt	r3, [sp, #28]
 80061ce:	bfb8      	it	lt
 80061d0:	9204      	strlt	r2, [sp, #16]
 80061d2:	7823      	ldrb	r3, [r4, #0]
 80061d4:	2b2e      	cmp	r3, #46	; 0x2e
 80061d6:	d10c      	bne.n	80061f2 <_vfiprintf_r+0x176>
 80061d8:	7863      	ldrb	r3, [r4, #1]
 80061da:	2b2a      	cmp	r3, #42	; 0x2a
 80061dc:	d135      	bne.n	800624a <_vfiprintf_r+0x1ce>
 80061de:	9b03      	ldr	r3, [sp, #12]
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	9203      	str	r2, [sp, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bfb8      	it	lt
 80061ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ee:	3402      	adds	r4, #2
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062d8 <_vfiprintf_r+0x25c>
 80061f6:	7821      	ldrb	r1, [r4, #0]
 80061f8:	2203      	movs	r2, #3
 80061fa:	4650      	mov	r0, sl
 80061fc:	f7f9 fff8 	bl	80001f0 <memchr>
 8006200:	b140      	cbz	r0, 8006214 <_vfiprintf_r+0x198>
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	eba0 000a 	sub.w	r0, r0, sl
 8006208:	fa03 f000 	lsl.w	r0, r3, r0
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	4303      	orrs	r3, r0
 8006210:	3401      	adds	r4, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	482c      	ldr	r0, [pc, #176]	; (80062cc <_vfiprintf_r+0x250>)
 800621a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800621e:	2206      	movs	r2, #6
 8006220:	f7f9 ffe6 	bl	80001f0 <memchr>
 8006224:	2800      	cmp	r0, #0
 8006226:	d03f      	beq.n	80062a8 <_vfiprintf_r+0x22c>
 8006228:	4b29      	ldr	r3, [pc, #164]	; (80062d0 <_vfiprintf_r+0x254>)
 800622a:	bb1b      	cbnz	r3, 8006274 <_vfiprintf_r+0x1f8>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	3307      	adds	r3, #7
 8006230:	f023 0307 	bic.w	r3, r3, #7
 8006234:	3308      	adds	r3, #8
 8006236:	9303      	str	r3, [sp, #12]
 8006238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623a:	443b      	add	r3, r7
 800623c:	9309      	str	r3, [sp, #36]	; 0x24
 800623e:	e767      	b.n	8006110 <_vfiprintf_r+0x94>
 8006240:	fb0c 3202 	mla	r2, ip, r2, r3
 8006244:	460c      	mov	r4, r1
 8006246:	2001      	movs	r0, #1
 8006248:	e7a5      	b.n	8006196 <_vfiprintf_r+0x11a>
 800624a:	2300      	movs	r3, #0
 800624c:	3401      	adds	r4, #1
 800624e:	9305      	str	r3, [sp, #20]
 8006250:	4619      	mov	r1, r3
 8006252:	f04f 0c0a 	mov.w	ip, #10
 8006256:	4620      	mov	r0, r4
 8006258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625c:	3a30      	subs	r2, #48	; 0x30
 800625e:	2a09      	cmp	r2, #9
 8006260:	d903      	bls.n	800626a <_vfiprintf_r+0x1ee>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c5      	beq.n	80061f2 <_vfiprintf_r+0x176>
 8006266:	9105      	str	r1, [sp, #20]
 8006268:	e7c3      	b.n	80061f2 <_vfiprintf_r+0x176>
 800626a:	fb0c 2101 	mla	r1, ip, r1, r2
 800626e:	4604      	mov	r4, r0
 8006270:	2301      	movs	r3, #1
 8006272:	e7f0      	b.n	8006256 <_vfiprintf_r+0x1da>
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <_vfiprintf_r+0x258>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	4630      	mov	r0, r6
 8006280:	f3af 8000 	nop.w
 8006284:	4607      	mov	r7, r0
 8006286:	1c78      	adds	r0, r7, #1
 8006288:	d1d6      	bne.n	8006238 <_vfiprintf_r+0x1bc>
 800628a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800628c:	07d9      	lsls	r1, r3, #31
 800628e:	d405      	bmi.n	800629c <_vfiprintf_r+0x220>
 8006290:	89ab      	ldrh	r3, [r5, #12]
 8006292:	059a      	lsls	r2, r3, #22
 8006294:	d402      	bmi.n	800629c <_vfiprintf_r+0x220>
 8006296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006298:	f7ff fdb7 	bl	8005e0a <__retarget_lock_release_recursive>
 800629c:	89ab      	ldrh	r3, [r5, #12]
 800629e:	065b      	lsls	r3, r3, #25
 80062a0:	f53f af12 	bmi.w	80060c8 <_vfiprintf_r+0x4c>
 80062a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a6:	e711      	b.n	80060cc <_vfiprintf_r+0x50>
 80062a8:	ab03      	add	r3, sp, #12
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	462a      	mov	r2, r5
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <_vfiprintf_r+0x258>)
 80062b0:	a904      	add	r1, sp, #16
 80062b2:	4630      	mov	r0, r6
 80062b4:	f000 f880 	bl	80063b8 <_printf_i>
 80062b8:	e7e4      	b.n	8006284 <_vfiprintf_r+0x208>
 80062ba:	bf00      	nop
 80062bc:	08006a1c 	.word	0x08006a1c
 80062c0:	08006a3c 	.word	0x08006a3c
 80062c4:	080069fc 	.word	0x080069fc
 80062c8:	08006a5c 	.word	0x08006a5c
 80062cc:	08006a66 	.word	0x08006a66
 80062d0:	00000000 	.word	0x00000000
 80062d4:	08006057 	.word	0x08006057
 80062d8:	08006a62 	.word	0x08006a62

080062dc <_printf_common>:
 80062dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	4616      	mov	r6, r2
 80062e2:	4699      	mov	r9, r3
 80062e4:	688a      	ldr	r2, [r1, #8]
 80062e6:	690b      	ldr	r3, [r1, #16]
 80062e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	bfb8      	it	lt
 80062f0:	4613      	movlt	r3, r2
 80062f2:	6033      	str	r3, [r6, #0]
 80062f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062f8:	4607      	mov	r7, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	b10a      	cbz	r2, 8006302 <_printf_common+0x26>
 80062fe:	3301      	adds	r3, #1
 8006300:	6033      	str	r3, [r6, #0]
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	0699      	lsls	r1, r3, #26
 8006306:	bf42      	ittt	mi
 8006308:	6833      	ldrmi	r3, [r6, #0]
 800630a:	3302      	addmi	r3, #2
 800630c:	6033      	strmi	r3, [r6, #0]
 800630e:	6825      	ldr	r5, [r4, #0]
 8006310:	f015 0506 	ands.w	r5, r5, #6
 8006314:	d106      	bne.n	8006324 <_printf_common+0x48>
 8006316:	f104 0a19 	add.w	sl, r4, #25
 800631a:	68e3      	ldr	r3, [r4, #12]
 800631c:	6832      	ldr	r2, [r6, #0]
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	42ab      	cmp	r3, r5
 8006322:	dc26      	bgt.n	8006372 <_printf_common+0x96>
 8006324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006328:	1e13      	subs	r3, r2, #0
 800632a:	6822      	ldr	r2, [r4, #0]
 800632c:	bf18      	it	ne
 800632e:	2301      	movne	r3, #1
 8006330:	0692      	lsls	r2, r2, #26
 8006332:	d42b      	bmi.n	800638c <_printf_common+0xb0>
 8006334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006338:	4649      	mov	r1, r9
 800633a:	4638      	mov	r0, r7
 800633c:	47c0      	blx	r8
 800633e:	3001      	adds	r0, #1
 8006340:	d01e      	beq.n	8006380 <_printf_common+0xa4>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	68e5      	ldr	r5, [r4, #12]
 8006346:	6832      	ldr	r2, [r6, #0]
 8006348:	f003 0306 	and.w	r3, r3, #6
 800634c:	2b04      	cmp	r3, #4
 800634e:	bf08      	it	eq
 8006350:	1aad      	subeq	r5, r5, r2
 8006352:	68a3      	ldr	r3, [r4, #8]
 8006354:	6922      	ldr	r2, [r4, #16]
 8006356:	bf0c      	ite	eq
 8006358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800635c:	2500      	movne	r5, #0
 800635e:	4293      	cmp	r3, r2
 8006360:	bfc4      	itt	gt
 8006362:	1a9b      	subgt	r3, r3, r2
 8006364:	18ed      	addgt	r5, r5, r3
 8006366:	2600      	movs	r6, #0
 8006368:	341a      	adds	r4, #26
 800636a:	42b5      	cmp	r5, r6
 800636c:	d11a      	bne.n	80063a4 <_printf_common+0xc8>
 800636e:	2000      	movs	r0, #0
 8006370:	e008      	b.n	8006384 <_printf_common+0xa8>
 8006372:	2301      	movs	r3, #1
 8006374:	4652      	mov	r2, sl
 8006376:	4649      	mov	r1, r9
 8006378:	4638      	mov	r0, r7
 800637a:	47c0      	blx	r8
 800637c:	3001      	adds	r0, #1
 800637e:	d103      	bne.n	8006388 <_printf_common+0xac>
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006388:	3501      	adds	r5, #1
 800638a:	e7c6      	b.n	800631a <_printf_common+0x3e>
 800638c:	18e1      	adds	r1, r4, r3
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	2030      	movs	r0, #48	; 0x30
 8006392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006396:	4422      	add	r2, r4
 8006398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800639c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063a0:	3302      	adds	r3, #2
 80063a2:	e7c7      	b.n	8006334 <_printf_common+0x58>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4622      	mov	r2, r4
 80063a8:	4649      	mov	r1, r9
 80063aa:	4638      	mov	r0, r7
 80063ac:	47c0      	blx	r8
 80063ae:	3001      	adds	r0, #1
 80063b0:	d0e6      	beq.n	8006380 <_printf_common+0xa4>
 80063b2:	3601      	adds	r6, #1
 80063b4:	e7d9      	b.n	800636a <_printf_common+0x8e>
	...

080063b8 <_printf_i>:
 80063b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	460c      	mov	r4, r1
 80063be:	4691      	mov	r9, r2
 80063c0:	7e27      	ldrb	r7, [r4, #24]
 80063c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063c4:	2f78      	cmp	r7, #120	; 0x78
 80063c6:	4680      	mov	r8, r0
 80063c8:	469a      	mov	sl, r3
 80063ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ce:	d807      	bhi.n	80063e0 <_printf_i+0x28>
 80063d0:	2f62      	cmp	r7, #98	; 0x62
 80063d2:	d80a      	bhi.n	80063ea <_printf_i+0x32>
 80063d4:	2f00      	cmp	r7, #0
 80063d6:	f000 80d8 	beq.w	800658a <_printf_i+0x1d2>
 80063da:	2f58      	cmp	r7, #88	; 0x58
 80063dc:	f000 80a3 	beq.w	8006526 <_printf_i+0x16e>
 80063e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063e8:	e03a      	b.n	8006460 <_printf_i+0xa8>
 80063ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ee:	2b15      	cmp	r3, #21
 80063f0:	d8f6      	bhi.n	80063e0 <_printf_i+0x28>
 80063f2:	a001      	add	r0, pc, #4	; (adr r0, 80063f8 <_printf_i+0x40>)
 80063f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063f8:	08006451 	.word	0x08006451
 80063fc:	08006465 	.word	0x08006465
 8006400:	080063e1 	.word	0x080063e1
 8006404:	080063e1 	.word	0x080063e1
 8006408:	080063e1 	.word	0x080063e1
 800640c:	080063e1 	.word	0x080063e1
 8006410:	08006465 	.word	0x08006465
 8006414:	080063e1 	.word	0x080063e1
 8006418:	080063e1 	.word	0x080063e1
 800641c:	080063e1 	.word	0x080063e1
 8006420:	080063e1 	.word	0x080063e1
 8006424:	08006571 	.word	0x08006571
 8006428:	08006495 	.word	0x08006495
 800642c:	08006553 	.word	0x08006553
 8006430:	080063e1 	.word	0x080063e1
 8006434:	080063e1 	.word	0x080063e1
 8006438:	08006593 	.word	0x08006593
 800643c:	080063e1 	.word	0x080063e1
 8006440:	08006495 	.word	0x08006495
 8006444:	080063e1 	.word	0x080063e1
 8006448:	080063e1 	.word	0x080063e1
 800644c:	0800655b 	.word	0x0800655b
 8006450:	680b      	ldr	r3, [r1, #0]
 8006452:	1d1a      	adds	r2, r3, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	600a      	str	r2, [r1, #0]
 8006458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800645c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006460:	2301      	movs	r3, #1
 8006462:	e0a3      	b.n	80065ac <_printf_i+0x1f4>
 8006464:	6825      	ldr	r5, [r4, #0]
 8006466:	6808      	ldr	r0, [r1, #0]
 8006468:	062e      	lsls	r6, r5, #24
 800646a:	f100 0304 	add.w	r3, r0, #4
 800646e:	d50a      	bpl.n	8006486 <_printf_i+0xce>
 8006470:	6805      	ldr	r5, [r0, #0]
 8006472:	600b      	str	r3, [r1, #0]
 8006474:	2d00      	cmp	r5, #0
 8006476:	da03      	bge.n	8006480 <_printf_i+0xc8>
 8006478:	232d      	movs	r3, #45	; 0x2d
 800647a:	426d      	negs	r5, r5
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006480:	485e      	ldr	r0, [pc, #376]	; (80065fc <_printf_i+0x244>)
 8006482:	230a      	movs	r3, #10
 8006484:	e019      	b.n	80064ba <_printf_i+0x102>
 8006486:	f015 0f40 	tst.w	r5, #64	; 0x40
 800648a:	6805      	ldr	r5, [r0, #0]
 800648c:	600b      	str	r3, [r1, #0]
 800648e:	bf18      	it	ne
 8006490:	b22d      	sxthne	r5, r5
 8006492:	e7ef      	b.n	8006474 <_printf_i+0xbc>
 8006494:	680b      	ldr	r3, [r1, #0]
 8006496:	6825      	ldr	r5, [r4, #0]
 8006498:	1d18      	adds	r0, r3, #4
 800649a:	6008      	str	r0, [r1, #0]
 800649c:	0628      	lsls	r0, r5, #24
 800649e:	d501      	bpl.n	80064a4 <_printf_i+0xec>
 80064a0:	681d      	ldr	r5, [r3, #0]
 80064a2:	e002      	b.n	80064aa <_printf_i+0xf2>
 80064a4:	0669      	lsls	r1, r5, #25
 80064a6:	d5fb      	bpl.n	80064a0 <_printf_i+0xe8>
 80064a8:	881d      	ldrh	r5, [r3, #0]
 80064aa:	4854      	ldr	r0, [pc, #336]	; (80065fc <_printf_i+0x244>)
 80064ac:	2f6f      	cmp	r7, #111	; 0x6f
 80064ae:	bf0c      	ite	eq
 80064b0:	2308      	moveq	r3, #8
 80064b2:	230a      	movne	r3, #10
 80064b4:	2100      	movs	r1, #0
 80064b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ba:	6866      	ldr	r6, [r4, #4]
 80064bc:	60a6      	str	r6, [r4, #8]
 80064be:	2e00      	cmp	r6, #0
 80064c0:	bfa2      	ittt	ge
 80064c2:	6821      	ldrge	r1, [r4, #0]
 80064c4:	f021 0104 	bicge.w	r1, r1, #4
 80064c8:	6021      	strge	r1, [r4, #0]
 80064ca:	b90d      	cbnz	r5, 80064d0 <_printf_i+0x118>
 80064cc:	2e00      	cmp	r6, #0
 80064ce:	d04d      	beq.n	800656c <_printf_i+0x1b4>
 80064d0:	4616      	mov	r6, r2
 80064d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80064d6:	fb03 5711 	mls	r7, r3, r1, r5
 80064da:	5dc7      	ldrb	r7, [r0, r7]
 80064dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064e0:	462f      	mov	r7, r5
 80064e2:	42bb      	cmp	r3, r7
 80064e4:	460d      	mov	r5, r1
 80064e6:	d9f4      	bls.n	80064d2 <_printf_i+0x11a>
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d10b      	bne.n	8006504 <_printf_i+0x14c>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	07df      	lsls	r7, r3, #31
 80064f0:	d508      	bpl.n	8006504 <_printf_i+0x14c>
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	6861      	ldr	r1, [r4, #4]
 80064f6:	4299      	cmp	r1, r3
 80064f8:	bfde      	ittt	le
 80064fa:	2330      	movle	r3, #48	; 0x30
 80064fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006500:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006504:	1b92      	subs	r2, r2, r6
 8006506:	6122      	str	r2, [r4, #16]
 8006508:	f8cd a000 	str.w	sl, [sp]
 800650c:	464b      	mov	r3, r9
 800650e:	aa03      	add	r2, sp, #12
 8006510:	4621      	mov	r1, r4
 8006512:	4640      	mov	r0, r8
 8006514:	f7ff fee2 	bl	80062dc <_printf_common>
 8006518:	3001      	adds	r0, #1
 800651a:	d14c      	bne.n	80065b6 <_printf_i+0x1fe>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	b004      	add	sp, #16
 8006522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006526:	4835      	ldr	r0, [pc, #212]	; (80065fc <_printf_i+0x244>)
 8006528:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	680e      	ldr	r6, [r1, #0]
 8006530:	061f      	lsls	r7, r3, #24
 8006532:	f856 5b04 	ldr.w	r5, [r6], #4
 8006536:	600e      	str	r6, [r1, #0]
 8006538:	d514      	bpl.n	8006564 <_printf_i+0x1ac>
 800653a:	07d9      	lsls	r1, r3, #31
 800653c:	bf44      	itt	mi
 800653e:	f043 0320 	orrmi.w	r3, r3, #32
 8006542:	6023      	strmi	r3, [r4, #0]
 8006544:	b91d      	cbnz	r5, 800654e <_printf_i+0x196>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	f023 0320 	bic.w	r3, r3, #32
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	2310      	movs	r3, #16
 8006550:	e7b0      	b.n	80064b4 <_printf_i+0xfc>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	f043 0320 	orr.w	r3, r3, #32
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	2378      	movs	r3, #120	; 0x78
 800655c:	4828      	ldr	r0, [pc, #160]	; (8006600 <_printf_i+0x248>)
 800655e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006562:	e7e3      	b.n	800652c <_printf_i+0x174>
 8006564:	065e      	lsls	r6, r3, #25
 8006566:	bf48      	it	mi
 8006568:	b2ad      	uxthmi	r5, r5
 800656a:	e7e6      	b.n	800653a <_printf_i+0x182>
 800656c:	4616      	mov	r6, r2
 800656e:	e7bb      	b.n	80064e8 <_printf_i+0x130>
 8006570:	680b      	ldr	r3, [r1, #0]
 8006572:	6826      	ldr	r6, [r4, #0]
 8006574:	6960      	ldr	r0, [r4, #20]
 8006576:	1d1d      	adds	r5, r3, #4
 8006578:	600d      	str	r5, [r1, #0]
 800657a:	0635      	lsls	r5, r6, #24
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	d501      	bpl.n	8006584 <_printf_i+0x1cc>
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	e002      	b.n	800658a <_printf_i+0x1d2>
 8006584:	0671      	lsls	r1, r6, #25
 8006586:	d5fb      	bpl.n	8006580 <_printf_i+0x1c8>
 8006588:	8018      	strh	r0, [r3, #0]
 800658a:	2300      	movs	r3, #0
 800658c:	6123      	str	r3, [r4, #16]
 800658e:	4616      	mov	r6, r2
 8006590:	e7ba      	b.n	8006508 <_printf_i+0x150>
 8006592:	680b      	ldr	r3, [r1, #0]
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	600a      	str	r2, [r1, #0]
 8006598:	681e      	ldr	r6, [r3, #0]
 800659a:	6862      	ldr	r2, [r4, #4]
 800659c:	2100      	movs	r1, #0
 800659e:	4630      	mov	r0, r6
 80065a0:	f7f9 fe26 	bl	80001f0 <memchr>
 80065a4:	b108      	cbz	r0, 80065aa <_printf_i+0x1f2>
 80065a6:	1b80      	subs	r0, r0, r6
 80065a8:	6060      	str	r0, [r4, #4]
 80065aa:	6863      	ldr	r3, [r4, #4]
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	2300      	movs	r3, #0
 80065b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b4:	e7a8      	b.n	8006508 <_printf_i+0x150>
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	4632      	mov	r2, r6
 80065ba:	4649      	mov	r1, r9
 80065bc:	4640      	mov	r0, r8
 80065be:	47d0      	blx	sl
 80065c0:	3001      	adds	r0, #1
 80065c2:	d0ab      	beq.n	800651c <_printf_i+0x164>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	079b      	lsls	r3, r3, #30
 80065c8:	d413      	bmi.n	80065f2 <_printf_i+0x23a>
 80065ca:	68e0      	ldr	r0, [r4, #12]
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	4298      	cmp	r0, r3
 80065d0:	bfb8      	it	lt
 80065d2:	4618      	movlt	r0, r3
 80065d4:	e7a4      	b.n	8006520 <_printf_i+0x168>
 80065d6:	2301      	movs	r3, #1
 80065d8:	4632      	mov	r2, r6
 80065da:	4649      	mov	r1, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	47d0      	blx	sl
 80065e0:	3001      	adds	r0, #1
 80065e2:	d09b      	beq.n	800651c <_printf_i+0x164>
 80065e4:	3501      	adds	r5, #1
 80065e6:	68e3      	ldr	r3, [r4, #12]
 80065e8:	9903      	ldr	r1, [sp, #12]
 80065ea:	1a5b      	subs	r3, r3, r1
 80065ec:	42ab      	cmp	r3, r5
 80065ee:	dcf2      	bgt.n	80065d6 <_printf_i+0x21e>
 80065f0:	e7eb      	b.n	80065ca <_printf_i+0x212>
 80065f2:	2500      	movs	r5, #0
 80065f4:	f104 0619 	add.w	r6, r4, #25
 80065f8:	e7f5      	b.n	80065e6 <_printf_i+0x22e>
 80065fa:	bf00      	nop
 80065fc:	08006a6d 	.word	0x08006a6d
 8006600:	08006a7e 	.word	0x08006a7e

08006604 <_sbrk_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d06      	ldr	r5, [pc, #24]	; (8006620 <_sbrk_r+0x1c>)
 8006608:	2300      	movs	r3, #0
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fb fc6c 	bl	8001eec <_sbrk>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_sbrk_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_sbrk_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	20000da8 	.word	0x20000da8

08006624 <__sread>:
 8006624:	b510      	push	{r4, lr}
 8006626:	460c      	mov	r4, r1
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	f000 f8a0 	bl	8006770 <_read_r>
 8006630:	2800      	cmp	r0, #0
 8006632:	bfab      	itete	ge
 8006634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006636:	89a3      	ldrhlt	r3, [r4, #12]
 8006638:	181b      	addge	r3, r3, r0
 800663a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800663e:	bfac      	ite	ge
 8006640:	6563      	strge	r3, [r4, #84]	; 0x54
 8006642:	81a3      	strhlt	r3, [r4, #12]
 8006644:	bd10      	pop	{r4, pc}

08006646 <__swrite>:
 8006646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664a:	461f      	mov	r7, r3
 800664c:	898b      	ldrh	r3, [r1, #12]
 800664e:	05db      	lsls	r3, r3, #23
 8006650:	4605      	mov	r5, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4616      	mov	r6, r2
 8006656:	d505      	bpl.n	8006664 <__swrite+0x1e>
 8006658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665c:	2302      	movs	r3, #2
 800665e:	2200      	movs	r2, #0
 8006660:	f000 f868 	bl	8006734 <_lseek_r>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800666a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	4632      	mov	r2, r6
 8006672:	463b      	mov	r3, r7
 8006674:	4628      	mov	r0, r5
 8006676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667a:	f000 b817 	b.w	80066ac <_write_r>

0800667e <__sseek>:
 800667e:	b510      	push	{r4, lr}
 8006680:	460c      	mov	r4, r1
 8006682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006686:	f000 f855 	bl	8006734 <_lseek_r>
 800668a:	1c43      	adds	r3, r0, #1
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	bf15      	itete	ne
 8006690:	6560      	strne	r0, [r4, #84]	; 0x54
 8006692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800669a:	81a3      	strheq	r3, [r4, #12]
 800669c:	bf18      	it	ne
 800669e:	81a3      	strhne	r3, [r4, #12]
 80066a0:	bd10      	pop	{r4, pc}

080066a2 <__sclose>:
 80066a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a6:	f000 b813 	b.w	80066d0 <_close_r>
	...

080066ac <_write_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d07      	ldr	r5, [pc, #28]	; (80066cc <_write_r+0x20>)
 80066b0:	4604      	mov	r4, r0
 80066b2:	4608      	mov	r0, r1
 80066b4:	4611      	mov	r1, r2
 80066b6:	2200      	movs	r2, #0
 80066b8:	602a      	str	r2, [r5, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f7fb fbc5 	bl	8001e4a <_write>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_write_r+0x1e>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_write_r+0x1e>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	20000da8 	.word	0x20000da8

080066d0 <_close_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d06      	ldr	r5, [pc, #24]	; (80066ec <_close_r+0x1c>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fb fbd1 	bl	8001e82 <_close>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_close_r+0x1a>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_close_r+0x1a>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20000da8 	.word	0x20000da8

080066f0 <_fstat_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_fstat_r+0x20>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	f7fb fbcc 	bl	8001e9a <_fstat>
 8006702:	1c43      	adds	r3, r0, #1
 8006704:	d102      	bne.n	800670c <_fstat_r+0x1c>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	b103      	cbz	r3, 800670c <_fstat_r+0x1c>
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	bd38      	pop	{r3, r4, r5, pc}
 800670e:	bf00      	nop
 8006710:	20000da8 	.word	0x20000da8

08006714 <_isatty_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d06      	ldr	r5, [pc, #24]	; (8006730 <_isatty_r+0x1c>)
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	f7fb fbcb 	bl	8001eba <_isatty>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_isatty_r+0x1a>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_isatty_r+0x1a>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000da8 	.word	0x20000da8

08006734 <_lseek_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	; (8006754 <_lseek_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fb fbc4 	bl	8001ed0 <_lseek>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_lseek_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_lseek_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20000da8 	.word	0x20000da8

08006758 <__malloc_lock>:
 8006758:	4801      	ldr	r0, [pc, #4]	; (8006760 <__malloc_lock+0x8>)
 800675a:	f7ff bb55 	b.w	8005e08 <__retarget_lock_acquire_recursive>
 800675e:	bf00      	nop
 8006760:	20000da0 	.word	0x20000da0

08006764 <__malloc_unlock>:
 8006764:	4801      	ldr	r0, [pc, #4]	; (800676c <__malloc_unlock+0x8>)
 8006766:	f7ff bb50 	b.w	8005e0a <__retarget_lock_release_recursive>
 800676a:	bf00      	nop
 800676c:	20000da0 	.word	0x20000da0

08006770 <_read_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d07      	ldr	r5, [pc, #28]	; (8006790 <_read_r+0x20>)
 8006774:	4604      	mov	r4, r0
 8006776:	4608      	mov	r0, r1
 8006778:	4611      	mov	r1, r2
 800677a:	2200      	movs	r2, #0
 800677c:	602a      	str	r2, [r5, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	f7fb fb46 	bl	8001e10 <_read>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_read_r+0x1e>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_read_r+0x1e>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000da8 	.word	0x20000da8

08006794 <_init>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr

080067a0 <_fini>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr
