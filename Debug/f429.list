
f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08006e24  08006e24  00016e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f8  080070f8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007100  08007100  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007104  08007104  00017104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08007108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200000b8  080071c0  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  080071c0  00020dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ca  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c20  00000000  00000000  0002f3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00031fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00032c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247e9  00000000  00000000  00033800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f86c  00000000  00000000  00057fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d85d2  00000000  00000000  00067855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013fe27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003990  00000000  00000000  0013fe7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e0c 	.word	0x08006e0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08006e0c 	.word	0x08006e0c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_DMA_Init+0xa8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_DMA_Init+0xa8>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_DMA_Init+0xa8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_DMA_Init+0xa8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200b      	movs	r0, #11
 80005cc:	f003 fa57 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005d0:	200b      	movs	r0, #11
 80005d2:	f003 fa70 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	200f      	movs	r0, #15
 80005dc:	f003 fa4f 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e0:	200f      	movs	r0, #15
 80005e2:	f003 fa68 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2038      	movs	r0, #56	; 0x38
 80005ec:	f003 fa47 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005f0:	2038      	movs	r0, #56	; 0x38
 80005f2:	f003 fa60 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	203b      	movs	r0, #59	; 0x3b
 80005fc:	f003 fa3f 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000600:	203b      	movs	r0, #59	; 0x3b
 8000602:	f003 fa58 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2044      	movs	r0, #68	; 0x44
 800060c:	f003 fa37 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000610:	2044      	movs	r0, #68	; 0x44
 8000612:	f003 fa50 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2045      	movs	r0, #69	; 0x45
 800061c:	f003 fa2f 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000620:	2045      	movs	r0, #69	; 0x45
 8000622:	f003 fa48 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4b3b      	ldr	r3, [pc, #236]	; (800073c <MX_GPIO_Init+0x108>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a3a      	ldr	r2, [pc, #232]	; (800073c <MX_GPIO_Init+0x108>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b38      	ldr	r3, [pc, #224]	; (800073c <MX_GPIO_Init+0x108>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b34      	ldr	r3, [pc, #208]	; (800073c <MX_GPIO_Init+0x108>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a33      	ldr	r2, [pc, #204]	; (800073c <MX_GPIO_Init+0x108>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <MX_GPIO_Init+0x108>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_GPIO_Init+0x108>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a2c      	ldr	r2, [pc, #176]	; (800073c <MX_GPIO_Init+0x108>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <MX_GPIO_Init+0x108>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_GPIO_Init+0x108>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a25      	ldr	r2, [pc, #148]	; (800073c <MX_GPIO_Init+0x108>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_GPIO_Init+0x108>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_GPIO_Init+0x108>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1e      	ldr	r2, [pc, #120]	; (800073c <MX_GPIO_Init+0x108>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_GPIO_Init+0x108>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_GPIO_Init+0x108>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_GPIO_Init+0x108>)
 80006e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_GPIO_Init+0x108>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_GPIO_Init+0x108>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <MX_GPIO_Init+0x108>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_GPIO_Init+0x108>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000714:	f003 fe80 	bl	8004418 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x10c>)
 8000730:	f003 fcc6 	bl	80040c0 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3730      	adds	r7, #48	; 0x30
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40021800 	.word	0x40021800

08000744 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af04      	add	r7, sp, #16
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8000754:	2300      	movs	r3, #0
 8000756:	82fb      	strh	r3, [r7, #22]
 8000758:	2300      	movs	r3, #0
 800075a:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	3301      	adds	r3, #1
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000768:	4618      	mov	r0, r3
 800076a:	f001 ff91 	bl	8002690 <WIZCHIP_READ>
 800076e:	4603      	mov	r3, r0
 8000770:	2b1c      	cmp	r3, #28
 8000772:	f200 80fc 	bhi.w	800096e <loopback_tcps+0x22a>
 8000776:	a201      	add	r2, pc, #4	; (adr r2, 800077c <loopback_tcps+0x38>)
 8000778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077c:	08000953 	.word	0x08000953
 8000780:	0800096f 	.word	0x0800096f
 8000784:	0800096f 	.word	0x0800096f
 8000788:	0800096f 	.word	0x0800096f
 800078c:	0800096f 	.word	0x0800096f
 8000790:	0800096f 	.word	0x0800096f
 8000794:	0800096f 	.word	0x0800096f
 8000798:	0800096f 	.word	0x0800096f
 800079c:	0800096f 	.word	0x0800096f
 80007a0:	0800096f 	.word	0x0800096f
 80007a4:	0800096f 	.word	0x0800096f
 80007a8:	0800096f 	.word	0x0800096f
 80007ac:	0800096f 	.word	0x0800096f
 80007b0:	0800096f 	.word	0x0800096f
 80007b4:	0800096f 	.word	0x0800096f
 80007b8:	0800096f 	.word	0x0800096f
 80007bc:	0800096f 	.word	0x0800096f
 80007c0:	0800096f 	.word	0x0800096f
 80007c4:	0800096f 	.word	0x0800096f
 80007c8:	08000931 	.word	0x08000931
 80007cc:	0800096f 	.word	0x0800096f
 80007d0:	0800096f 	.word	0x0800096f
 80007d4:	0800096f 	.word	0x0800096f
 80007d8:	080007f1 	.word	0x080007f1
 80007dc:	0800096f 	.word	0x0800096f
 80007e0:	0800096f 	.word	0x0800096f
 80007e4:	0800096f 	.word	0x0800096f
 80007e8:	0800096f 	.word	0x0800096f
 80007ec:	0800090f 	.word	0x0800090f
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	3301      	adds	r3, #1
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 ff47 	bl	8002690 <WIZCHIP_READ>
 8000802:	4603      	mov	r3, r0
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d042      	beq.n	8000892 <loopback_tcps+0x14e>
         {
#ifdef _LOOPBACK_DEBUG_
         getSn_DIPR(sn, destip);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	3301      	adds	r3, #1
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000818:	4618      	mov	r0, r3
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2204      	movs	r2, #4
 8000820:	4619      	mov	r1, r3
 8000822:	f001 ffcf 	bl	80027c4 <WIZCHIP_READ_BUF>
         destport = getSn_DPORT(sn);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	3301      	adds	r3, #1
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000832:	4618      	mov	r0, r3
 8000834:	f001 ff2c 	bl	8002690 <WIZCHIP_READ>
 8000838:	4603      	mov	r3, r0
 800083a:	b29b      	uxth	r3, r3
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	b29c      	uxth	r4, r3
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	3301      	adds	r3, #1
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800084c:	4618      	mov	r0, r3
 800084e:	f001 ff1f 	bl	8002690 <WIZCHIP_READ>
 8000852:	4603      	mov	r3, r0
 8000854:	b29b      	uxth	r3, r3
 8000856:	4423      	add	r3, r4
 8000858:	81fb      	strh	r3, [r7, #14]

         printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 800085a:	79f9      	ldrb	r1, [r7, #7]
 800085c:	7a3b      	ldrb	r3, [r7, #8]
 800085e:	461c      	mov	r4, r3
 8000860:	7a7b      	ldrb	r3, [r7, #9]
 8000862:	461d      	mov	r5, r3
 8000864:	7abb      	ldrb	r3, [r7, #10]
 8000866:	461a      	mov	r2, r3
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	4618      	mov	r0, r3
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	9001      	str	r0, [sp, #4]
 8000872:	9200      	str	r2, [sp, #0]
 8000874:	462b      	mov	r3, r5
 8000876:	4622      	mov	r2, r4
 8000878:	4843      	ldr	r0, [pc, #268]	; (8000988 <loopback_tcps+0x244>)
 800087a:	f005 fafb 	bl	8005e74 <iprintf>
#endif
         setSn_IR(sn,Sn_IR_CON);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	3301      	adds	r3, #1
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800088a:	2101      	movs	r1, #1
 800088c:	4618      	mov	r0, r3
 800088e:	f001 ff4b 	bl	8002728 <WIZCHIP_WRITE>
         }
       if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f002 f8a0 	bl	80029da <getSn_RX_RSR>
 800089a:	4603      	mov	r3, r0
 800089c:	82fb      	strh	r3, [r7, #22]
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d066      	beq.n	8000972 <loopback_tcps+0x22e>
         {
         if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80008a4:	8afb      	ldrh	r3, [r7, #22]
 80008a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008aa:	d902      	bls.n	80008b2 <loopback_tcps+0x16e>
 80008ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008b0:	82fb      	strh	r3, [r7, #22]
         ret = recv(sn, buf, size);
 80008b2:	8afa      	ldrh	r2, [r7, #22]
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	6839      	ldr	r1, [r7, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fe0b 	bl	80014d4 <recv>
 80008be:	6138      	str	r0, [r7, #16]

         if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	dc01      	bgt.n	80008ca <loopback_tcps+0x186>
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	e059      	b.n	800097e <loopback_tcps+0x23a>
         sentsize = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	82bb      	strh	r3, [r7, #20]

         while(size != sentsize)
 80008ce:	e019      	b.n	8000904 <loopback_tcps+0x1c0>
         {
            ret = send(sn, buf+sentsize, size-sentsize);
 80008d0:	8abb      	ldrh	r3, [r7, #20]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	18d1      	adds	r1, r2, r3
 80008d6:	8afa      	ldrh	r2, [r7, #22]
 80008d8:	8abb      	ldrh	r3, [r7, #20]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29a      	uxth	r2, r3
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fcfd 	bl	80012e0 <send>
 80008e6:	6138      	str	r0, [r7, #16]
            if(ret < 0)
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	da05      	bge.n	80008fa <loopback_tcps+0x1b6>
            {
               close(sn);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fbab 	bl	800104c <close>
               return ret;
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	e041      	b.n	800097e <loopback_tcps+0x23a>
            }
            sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	8abb      	ldrh	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	82bb      	strh	r3, [r7, #20]
         while(size != sentsize)
 8000904:	8afa      	ldrh	r2, [r7, #22]
 8000906:	8abb      	ldrh	r3, [r7, #20]
 8000908:	429a      	cmp	r2, r3
 800090a:	d1e1      	bne.n	80008d0 <loopback_tcps+0x18c>
         }
         }
         break;
 800090c:	e031      	b.n	8000972 <loopback_tcps+0x22e>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fc6f 	bl	80011f4 <disconnect>
 8000916:	4603      	mov	r3, r0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d001      	beq.n	8000924 <loopback_tcps+0x1e0>
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	e02c      	b.n	800097e <loopback_tcps+0x23a>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4619      	mov	r1, r3
 8000928:	4818      	ldr	r0, [pc, #96]	; (800098c <loopback_tcps+0x248>)
 800092a:	f005 faa3 	bl	8005e74 <iprintf>
#endif
         break;
 800092e:	e025      	b.n	800097c <loopback_tcps+0x238>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
       printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	88ba      	ldrh	r2, [r7, #4]
 8000934:	4619      	mov	r1, r3
 8000936:	4816      	ldr	r0, [pc, #88]	; (8000990 <loopback_tcps+0x24c>)
 8000938:	f005 fa9c 	bl	8005e74 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fbf2 	bl	8001128 <listen>
 8000944:	4603      	mov	r3, r0
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d013      	beq.n	8000976 <loopback_tcps+0x232>
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	e015      	b.n	800097e <loopback_tcps+0x23a>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8000952:	88ba      	ldrh	r2, [r7, #4]
 8000954:	79f8      	ldrb	r0, [r7, #7]
 8000956:	2300      	movs	r3, #0
 8000958:	2101      	movs	r1, #1
 800095a:	f000 fa5f 	bl	8000e1c <socket>
 800095e:	4603      	mov	r3, r0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	429a      	cmp	r2, r3
 8000968:	d007      	beq.n	800097a <loopback_tcps+0x236>
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	e007      	b.n	800097e <loopback_tcps+0x23a>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 800096e:	bf00      	nop
 8000970:	e004      	b.n	800097c <loopback_tcps+0x238>
         break;
 8000972:	bf00      	nop
 8000974:	e002      	b.n	800097c <loopback_tcps+0x238>
         break;
 8000976:	bf00      	nop
 8000978:	e000      	b.n	800097c <loopback_tcps+0x238>
         break;
 800097a:	bf00      	nop
   }
   return 1;
 800097c:	2301      	movs	r3, #1
}
 800097e:	4618      	mov	r0, r3
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bdb0      	pop	{r4, r5, r7, pc}
 8000986:	bf00      	nop
 8000988:	08006e24 	.word	0x08006e24
 800098c:	08006e48 	.word	0x08006e48
 8000990:	08006e5c 	.word	0x08006e5c

08000994 <loopback_udps>:
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af02      	add	r7, sp, #8
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	80bb      	strh	r3, [r7, #4]
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	3301      	adds	r3, #1
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fe6d 	bl	8002690 <WIZCHIP_READ>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d052      	beq.n	8000a62 <loopback_udps+0xce>
 80009bc:	2b22      	cmp	r3, #34	; 0x22
 80009be:	d165      	bne.n	8000a8c <loopback_udps+0xf8>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 f809 	bl	80029da <getSn_RX_RSR>
 80009c8:	4603      	mov	r3, r0
 80009ca:	82fb      	strh	r3, [r7, #22]
 80009cc:	8afb      	ldrh	r3, [r7, #22]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d05e      	beq.n	8000a90 <loopback_udps+0xfc>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80009d2:	8afb      	ldrh	r3, [r7, #22]
 80009d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d8:	d902      	bls.n	80009e0 <loopback_udps+0x4c>
 80009da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009de:	82fb      	strh	r3, [r7, #22]
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
 80009e0:	f107 010c 	add.w	r1, r7, #12
 80009e4:	8afa      	ldrh	r2, [r7, #22]
 80009e6:	79f8      	ldrb	r0, [r7, #7]
 80009e8:	f107 030a 	add.w	r3, r7, #10
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	460b      	mov	r3, r1
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	f000 ff41 	bl	8001878 <recvfrom>
 80009f6:	6138      	str	r0, [r7, #16]
            if(ret <= 0)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dc07      	bgt.n	8000a0e <loopback_udps+0x7a>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <loopback_udps+0x108>)
 8000a06:	f005 fa35 	bl	8005e74 <iprintf>
#endif
               return ret;
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	e042      	b.n	8000a94 <loopback_udps+0x100>
            }
            size = (uint16_t) ret;
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	82fb      	strh	r3, [r7, #22]
            sentsize = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 8000a16:	e01f      	b.n	8000a58 <loopback_udps+0xc4>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
 8000a18:	8abb      	ldrh	r3, [r7, #20]
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	18d1      	adds	r1, r2, r3
 8000a1e:	8afa      	ldrh	r2, [r7, #22]
 8000a20:	8abb      	ldrh	r3, [r7, #20]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	897b      	ldrh	r3, [r7, #10]
 8000a28:	f107 040c 	add.w	r4, r7, #12
 8000a2c:	79f8      	ldrb	r0, [r7, #7]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4623      	mov	r3, r4
 8000a32:	f000 fe05 	bl	8001640 <sendto>
 8000a36:	6138      	str	r0, [r7, #16]
               if(ret < 0)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da07      	bge.n	8000a4e <loopback_udps+0xba>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <loopback_udps+0x10c>)
 8000a46:	f005 fa15 	bl	8005e74 <iprintf>
#endif
                  return ret;
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	e022      	b.n	8000a94 <loopback_udps+0x100>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	8abb      	ldrh	r3, [r7, #20]
 8000a54:	4413      	add	r3, r2
 8000a56:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 8000a58:	8aba      	ldrh	r2, [r7, #20]
 8000a5a:	8afb      	ldrh	r3, [r7, #22]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d1db      	bne.n	8000a18 <loopback_udps+0x84>
            }
         }
         break;
 8000a60:	e016      	b.n	8000a90 <loopback_udps+0xfc>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 8000a62:	88ba      	ldrh	r2, [r7, #4]
 8000a64:	79f8      	ldrb	r0, [r7, #7]
 8000a66:	2300      	movs	r3, #0
 8000a68:	2102      	movs	r1, #2
 8000a6a:	f000 f9d7 	bl	8000e1c <socket>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d001      	beq.n	8000a7e <loopback_udps+0xea>
            return ret;
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	e00a      	b.n	8000a94 <loopback_udps+0x100>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	88ba      	ldrh	r2, [r7, #4]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <loopback_udps+0x110>)
 8000a86:	f005 f9f5 	bl	8005e74 <iprintf>
#endif
         break;
 8000a8a:	e002      	b.n	8000a92 <loopback_udps+0xfe>
      default :
         break;
 8000a8c:	bf00      	nop
 8000a8e:	e000      	b.n	8000a92 <loopback_udps+0xfe>
         break;
 8000a90:	bf00      	nop
   }
   return 1;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	08006edc 	.word	0x08006edc
 8000aa0:	08006ef8 	.word	0x08006ef8
 8000aa4:	08006f10 	.word	0x08006f10

08000aa8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4 , (uint8_t *)&ch, 1, 0xFFFF);
 8000ab0:	1d39      	adds	r1, r7, #4
 8000ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <__io_putchar+0x20>)
 8000aba:	f004 ff04 	bl	80058c6 <HAL_UART_Transmit>
  return ch;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000d54 	.word	0x20000d54

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08d      	sub	sp, #52	; 0x34
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t tmp;
 int32_t retr = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <main+0xdc>)
 8000ad8:	f107 0418 	add.w	r4, r7, #24
 8000adc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  

 uint8_t retVal, sockStatus;
 int16_t rcvLen;
 uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2};
 8000ae2:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 8000ae6:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f002 fe7c 	bl	80037e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f86e 	bl	8000bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af0:	f7ff fda0 	bl	8000634 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af4:	f7ff fd48 	bl	8000588 <MX_DMA_Init>
  MX_SPI1_Init();
 8000af8:	f001 f840 	bl	8001b7c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000afc:	f001 f870 	bl	8001be0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b00:	f001 f8a4 	bl	8001c4c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b04:	f001 f8d4 	bl	8001cb0 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000b08:	f001 f904 	bl	8001d14 <MX_SPI5_Init>
  MX_SPI6_Init();
 8000b0c:	f001 f934 	bl	8001d78 <MX_SPI6_Init>
  MX_UART4_Init();
 8000b10:	f001 fd4c 	bl	80025ac <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8000b14:	4925      	ldr	r1, [pc, #148]	; (8000bac <main+0xe0>)
 8000b16:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <main+0xe4>)
 8000b18:	f002 f90e 	bl	8002d38 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000b1c:	4925      	ldr	r1, [pc, #148]	; (8000bb4 <main+0xe8>)
 8000b1e:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <main+0xec>)
 8000b20:	f002 f930 	bl	8002d84 <reg_wizchip_spi_cbfunc>
  reg_wizchip_spiburst_cbfunc(spi_rb, spi_wb);
 8000b24:	4923      	ldr	r1, [pc, #140]	; (8000bb4 <main+0xe8>)
 8000b26:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <main+0xec>)
 8000b28:	f002 f958 	bl	8002ddc <reg_wizchip_spiburst_cbfunc>



  /* WIZCHIP SOCKET Buffer initialize */
  if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	4619      	mov	r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	f002 f97e 	bl	8002e34 <ctlwizchip>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3e:	d103      	bne.n	8000b48 <main+0x7c>
  {
     printf("WIZCHIP Initialized fail.\r\n");
 8000b40:	481e      	ldr	r0, [pc, #120]	; (8000bbc <main+0xf0>)
 8000b42:	f005 fa1d 	bl	8005f80 <puts>
     while(1);
 8000b46:	e7fe      	b.n	8000b46 <main+0x7a>
  }

  /* PHY link status check */
  do
  {
     if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 8000b48:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f002 f970 	bl	8002e34 <ctlwizchip>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5a:	d102      	bne.n	8000b62 <main+0x96>
        printf("Unknown PHY Link stauts.\r\n");
 8000b5c:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <main+0xf4>)
 8000b5e:	f005 fa0f 	bl	8005f80 <puts>
  }while(tmp == PHY_LINK_OFF);
 8000b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0ee      	beq.n	8000b48 <main+0x7c>

  network_init();
 8000b6a:	f000 f8cb 	bl	8000d04 <network_init>
//      HAL_Delay(500);
     
//    DHT_data d = DHT_getData(DHT22);
//     printf("Temp: %2.1f \r\n", d.temp );
 
		if( (retr = loopback_tcps(SOCK_TCPS, gDATABUF, 5000)) < 0) {
 8000b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b72:	4914      	ldr	r1, [pc, #80]	; (8000bc4 <main+0xf8>)
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fde5 	bl	8000744 <loopback_tcps>
 8000b7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da03      	bge.n	8000b8a <main+0xbe>
    printf("SOCKET ERROR : %ld\r\n", retr);
 8000b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <main+0xfc>)
 8000b86:	f005 f975 	bl	8005e74 <iprintf>
  }

		if( (retr = loopback_udps(SOCK_UDPS, gDATABUF, 3000)) < 0) {
 8000b8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <main+0xf8>)
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff feff 	bl	8000994 <loopback_udps>
 8000b96:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dae7      	bge.n	8000b6e <main+0xa2>
			printf("SOCKET ERROR : %ld\r\n", retr);
 8000b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <main+0xfc>)
 8000ba2:	f005 f967 	bl	8005e74 <iprintf>
		if( (retr = loopback_tcps(SOCK_TCPS, gDATABUF, 5000)) < 0) {
 8000ba6:	e7e2      	b.n	8000b6e <main+0xa2>
 8000ba8:	08006f88 	.word	0x08006f88
 8000bac:	08000ca5 	.word	0x08000ca5
 8000bb0:	08000c8d 	.word	0x08000c8d
 8000bb4:	08000ce1 	.word	0x08000ce1
 8000bb8:	08000cbd 	.word	0x08000cbd
 8000bbc:	08006f38 	.word	0x08006f38
 8000bc0:	08006f54 	.word	0x08006f54
 8000bc4:	20000104 	.word	0x20000104
 8000bc8:	08006f70 	.word	0x08006f70

08000bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b094      	sub	sp, #80	; 0x50
 8000bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd2:	f107 0320 	add.w	r3, r7, #32
 8000bd6:	2230      	movs	r2, #48	; 0x30
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f005 f942 	bl	8005e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <SystemClock_Config+0xb8>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <SystemClock_Config+0xb8>)
 8000bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <SystemClock_Config+0xb8>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <SystemClock_Config+0xbc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c18:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <SystemClock_Config+0xbc>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <SystemClock_Config+0xbc>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c34:	2310      	movs	r3, #16
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fc03 	bl	800444c <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c4c:	f000 f8e0 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fe66 	bl	800493c <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c76:	f000 f8cb 	bl	8000e10 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <W5500_Select>:

/* USER CODE BEGIN 4 */
void W5500_Select(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET); //CS LOW
 8000c90:	2200      	movs	r2, #0
 8000c92:	2101      	movs	r1, #1
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <W5500_Select+0x14>)
 8000c96:	f003 fbbf 	bl	8004418 <HAL_GPIO_WritePin>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021800 	.word	0x40021800

08000ca4 <W5500_Unselect>:

void W5500_Unselect(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2101      	movs	r1, #1
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <W5500_Unselect+0x14>)
 8000cae:	f003 fbb3 	bl	8004418 <HAL_GPIO_WritePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021800 	.word	0x40021800

08000cbc <spi_rb>:
}

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
  HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
}
uint8_t spi_rb(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi2, &rbuf, 1, 0xFFFFFFFF);
 8000cc2:	1df9      	adds	r1, r7, #7
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <spi_rb+0x20>)
 8000ccc:	f004 f9cb 	bl	8005066 <HAL_SPI_Receive>
	return rbuf;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000904 	.word	0x20000904

08000ce0 <spi_wb>:

void spi_wb(uint8_t b) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &b, 1, 0xFFFFFFFF);
 8000cea:	1df9      	adds	r1, r7, #7
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <spi_wb+0x20>)
 8000cf4:	f004 f87b 	bl	8004dee <HAL_SPI_Transmit>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000904 	.word	0x20000904

08000d04 <network_init>:
void W5500_WriteByte(uint8_t byte) {
  W5500_WriteBuff(&byte, sizeof(byte));
}

void network_init(void)
{
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af04      	add	r7, sp, #16
  uint8_t tmpstr[6];
  ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000d0a:	4939      	ldr	r1, [pc, #228]	; (8000df0 <network_init+0xec>)
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f002 f96f 	bl	8002ff0 <ctlnetwork>
  ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8000d12:	4937      	ldr	r1, [pc, #220]	; (8000df0 <network_init+0xec>)
 8000d14:	2001      	movs	r0, #1
 8000d16:	f002 f96b 	bl	8002ff0 <ctlnetwork>

  // Display Network Information
  ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2008      	movs	r0, #8
 8000d20:	f002 f888 	bl	8002e34 <ctlwizchip>
  printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	4832      	ldr	r0, [pc, #200]	; (8000df4 <network_init+0xf0>)
 8000d2a:	f005 f8a3 	bl	8005e74 <iprintf>
  printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <network_init+0xec>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <network_init+0xec>)
 8000d36:	785b      	ldrb	r3, [r3, #1]
 8000d38:	461c      	mov	r4, r3
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <network_init+0xec>)
 8000d3c:	789b      	ldrb	r3, [r3, #2]
 8000d3e:	461d      	mov	r5, r3
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <network_init+0xec>)
 8000d42:	78db      	ldrb	r3, [r3, #3]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <network_init+0xec>)
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <network_init+0xec>)
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	9101      	str	r1, [sp, #4]
 8000d54:	9200      	str	r2, [sp, #0]
 8000d56:	462b      	mov	r3, r5
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	4826      	ldr	r0, [pc, #152]	; (8000df8 <network_init+0xf4>)
 8000d5e:	f005 f889 	bl	8005e74 <iprintf>
  printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <network_init+0xec>)
 8000d64:	799b      	ldrb	r3, [r3, #6]
 8000d66:	4619      	mov	r1, r3
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <network_init+0xec>)
 8000d6a:	79db      	ldrb	r3, [r3, #7]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <network_init+0xec>)
 8000d70:	7a1b      	ldrb	r3, [r3, #8]
 8000d72:	4618      	mov	r0, r3
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <network_init+0xec>)
 8000d76:	7a5b      	ldrb	r3, [r3, #9]
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	481f      	ldr	r0, [pc, #124]	; (8000dfc <network_init+0xf8>)
 8000d7e:	f005 f879 	bl	8005e74 <iprintf>
  printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <network_init+0xec>)
 8000d84:	7b9b      	ldrb	r3, [r3, #14]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <network_init+0xec>)
 8000d8a:	7bdb      	ldrb	r3, [r3, #15]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <network_init+0xec>)
 8000d90:	7c1b      	ldrb	r3, [r3, #16]
 8000d92:	4618      	mov	r0, r3
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <network_init+0xec>)
 8000d96:	7c5b      	ldrb	r3, [r3, #17]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <network_init+0xfc>)
 8000d9e:	f005 f869 	bl	8005e74 <iprintf>
  printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <network_init+0xec>)
 8000da4:	7a9b      	ldrb	r3, [r3, #10]
 8000da6:	4619      	mov	r1, r3
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <network_init+0xec>)
 8000daa:	7adb      	ldrb	r3, [r3, #11]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <network_init+0xec>)
 8000db0:	7b1b      	ldrb	r3, [r3, #12]
 8000db2:	4618      	mov	r0, r3
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <network_init+0xec>)
 8000db6:	7b5b      	ldrb	r3, [r3, #13]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <network_init+0x100>)
 8000dbe:	f005 f859 	bl	8005e74 <iprintf>
  printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <network_init+0xec>)
 8000dc4:	7c9b      	ldrb	r3, [r3, #18]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <network_init+0xec>)
 8000dca:	7cdb      	ldrb	r3, [r3, #19]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <network_init+0xec>)
 8000dd0:	7d1b      	ldrb	r3, [r3, #20]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <network_init+0xec>)
 8000dd6:	7d5b      	ldrb	r3, [r3, #21]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	4603      	mov	r3, r0
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <network_init+0x104>)
 8000dde:	f005 f849 	bl	8005e74 <iprintf>
  printf("======================\r\n");
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <network_init+0x108>)
 8000de4:	f005 f8cc 	bl	8005f80 <puts>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bdb0      	pop	{r4, r5, r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	08006f98 	.word	0x08006f98
 8000df8:	08006fb0 	.word	0x08006fb0
 8000dfc:	08006fd8 	.word	0x08006fd8
 8000e00:	08006fec 	.word	0x08006fec
 8000e04:	08007000 	.word	0x08007000
 8000e08:	08007014 	.word	0x08007014
 8000e0c:	08007028 	.word	0x08007028

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4604      	mov	r4, r0
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71bb      	strb	r3, [r7, #6]
 8000e32:	460b      	mov	r3, r1
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	70fb      	strb	r3, [r7, #3]
   CHECK_SOCKNUM();
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d902      	bls.n	8000e46 <socket+0x2a>
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	e0f3      	b.n	800102e <socket+0x212>
   switch(protocol)
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d017      	beq.n	8000e7c <socket+0x60>
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	dc12      	bgt.n	8000e76 <socket+0x5a>
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d002      	beq.n	8000e5a <socket+0x3e>
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d011      	beq.n	8000e7c <socket+0x60>
 8000e58:	e00d      	b.n	8000e76 <socket+0x5a>
          /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000e66:	f001 fcad 	bl	80027c4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <socket+0x60>
 8000e70:	f06f 0302 	mvn.w	r3, #2
 8000e74:	e0db      	b.n	800102e <socket+0x212>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000e76:	f06f 0304 	mvn.w	r3, #4
 8000e7a:	e0d8      	b.n	800102e <socket+0x212>
         break;
 8000e7c:	bf00      	nop
   }
   //M20150601 : For SF_TCP_ALIGN & W5300
   //if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
   if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <socket+0x72>
 8000e88:	f06f 0305 	mvn.w	r3, #5
 8000e8c:	e0cf      	b.n	800102e <socket+0x212>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
      
   if(flag != 0)
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d025      	beq.n	8000ee0 <socket+0xc4>
   {
      switch(protocol)
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d002      	beq.n	8000ea0 <socket+0x84>
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d008      	beq.n	8000eb0 <socket+0x94>
                  if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
               }
            #endif
            break;
         default:
            break;
 8000e9e:	e024      	b.n	8000eea <socket+0xce>
              if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d11c      	bne.n	8000ee4 <socket+0xc8>
 8000eaa:	f06f 0305 	mvn.w	r3, #5
 8000eae:	e0be      	b.n	800102e <socket+0x212>
            if(flag & SF_IGMP_VER2)
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <socket+0xac>
               if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db02      	blt.n	8000ec8 <socket+0xac>
 8000ec2:	f06f 0305 	mvn.w	r3, #5
 8000ec6:	e0b2      	b.n	800102e <socket+0x212>
               if(flag & SF_UNI_BLOCK)
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00a      	beq.n	8000ee8 <socket+0xcc>
                  if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db06      	blt.n	8000ee8 <socket+0xcc>
 8000eda:	f06f 0305 	mvn.w	r3, #5
 8000ede:	e0a6      	b.n	800102e <socket+0x212>
      }
   }
 8000ee0:	bf00      	nop
 8000ee2:	e002      	b.n	8000eea <socket+0xce>
            break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <socket+0xce>
            break;
 8000ee8:	bf00      	nop
   close(sn);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f8ad 	bl	800104c <close>
   //M20150601
   #if _WIZCHIP_ == 5300
      setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
      setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f00:	f023 030f 	bic.w	r3, r3, #15
 8000f04:	b25a      	sxtb	r2, r3
 8000f06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	f001 fc09 	bl	8002728 <WIZCHIP_WRITE>
    #endif
   if(!port)
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d110      	bne.n	8000f3e <socket+0x122>
   {
      port = sock_any_port++;
 8000f1c:	4b46      	ldr	r3, [pc, #280]	; (8001038 <socket+0x21c>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	b291      	uxth	r1, r2
 8000f24:	4a44      	ldr	r2, [pc, #272]	; (8001038 <socket+0x21c>)
 8000f26:	8011      	strh	r1, [r2, #0]
 8000f28:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000f2a:	4b43      	ldr	r3, [pc, #268]	; (8001038 <socket+0x21c>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d103      	bne.n	8000f3e <socket+0x122>
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <socket+0x21c>)
 8000f38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000f3c:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORT(sn,port); 
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	3301      	adds	r3, #1
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	4610      	mov	r0, r2
 8000f58:	f001 fbe6 	bl	8002728 <WIZCHIP_WRITE>
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	3301      	adds	r3, #1
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f68:	461a      	mov	r2, r3
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4610      	mov	r0, r2
 8000f72:	f001 fbd9 	bl	8002728 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f82:	2101      	movs	r1, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fbcf 	bl	8002728 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000f8a:	bf00      	nop
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	3301      	adds	r3, #1
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fb79 	bl	8002690 <WIZCHIP_READ>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f3      	bne.n	8000f8c <socket+0x170>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <socket+0x220>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <socket+0x220>)
 8000fc0:	801a      	strh	r2, [r3, #0]
   //
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	f003 0201 	and.w	r2, r3, #1
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <socket+0x220>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <socket+0x220>)
 8000fde:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <socket+0x224>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <socket+0x224>)
 8000ffc:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4a10      	ldr	r2, [pc, #64]	; (8001044 <socket+0x228>)
 8001002:	2100      	movs	r1, #0
 8001004:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <socket+0x22c>)
 800100c:	2100      	movs	r1, #0
 800100e:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001010:	bf00      	nop
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	3301      	adds	r3, #1
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fb36 	bl	8002690 <WIZCHIP_READ>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f3      	beq.n	8001012 <socket+0x1f6>
   return (int8_t)sn;
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}     
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	20000018 	.word	0x20000018
 800103c:	200000d4 	.word	0x200000d4
 8001040:	200000d6 	.word	0x200000d6
 8001044:	200000d8 	.word	0x200000d8
 8001048:	200000e8 	.word	0x200000e8

0800104c <close>:

int8_t close(uint8_t sn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b08      	cmp	r3, #8
 800105a:	d902      	bls.n	8001062 <close+0x16>
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e055      	b.n	800110e <close+0xc2>
   
   setSn_CR(sn,Sn_CR_CLOSE);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3301      	adds	r3, #1
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800106e:	2110      	movs	r1, #16
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fb59 	bl	8002728 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8001076:	bf00      	nop
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	3301      	adds	r3, #1
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001084:	4618      	mov	r0, r3
 8001086:	f001 fb03 	bl	8002690 <WIZCHIP_READ>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f3      	bne.n	8001078 <close+0x2c>
   /* clear all interrupt of the socket. */
   setSn_IR(sn, 0xFF);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	3301      	adds	r3, #1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800109c:	211f      	movs	r1, #31
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fb42 	bl	8002728 <WIZCHIP_WRITE>
   //A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2201      	movs	r2, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <close+0xcc>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4013      	ands	r3, r2
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <close+0xcc>)
 80010c0:	801a      	strh	r2, [r3, #0]
   //
   sock_is_sending &= ~(1<<sn);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2201      	movs	r2, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <close+0xd0>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4013      	ands	r3, r2
 80010d8:	b21b      	sxth	r3, r3
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <close+0xd0>)
 80010de:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <close+0xd4>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <close+0xd8>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 80010f2:	bf00      	nop
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	3301      	adds	r3, #1
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fac5 	bl	8002690 <WIZCHIP_READ>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <close+0xa8>
   return SOCK_OK;
 800110c:	2301      	movs	r3, #1
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000d4 	.word	0x200000d4
 800111c:	200000d6 	.word	0x200000d6
 8001120:	200000d8 	.word	0x200000d8
 8001124:	200000e8 	.word	0x200000e8

08001128 <listen>:

int8_t listen(uint8_t sn)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b08      	cmp	r3, #8
 8001136:	d902      	bls.n	800113e <listen+0x16>
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	e055      	b.n	80011ea <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	3301      	adds	r3, #1
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4618      	mov	r0, r3
 8001148:	f001 faa2 	bl	8002690 <WIZCHIP_READ>
 800114c:	4603      	mov	r3, r0
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	2b01      	cmp	r3, #1
 8001154:	d002      	beq.n	800115c <listen+0x34>
 8001156:	f06f 0304 	mvn.w	r3, #4
 800115a:	e046      	b.n	80011ea <listen+0xc2>
   CHECK_SOCKINIT();
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	3301      	adds	r3, #1
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fa91 	bl	8002690 <WIZCHIP_READ>
 800116e:	4603      	mov	r3, r0
 8001170:	2b13      	cmp	r3, #19
 8001172:	d002      	beq.n	800117a <listen+0x52>
 8001174:	f06f 0302 	mvn.w	r3, #2
 8001178:	e037      	b.n	80011ea <listen+0xc2>
   setSn_CR(sn,Sn_CR_LISTEN);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	3301      	adds	r3, #1
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f001 facd 	bl	8002728 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800118e:	bf00      	nop
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	3301      	adds	r3, #1
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fa77 	bl	8002690 <WIZCHIP_READ>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f3      	bne.n	8001190 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80011a8:	e012      	b.n	80011d0 <listen+0xa8>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	3301      	adds	r3, #1
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fa6a 	bl	8002690 <WIZCHIP_READ>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <listen+0xa8>
      {
         close(sn);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff41 	bl	800104c <close>
         return SOCKERR_SOCKCLOSED;
 80011ca:	f06f 0303 	mvn.w	r3, #3
 80011ce:	e00c      	b.n	80011ea <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	3301      	adds	r3, #1
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fa57 	bl	8002690 <WIZCHIP_READ>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b14      	cmp	r3, #20
 80011e6:	d1e0      	bne.n	80011aa <listen+0x82>
      }
   }
   return SOCK_OK;
 80011e8:	2301      	movs	r3, #1
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d902      	bls.n	800120a <disconnect+0x16>
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	e062      	b.n	80012d0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	3301      	adds	r3, #1
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fa3c 	bl	8002690 <WIZCHIP_READ>
 8001218:	4603      	mov	r3, r0
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	2b01      	cmp	r3, #1
 8001220:	d002      	beq.n	8001228 <disconnect+0x34>
 8001222:	f06f 0304 	mvn.w	r3, #4
 8001226:	e053      	b.n	80012d0 <disconnect+0xdc>
   setSn_CR(sn,Sn_CR_DISCON);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	3301      	adds	r3, #1
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001234:	2108      	movs	r1, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fa76 	bl	8002728 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800123c:	bf00      	nop
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	3301      	adds	r3, #1
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fa20 	bl	8002690 <WIZCHIP_READ>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f3      	bne.n	800123e <disconnect+0x4a>
   sock_is_sending &= ~(1<<sn);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2201      	movs	r2, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	b21b      	sxth	r3, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <disconnect+0xe4>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4013      	ands	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <disconnect+0xe4>)
 8001272:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <disconnect+0xe8>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	fa42 f303 	asr.w	r3, r2, r3
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d016      	beq.n	80012b6 <disconnect+0xc2>
 8001288:	2300      	movs	r3, #0
 800128a:	e021      	b.n	80012d0 <disconnect+0xdc>
   while(getSn_SR(sn) != SOCK_CLOSED)
   {
      if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	3301      	adds	r3, #1
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001298:	4618      	mov	r0, r3
 800129a:	f001 f9f9 	bl	8002690 <WIZCHIP_READ>
 800129e:	4603      	mov	r3, r0
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <disconnect+0xc2>
      {
         close(sn);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fece 	bl	800104c <close>
         return SOCKERR_TIMEOUT;
 80012b0:	f06f 030c 	mvn.w	r3, #12
 80012b4:	e00c      	b.n	80012d0 <disconnect+0xdc>
   while(getSn_SR(sn) != SOCK_CLOSED)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	3301      	adds	r3, #1
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 f9e4 	bl	8002690 <WIZCHIP_READ>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1de      	bne.n	800128c <disconnect+0x98>
      }
   }
   return SOCK_OK;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200000d6 	.word	0x200000d6
 80012dc:	200000d4 	.word	0x200000d4

080012e0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d902      	bls.n	8001304 <send+0x24>
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e0de      	b.n	80014c2 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3301      	adds	r3, #1
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4618      	mov	r0, r3
 800130e:	f001 f9bf 	bl	8002690 <WIZCHIP_READ>
 8001312:	4603      	mov	r3, r0
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	2b01      	cmp	r3, #1
 800131a:	d002      	beq.n	8001322 <send+0x42>
 800131c:	f06f 0304 	mvn.w	r3, #4
 8001320:	e0cf      	b.n	80014c2 <send+0x1e2>
   CHECK_SOCKDATA();
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <send+0x4e>
 8001328:	f06f 030d 	mvn.w	r3, #13
 800132c:	e0c9      	b.n	80014c2 <send+0x1e2>
   tmp = getSn_SR(sn);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	3301      	adds	r3, #1
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800133a:	4618      	mov	r0, r3
 800133c:	f001 f9a8 	bl	8002690 <WIZCHIP_READ>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b17      	cmp	r3, #23
 8001348:	d005      	beq.n	8001356 <send+0x76>
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b1c      	cmp	r3, #28
 800134e:	d002      	beq.n	8001356 <send+0x76>
 8001350:	f06f 0306 	mvn.w	r3, #6
 8001354:	e0b5      	b.n	80014c2 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001356:	4b5d      	ldr	r3, [pc, #372]	; (80014cc <send+0x1ec>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	fa42 f303 	asr.w	r3, r2, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d039      	beq.n	80013de <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	3301      	adds	r3, #1
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001376:	4618      	mov	r0, r3
 8001378:	f001 f98a 	bl	8002690 <WIZCHIP_READ>
 800137c:	4603      	mov	r3, r0
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2b00      	cmp	r3, #0
 800138c:	d019      	beq.n	80013c2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	3301      	adds	r3, #1
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800139a:	2110      	movs	r1, #16
 800139c:	4618      	mov	r0, r3
 800139e:	f001 f9c3 	bl	8002728 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2201      	movs	r2, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <send+0x1ec>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4013      	ands	r3, r2
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b43      	ldr	r3, [pc, #268]	; (80014cc <send+0x1ec>)
 80013be:	801a      	strh	r2, [r3, #0]
 80013c0:	e00d      	b.n	80013de <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <send+0xfa>
      {
         close(sn);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fe3c 	bl	800104c <close>
         return SOCKERR_TIMEOUT;
 80013d4:	f06f 030c 	mvn.w	r3, #12
 80013d8:	e073      	b.n	80014c2 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80013da:	2300      	movs	r3, #0
 80013dc:	e071      	b.n	80014c2 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	3301      	adds	r3, #1
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 f950 	bl	8002690 <WIZCHIP_READ>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	029b      	lsls	r3, r3, #10
 80013f6:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80013f8:	88ba      	ldrh	r2, [r7, #4]
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d901      	bls.n	8001404 <send+0x124>
 8001400:	89bb      	ldrh	r3, [r7, #12]
 8001402:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fa9c 	bl	8002944 <getSn_TX_FSR>
 800140c:	4603      	mov	r3, r0
 800140e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	3301      	adds	r3, #1
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800141c:	4618      	mov	r0, r3
 800141e:	f001 f937 	bl	8002690 <WIZCHIP_READ>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b17      	cmp	r3, #23
 800142a:	d009      	beq.n	8001440 <send+0x160>
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b1c      	cmp	r3, #28
 8001430:	d006      	beq.n	8001440 <send+0x160>
      {
         close(sn);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe09 	bl	800104c <close>
         return SOCKERR_SOCKSTATUS;
 800143a:	f06f 0306 	mvn.w	r3, #6
 800143e:	e040      	b.n	80014c2 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <send+0x1f0>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	fa42 f303 	asr.w	r3, r2, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <send+0x180>
 8001454:	88ba      	ldrh	r2, [r7, #4]
 8001456:	89bb      	ldrh	r3, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d901      	bls.n	8001460 <send+0x180>
 800145c:	2300      	movs	r3, #0
 800145e:	e030      	b.n	80014c2 <send+0x1e2>
      if(len <= freesize) break;
 8001460:	88ba      	ldrh	r2, [r7, #4]
 8001462:	89bb      	ldrh	r3, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d900      	bls.n	800146a <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001468:	e7cc      	b.n	8001404 <send+0x124>
      if(len <= freesize) break;
 800146a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800146c:	88ba      	ldrh	r2, [r7, #4]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fafc 	bl	8002a70 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	3301      	adds	r3, #1
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001484:	2120      	movs	r1, #32
 8001486:	4618      	mov	r0, r3
 8001488:	f001 f94e 	bl	8002728 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800148c:	bf00      	nop
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	3301      	adds	r3, #1
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f8f8 	bl	8002690 <WIZCHIP_READ>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f3      	bne.n	800148e <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2201      	movs	r2, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <send+0x1ec>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <send+0x1ec>)
 80014be:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80014c0:	88bb      	ldrh	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000d6 	.word	0x200000d6
 80014d0:	200000d4 	.word	0x200000d4

080014d4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d902      	bls.n	80014f8 <recv+0x24>
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e09c      	b.n	8001632 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	3301      	adds	r3, #1
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4618      	mov	r0, r3
 8001502:	f001 f8c5 	bl	8002690 <WIZCHIP_READ>
 8001506:	4603      	mov	r3, r0
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	2b01      	cmp	r3, #1
 800150e:	d002      	beq.n	8001516 <recv+0x42>
 8001510:	f06f 0304 	mvn.w	r3, #4
 8001514:	e08d      	b.n	8001632 <recv+0x15e>
   CHECK_SOCKDATA();
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <recv+0x4e>
 800151c:	f06f 030d 	mvn.w	r3, #13
 8001520:	e087      	b.n	8001632 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3301      	adds	r3, #1
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800152e:	4618      	mov	r0, r3
 8001530:	f001 f8ae 	bl	8002690 <WIZCHIP_READ>
 8001534:	4603      	mov	r3, r0
 8001536:	b29b      	uxth	r3, r3
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800153c:	89ba      	ldrh	r2, [r7, #12]
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	d201      	bcs.n	8001548 <recv+0x74>
 8001544:	89bb      	ldrh	r3, [r7, #12]
 8001546:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fa45 	bl	80029da <getSn_RX_RSR>
 8001550:	4603      	mov	r3, r0
 8001552:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	3301      	adds	r3, #1
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001560:	4618      	mov	r0, r3
 8001562:	f001 f895 	bl	8002690 <WIZCHIP_READ>
 8001566:	4603      	mov	r3, r0
 8001568:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b17      	cmp	r3, #23
 800156e:	d026      	beq.n	80015be <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b1c      	cmp	r3, #28
 8001574:	d11c      	bne.n	80015b0 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001576:	89bb      	ldrh	r3, [r7, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d133      	bne.n	80015e4 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4618      	mov	r0, r3
 8001580:	f001 f9e0 	bl	8002944 <getSn_TX_FSR>
 8001584:	4603      	mov	r3, r0
 8001586:	461c      	mov	r4, r3
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	3301      	adds	r3, #1
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001594:	4618      	mov	r0, r3
 8001596:	f001 f87b 	bl	8002690 <WIZCHIP_READ>
 800159a:	4603      	mov	r3, r0
 800159c:	029b      	lsls	r3, r3, #10
 800159e:	429c      	cmp	r4, r3
 80015a0:	d10d      	bne.n	80015be <recv+0xea>
               {
                  close(sn);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fd51 	bl	800104c <close>
                  return SOCKERR_SOCKSTATUS;
 80015aa:	f06f 0306 	mvn.w	r3, #6
 80015ae:	e040      	b.n	8001632 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fd4a 	bl	800104c <close>
               return SOCKERR_SOCKSTATUS;
 80015b8:	f06f 0306 	mvn.w	r3, #6
 80015bc:	e039      	b.n	8001632 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <recv+0x168>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	fa42 f303 	asr.w	r3, r2, r3
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <recv+0x108>
 80015d2:	89bb      	ldrh	r3, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <recv+0x108>
 80015d8:	2300      	movs	r3, #0
 80015da:	e02a      	b.n	8001632 <recv+0x15e>
         if(recvsize != 0) break;
 80015dc:	89bb      	ldrh	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80015e2:	e7b1      	b.n	8001548 <recv+0x74>
               if(recvsize != 0) break;
 80015e4:	bf00      	nop
 80015e6:	e000      	b.n	80015ea <recv+0x116>
         if(recvsize != 0) break;
 80015e8:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80015ea:	89ba      	ldrh	r2, [r7, #12]
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d201      	bcs.n	80015f6 <recv+0x122>
 80015f2:	89bb      	ldrh	r3, [r7, #12]
 80015f4:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80015f6:	88ba      	ldrh	r2, [r7, #4]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fa93 	bl	8002b28 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3301      	adds	r3, #1
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	4618      	mov	r0, r3
 8001612:	f001 f889 	bl	8002728 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001616:	bf00      	nop
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	3301      	adds	r3, #1
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001624:	4618      	mov	r0, r3
 8001626:	f001 f833 	bl	8002690 <WIZCHIP_READ>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f3      	bne.n	8001618 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001630:	88bb      	ldrh	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	200000d4 	.word	0x200000d4

08001640 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	4613      	mov	r3, r2
 8001650:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d902      	bls.n	8001666 <sendto+0x26>
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	e101      	b.n	800186a <sendto+0x22a>
   switch(getSn_MR(sn) & 0x0F)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	3301      	adds	r3, #1
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4618      	mov	r0, r3
 8001670:	f001 f80e 	bl	8002690 <WIZCHIP_READ>
 8001674:	4603      	mov	r3, r0
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	2b02      	cmp	r3, #2
 800167c:	d004      	beq.n	8001688 <sendto+0x48>
 800167e:	2b04      	cmp	r3, #4
 8001680:	d002      	beq.n	8001688 <sendto+0x48>
   {
      case Sn_MR_UDP:
      case Sn_MR_MACRAW:
         break;
      default:
         return SOCKERR_SOCKMODE;
 8001682:	f06f 0304 	mvn.w	r3, #4
 8001686:	e0f0      	b.n	800186a <sendto+0x22a>
         break;
 8001688:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <sendto+0x56>
 8001690:	f06f 030d 	mvn.w	r3, #13
 8001694:	e0e9      	b.n	800186a <sendto+0x22a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	3201      	adds	r2, #1
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	3202      	adds	r2, #2
 80016b2:	7812      	ldrb	r2, [r2, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	3203      	adds	r2, #3
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if(taddr == 0)             return SOCKERR_IPINVALID;
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <sendto+0x92>
 80016cc:	f06f 030b 	mvn.w	r3, #11
 80016d0:	e0cb      	b.n	800186a <sendto+0x22a>
   if(port == 0)              return SOCKERR_PORTZERO;
 80016d2:	8c3b      	ldrh	r3, [r7, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <sendto+0x9e>
 80016d8:	f06f 030a 	mvn.w	r3, #10
 80016dc:	e0c5      	b.n	800186a <sendto+0x22a>
   tmp = getSn_SR(sn);
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	3301      	adds	r3, #1
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 ffd0 	bl	8002690 <WIZCHIP_READ>
 80016f0:	4603      	mov	r3, r0
 80016f2:	75fb      	strb	r3, [r7, #23]
   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b42      	cmp	r3, #66	; 0x42
 80016f8:	d005      	beq.n	8001706 <sendto+0xc6>
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b22      	cmp	r3, #34	; 0x22
 80016fe:	d002      	beq.n	8001706 <sendto+0xc6>
 8001700:	f06f 0306 	mvn.w	r3, #6
 8001704:	e0b1      	b.n	800186a <sendto+0x22a>
      
   setSn_DIPR(sn,addr);
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	3301      	adds	r3, #1
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001712:	2204      	movs	r2, #4
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f001 f8b4 	bl	8002884 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	3301      	adds	r3, #1
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	461a      	mov	r2, r3
 800172a:	8c3b      	ldrh	r3, [r7, #32]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	b29b      	uxth	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	4610      	mov	r0, r2
 8001736:	f000 fff7 	bl	8002728 <WIZCHIP_WRITE>
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	3301      	adds	r3, #1
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001746:	461a      	mov	r2, r3
 8001748:	8c3b      	ldrh	r3, [r7, #32]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f000 ffea 	bl	8002728 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	3301      	adds	r3, #1
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001760:	4618      	mov	r0, r3
 8001762:	f000 ff95 	bl	8002690 <WIZCHIP_READ>
 8001766:	4603      	mov	r3, r0
 8001768:	b29b      	uxth	r3, r3
 800176a:	029b      	lsls	r3, r3, #10
 800176c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800176e:	89ba      	ldrh	r2, [r7, #12]
 8001770:	8abb      	ldrh	r3, [r7, #20]
 8001772:	429a      	cmp	r2, r3
 8001774:	d901      	bls.n	800177a <sendto+0x13a>
 8001776:	8abb      	ldrh	r3, [r7, #20]
 8001778:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	4618      	mov	r0, r3
 800177e:	f001 f8e1 	bl	8002944 <getSn_TX_FSR>
 8001782:	4603      	mov	r3, r0
 8001784:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	3301      	adds	r3, #1
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001792:	4618      	mov	r0, r3
 8001794:	f000 ff7c 	bl	8002690 <WIZCHIP_READ>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <sendto+0x164>
 800179e:	f06f 0303 	mvn.w	r3, #3
 80017a2:	e062      	b.n	800186a <sendto+0x22a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <sendto+0x234>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	fa42 f303 	asr.w	r3, r2, r3
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <sendto+0x184>
 80017b8:	89ba      	ldrh	r2, [r7, #12]
 80017ba:	8abb      	ldrh	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d901      	bls.n	80017c4 <sendto+0x184>
 80017c0:	2300      	movs	r3, #0
 80017c2:	e052      	b.n	800186a <sendto+0x22a>
      if(len <= freesize) break;
 80017c4:	89ba      	ldrh	r2, [r7, #12]
 80017c6:	8abb      	ldrh	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d900      	bls.n	80017ce <sendto+0x18e>
      freesize = getSn_TX_FSR(sn);
 80017cc:	e7d5      	b.n	800177a <sendto+0x13a>
      if(len <= freesize) break;
 80017ce:	bf00      	nop
   };
   wiz_send_data(sn, buf, len);
 80017d0:	89ba      	ldrh	r2, [r7, #12]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 f94a 	bl	8002a70 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
   setSn_CR(sn,Sn_CR_SEND);
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3301      	adds	r3, #1
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017e8:	2120      	movs	r1, #32
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 ff9c 	bl	8002728 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80017f0:	bf00      	nop
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	3301      	adds	r3, #1
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 ff46 	bl	8002690 <WIZCHIP_READ>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f3      	bne.n	80017f2 <sendto+0x1b2>
   while(1)
   {
      tmp = getSn_IR(sn);
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	3301      	adds	r3, #1
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001816:	4618      	mov	r0, r3
 8001818:	f000 ff3a 	bl	8002690 <WIZCHIP_READ>
 800181c:	4603      	mov	r3, r0
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <sendto+0x208>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	3301      	adds	r3, #1
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800183a:	2110      	movs	r1, #16
 800183c:	4618      	mov	r0, r3
 800183e:	f000 ff73 	bl	8002728 <WIZCHIP_WRITE>
         break;
 8001842:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001844:	89bb      	ldrh	r3, [r7, #12]
 8001846:	e010      	b.n	800186a <sendto+0x22a>
      else if(tmp & Sn_IR_TIMEOUT)
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0db      	beq.n	800180a <sendto+0x1ca>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	3301      	adds	r3, #1
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800185e:	2108      	movs	r1, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f000 ff61 	bl	8002728 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001866:	f06f 030c 	mvn.w	r3, #12
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000d4 	.word	0x200000d4

08001878 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	4613      	mov	r3, r2
 8001888:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
   uint16_t pack_len=0;
 800188a:	2300      	movs	r3, #0
 800188c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d902      	bls.n	800189a <recvfrom+0x22>
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	e165      	b.n	8001b66 <recvfrom+0x2ee>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	3301      	adds	r3, #1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fef4 	bl	8002690 <WIZCHIP_READ>
 80018a8:	4603      	mov	r3, r0
 80018aa:	777b      	strb	r3, [r7, #29]
 80018ac:	7f7b      	ldrb	r3, [r7, #29]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d004      	beq.n	80018c0 <recvfrom+0x48>
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d002      	beq.n	80018c0 <recvfrom+0x48>
      case Sn_MR_IPRAW:
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80018ba:	f06f 0304 	mvn.w	r3, #4
 80018be:	e152      	b.n	8001b66 <recvfrom+0x2ee>
         break;
 80018c0:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80018c2:	89bb      	ldrh	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <recvfrom+0x56>
 80018c8:	f06f 030d 	mvn.w	r3, #13
 80018cc:	e14b      	b.n	8001b66 <recvfrom+0x2ee>
   if(sock_remained_size[sn] == 0)
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	4aa7      	ldr	r2, [pc, #668]	; (8001b70 <recvfrom+0x2f8>)
 80018d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d128      	bne.n	800192c <recvfrom+0xb4>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4618      	mov	r0, r3
 80018de:	f001 f87c 	bl	80029da <getSn_RX_RSR>
 80018e2:	4603      	mov	r3, r0
 80018e4:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	3301      	adds	r3, #1
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fecc 	bl	8002690 <WIZCHIP_READ>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <recvfrom+0x8c>
 80018fe:	f06f 0303 	mvn.w	r3, #3
 8001902:	e130      	b.n	8001b66 <recvfrom+0x2ee>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8001904:	4b9b      	ldr	r3, [pc, #620]	; (8001b74 <recvfrom+0x2fc>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	fa42 f303 	asr.w	r3, r2, r3
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <recvfrom+0xaa>
 8001918:	8bfb      	ldrh	r3, [r7, #30]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <recvfrom+0xaa>
 800191e:	2300      	movs	r3, #0
 8001920:	e121      	b.n	8001b66 <recvfrom+0x2ee>
         if(pack_len != 0) break;
 8001922:	8bfb      	ldrh	r3, [r7, #30]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d100      	bne.n	800192a <recvfrom+0xb2>
         pack_len = getSn_RX_RSR(sn);
 8001928:	e7d7      	b.n	80018da <recvfrom+0x62>
         if(pack_len != 0) break;
 800192a:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
   switch (mr & 0x07)
 800192c:	7f7b      	ldrb	r3, [r7, #29]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	2b02      	cmp	r3, #2
 8001934:	d002      	beq.n	800193c <recvfrom+0xc4>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d071      	beq.n	8001a1e <recvfrom+0x1a6>
 800193a:	e0d1      	b.n	8001ae0 <recvfrom+0x268>
   {
      case Sn_MR_UDP :
         if(sock_remained_size[sn] == 0)
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	4a8c      	ldr	r2, [pc, #560]	; (8001b70 <recvfrom+0x2f8>)
 8001940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d152      	bne.n	80019ee <recvfrom+0x176>
         {
            wiz_recv_data(sn, head, 8);
 8001948:	f107 0114 	add.w	r1, r7, #20
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2208      	movs	r2, #8
 8001950:	4618      	mov	r0, r3
 8001952:	f001 f8e9 	bl	8002b28 <wiz_recv_data>
            setSn_CR(sn,Sn_CR_RECV);
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	3301      	adds	r3, #1
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fedf 	bl	8002728 <WIZCHIP_WRITE>
            while(getSn_CR(sn));
 800196a:	bf00      	nop
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	3301      	adds	r3, #1
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fe89 	bl	8002690 <WIZCHIP_READ>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f3      	bne.n	800196c <recvfrom+0xf4>
               sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
            }
            else
            {
         #endif
               addr[0] = head[0];
 8001984:	7d3a      	ldrb	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	701a      	strb	r2, [r3, #0]
               addr[1] = head[1];
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3301      	adds	r3, #1
 800198e:	7d7a      	ldrb	r2, [r7, #21]
 8001990:	701a      	strb	r2, [r3, #0]
               addr[2] = head[2];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3302      	adds	r3, #2
 8001996:	7dba      	ldrb	r2, [r7, #22]
 8001998:	701a      	strb	r2, [r3, #0]
               addr[3] = head[3];
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3303      	adds	r3, #3
 800199e:	7dfa      	ldrb	r2, [r7, #23]
 80019a0:	701a      	strb	r2, [r3, #0]
               *port = head[4];
 80019a2:	7e3b      	ldrb	r3, [r7, #24]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a8:	801a      	strh	r2, [r3, #0]
               *port = (*port << 8) + head[5];
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	7e7b      	ldrb	r3, [r7, #25]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019bc:	801a      	strh	r2, [r3, #0]
               sock_remained_size[sn] = head[6];
 80019be:	7eba      	ldrb	r2, [r7, #26]
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	b291      	uxth	r1, r2
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <recvfrom+0x2f8>)
 80019c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
               sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4a68      	ldr	r2, [pc, #416]	; (8001b70 <recvfrom+0x2f8>)
 80019ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b299      	uxth	r1, r3
 80019d6:	7efb      	ldrb	r3, [r7, #27]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	440a      	add	r2, r1
 80019de:	b291      	uxth	r1, r2
 80019e0:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <recvfrom+0x2f8>)
 80019e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
            sock_pack_info[sn] = PACK_FIRST;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <recvfrom+0x300>)
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	54d1      	strb	r1, [r2, r3]
         }
         if(len < sock_remained_size[sn]) pack_len = len;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <recvfrom+0x2f8>)
 80019f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019f6:	89ba      	ldrh	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d202      	bcs.n	8001a02 <recvfrom+0x18a>
 80019fc:	89bb      	ldrh	r3, [r7, #12]
 80019fe:	83fb      	strh	r3, [r7, #30]
 8001a00:	e004      	b.n	8001a0c <recvfrom+0x194>
         else pack_len = sock_remained_size[sn];
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <recvfrom+0x2f8>)
 8001a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a0a:	83fb      	strh	r3, [r7, #30]
         //A20150601 : For W5300
         len = pack_len;
 8001a0c:	8bfb      	ldrh	r3, [r7, #30]
 8001a0e:	81bb      	strh	r3, [r7, #12]
            }
         #endif
         //
         // Need to packet length check (default 1472)
         //
         wiz_recv_data(sn, buf, pack_len); // data copy.
 8001a10:	8bfa      	ldrh	r2, [r7, #30]
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 f886 	bl	8002b28 <wiz_recv_data>
         break;
 8001a1c:	e06c      	b.n	8001af8 <recvfrom+0x280>
      case Sn_MR_MACRAW :
         if(sock_remained_size[sn] == 0)
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	4a53      	ldr	r2, [pc, #332]	; (8001b70 <recvfrom+0x2f8>)
 8001a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d144      	bne.n	8001ab4 <recvfrom+0x23c>
         {
            wiz_recv_data(sn, head, 2);
 8001a2a:	f107 0114 	add.w	r1, r7, #20
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2202      	movs	r2, #2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 f878 	bl	8002b28 <wiz_recv_data>
            setSn_CR(sn,Sn_CR_RECV);
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a44:	2140      	movs	r1, #64	; 0x40
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fe6e 	bl	8002728 <WIZCHIP_WRITE>
            while(getSn_CR(sn));
 8001a4c:	bf00      	nop
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	3301      	adds	r3, #1
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fe18 	bl	8002690 <WIZCHIP_READ>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f3      	bne.n	8001a4e <recvfrom+0x1d6>
            // read peer's IP address, port number & packet length
            sock_remained_size[sn] = head[0];
 8001a66:	7d3a      	ldrb	r2, [r7, #20]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	b291      	uxth	r1, r2
 8001a6c:	4a40      	ldr	r2, [pc, #256]	; (8001b70 <recvfrom+0x2f8>)
 8001a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <recvfrom+0x2f8>)
 8001a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b299      	uxth	r1, r3
 8001a7e:	7d7b      	ldrb	r3, [r7, #21]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	440a      	add	r2, r1
 8001a86:	b291      	uxth	r1, r2
 8001a88:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <recvfrom+0x2f8>)
 8001a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if(sock_remained_size[sn] > 1514) 
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <recvfrom+0x2f8>)
 8001a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a96:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d906      	bls.n	8001aac <recvfrom+0x234>
            {
               close(sn);
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fad3 	bl	800104c <close>
               return SOCKFATAL_PACKLEN;
 8001aa6:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8001aaa:	e05c      	b.n	8001b66 <recvfrom+0x2ee>
            }
            sock_pack_info[sn] = PACK_FIRST;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <recvfrom+0x300>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	54d1      	strb	r1, [r2, r3]
         }
         if(len < sock_remained_size[sn]) pack_len = len;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <recvfrom+0x2f8>)
 8001ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001abc:	89ba      	ldrh	r2, [r7, #12]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d202      	bcs.n	8001ac8 <recvfrom+0x250>
 8001ac2:	89bb      	ldrh	r3, [r7, #12]
 8001ac4:	83fb      	strh	r3, [r7, #30]
 8001ac6:	e004      	b.n	8001ad2 <recvfrom+0x25a>
         else pack_len = sock_remained_size[sn];
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <recvfrom+0x2f8>)
 8001acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad0:	83fb      	strh	r3, [r7, #30]
         wiz_recv_data(sn,buf,pack_len);
 8001ad2:	8bfa      	ldrh	r2, [r7, #30]
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 f825 	bl	8002b28 <wiz_recv_data>
         break;
 8001ade:	e00b      	b.n	8001af8 <recvfrom+0x280>
         else pack_len = sock_remained_size[sn];
         wiz_recv_data(sn, buf, pack_len); // data copy.
         break;
   #endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8001ae0:	8bfa      	ldrh	r2, [r7, #30]
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 f87a 	bl	8002be0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4920      	ldr	r1, [pc, #128]	; (8001b70 <recvfrom+0x2f8>)
 8001af0:	8bfa      	ldrh	r2, [r7, #30]
 8001af2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8001af6:	bf00      	nop
   }
   setSn_CR(sn,Sn_CR_RECV);
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3301      	adds	r3, #1
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b04:	2140      	movs	r1, #64	; 0x40
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fe0e 	bl	8002728 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn)) ;
 8001b0c:	bf00      	nop
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3301      	adds	r3, #1
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fdb8 	bl	8002690 <WIZCHIP_READ>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f3      	bne.n	8001b0e <recvfrom+0x296>
   sock_remained_size[sn] -= pack_len;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <recvfrom+0x2f8>)
 8001b2a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	8bfa      	ldrh	r2, [r7, #30]
 8001b32:	1a8a      	subs	r2, r1, r2
 8001b34:	b291      	uxth	r1, r2
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <recvfrom+0x2f8>)
 8001b38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : 
   //if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
   if(sock_remained_size[sn] != 0)
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <recvfrom+0x2f8>)
 8001b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <recvfrom+0x2e4>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <recvfrom+0x300>)
 8001b4c:	5cd2      	ldrb	r2, [r2, r3]
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	b2d1      	uxtb	r1, r2
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <recvfrom+0x300>)
 8001b58:	54d1      	strb	r1, [r2, r3]
 8001b5a:	e003      	b.n	8001b64 <recvfrom+0x2ec>
   #if _WIZCHIP_ == 5300      
      if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif         
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <recvfrom+0x300>)
 8001b60:	2100      	movs	r1, #0
 8001b62:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8001b64:	8bfb      	ldrh	r3, [r7, #30]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000d8 	.word	0x200000d8
 8001b74:	200000d4 	.word	0x200000d4
 8001b78:	200000e8 	.word	0x200000e8

08001b7c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi6_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <MX_SPI1_Init+0x60>)
 8001b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001baa:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bc0:	220a      	movs	r2, #10
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_SPI1_Init+0x5c>)
 8001bc6:	f003 f889 	bl	8004cdc <HAL_SPI_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f7ff f91e 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000b7c 	.word	0x20000b7c
 8001bdc:	40013000 	.word	0x40013000

08001be0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <MX_SPI2_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_SPI2_Init+0x64>)
 8001c32:	f003 f853 	bl	8004cdc <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f7ff f8e8 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000904 	.word	0x20000904
 8001c48:	40003800 	.word	0x40003800

08001c4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c52:	4a16      	ldr	r2, [pc, #88]	; (8001cac <MX_SPI3_Init+0x60>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c90:	220a      	movs	r2, #10
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_SPI3_Init+0x5c>)
 8001c96:	f003 f821 	bl	8004cdc <HAL_SPI_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8001ca0:	f7ff f8b6 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000acc 	.word	0x20000acc
 8001cac:	40003c00 	.word	0x40003c00

08001cb0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cb6:	4a16      	ldr	r2, [pc, #88]	; (8001d10 <MX_SPI4_Init+0x60>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cf4:	220a      	movs	r2, #10
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_SPI4_Init+0x5c>)
 8001cfa:	f002 ffef 	bl	8004cdc <HAL_SPI_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_SPI4_Init+0x58>
  {
    Error_Handler();
 8001d04:	f7ff f884 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000b24 	.word	0x20000b24
 8001d10:	40013400 	.word	0x40013400

08001d14 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <MX_SPI5_Init+0x60>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d42:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d58:	220a      	movs	r2, #10
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	; (8001d70 <MX_SPI5_Init+0x5c>)
 8001d5e:	f002 ffbd 	bl	8004cdc <HAL_SPI_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_SPI5_Init+0x58>
  {
    Error_Handler();
 8001d68:	f7ff f852 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000095c 	.word	0x2000095c
 8001d74:	40015000 	.word	0x40015000

08001d78 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <MX_SPI6_Init+0x60>)
 8001d80:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001dbc:	220a      	movs	r2, #10
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_SPI6_Init+0x5c>)
 8001dc2:	f002 ff8b 	bl	8004cdc <HAL_SPI_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_SPI6_Init+0x58>
  {
    Error_Handler();
 8001dcc:	f7ff f820 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000a74 	.word	0x20000a74
 8001dd8:	40015400 	.word	0x40015400

08001ddc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b094      	sub	sp, #80	; 0x50
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a9d      	ldr	r2, [pc, #628]	; (8002070 <HAL_SPI_MspInit+0x294>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d15a      	bne.n	8001eb4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e02:	4b9c      	ldr	r3, [pc, #624]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a9b      	ldr	r2, [pc, #620]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b99      	ldr	r3, [pc, #612]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1e:	4b95      	ldr	r3, [pc, #596]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a94      	ldr	r2, [pc, #592]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
 8001e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e36:	23e0      	movs	r3, #224	; 0xe0
 8001e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e46:	2305      	movs	r3, #5
 8001e48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4889      	ldr	r0, [pc, #548]	; (8002078 <HAL_SPI_MspInit+0x29c>)
 8001e52:	f002 f935 	bl	80040c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001e56:	4b89      	ldr	r3, [pc, #548]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e58:	4a89      	ldr	r2, [pc, #548]	; (8002080 <HAL_SPI_MspInit+0x2a4>)
 8001e5a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001e5c:	4b87      	ldr	r3, [pc, #540]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e5e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e62:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e64:	4b85      	ldr	r3, [pc, #532]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6a:	4b84      	ldr	r3, [pc, #528]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e70:	4b82      	ldr	r3, [pc, #520]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e76:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e78:	4b80      	ldr	r3, [pc, #512]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e84:	4b7d      	ldr	r3, [pc, #500]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e90:	4b7a      	ldr	r3, [pc, #488]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e96:	4879      	ldr	r0, [pc, #484]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001e98:	f001 fe28 	bl	8003aec <HAL_DMA_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001ea2:	f7fe ffb5 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a74      	ldr	r2, [pc, #464]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001eaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eac:	4a73      	ldr	r2, [pc, #460]	; (800207c <HAL_SPI_MspInit+0x2a0>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8001eb2:	e218      	b.n	80022e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a72      	ldr	r2, [pc, #456]	; (8002084 <HAL_SPI_MspInit+0x2a8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d178      	bne.n	8001fb0 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec2:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b69      	ldr	r3, [pc, #420]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ede:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a64      	ldr	r2, [pc, #400]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b62      	ldr	r3, [pc, #392]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efa:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a5d      	ldr	r2, [pc, #372]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f12:	230c      	movs	r3, #12
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f22:	2305      	movs	r3, #5
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4856      	ldr	r0, [pc, #344]	; (8002088 <HAL_SPI_MspInit+0x2ac>)
 8001f2e:	f002 f8c7 	bl	80040c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f44:	2305      	movs	r3, #5
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	484f      	ldr	r0, [pc, #316]	; (800208c <HAL_SPI_MspInit+0x2b0>)
 8001f50:	f002 f8b6 	bl	80040c0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001f54:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f56:	4a4f      	ldr	r2, [pc, #316]	; (8002094 <HAL_SPI_MspInit+0x2b8>)
 8001f58:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001f5a:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f72:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7a:	4b45      	ldr	r3, [pc, #276]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001f92:	483f      	ldr	r0, [pc, #252]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001f94:	f001 fdaa 	bl	8003aec <HAL_DMA_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 8001f9e:	f7fe ff37 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001fa6:	649a      	str	r2, [r3, #72]	; 0x48
 8001fa8:	4a39      	ldr	r2, [pc, #228]	; (8002090 <HAL_SPI_MspInit+0x2b4>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fae:	e19a      	b.n	80022e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a38      	ldr	r2, [pc, #224]	; (8002098 <HAL_SPI_MspInit+0x2bc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d174      	bne.n	80020a4 <HAL_SPI_MspInit+0x2c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_SPI_MspInit+0x298>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ff2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002004:	2306      	movs	r3, #6
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800200c:	4619      	mov	r1, r3
 800200e:	481e      	ldr	r0, [pc, #120]	; (8002088 <HAL_SPI_MspInit+0x2ac>)
 8002010:	f002 f856 	bl	80040c0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <HAL_SPI_MspInit+0x2c4>)
 8002018:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002052:	4812      	ldr	r0, [pc, #72]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002054:	f001 fd4a 	bl	8003aec <HAL_DMA_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_SPI_MspInit+0x286>
      Error_Handler();
 800205e:	f7fe fed7 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 8002066:	64da      	str	r2, [r3, #76]	; 0x4c
 8002068:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_SPI_MspInit+0x2c0>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800206e:	e13a      	b.n	80022e6 <HAL_SPI_MspInit+0x50a>
 8002070:	40013000 	.word	0x40013000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	20000bd4 	.word	0x20000bd4
 8002080:	40026410 	.word	0x40026410
 8002084:	40003800 	.word	0x40003800
 8002088:	40020800 	.word	0x40020800
 800208c:	40020400 	.word	0x40020400
 8002090:	20000c94 	.word	0x20000c94
 8002094:	40026070 	.word	0x40026070
 8002098:	40003c00 	.word	0x40003c00
 800209c:	20000cf4 	.word	0x20000cf4
 80020a0:	40026010 	.word	0x40026010
  else if(spiHandle->Instance==SPI4)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a91      	ldr	r2, [pc, #580]	; (80022f0 <HAL_SPI_MspInit+0x514>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d15a      	bne.n	8002164 <HAL_SPI_MspInit+0x388>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	4b90      	ldr	r3, [pc, #576]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a8f      	ldr	r2, [pc, #572]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 80020b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a88      	ldr	r2, [pc, #544]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80020e6:	2364      	movs	r3, #100	; 0x64
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020f6:	2305      	movs	r3, #5
 80020f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020fe:	4619      	mov	r1, r3
 8002100:	487d      	ldr	r0, [pc, #500]	; (80022f8 <HAL_SPI_MspInit+0x51c>)
 8002102:	f001 ffdd 	bl	80040c0 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8002106:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <HAL_SPI_MspInit+0x520>)
 8002108:	4a7d      	ldr	r2, [pc, #500]	; (8002300 <HAL_SPI_MspInit+0x524>)
 800210a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800210c:	4b7b      	ldr	r3, [pc, #492]	; (80022fc <HAL_SPI_MspInit+0x520>)
 800210e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002112:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002114:	4b79      	ldr	r3, [pc, #484]	; (80022fc <HAL_SPI_MspInit+0x520>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211a:	4b78      	ldr	r3, [pc, #480]	; (80022fc <HAL_SPI_MspInit+0x520>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002120:	4b76      	ldr	r3, [pc, #472]	; (80022fc <HAL_SPI_MspInit+0x520>)
 8002122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002126:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002128:	4b74      	ldr	r3, [pc, #464]	; (80022fc <HAL_SPI_MspInit+0x520>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800212e:	4b73      	ldr	r3, [pc, #460]	; (80022fc <HAL_SPI_MspInit+0x520>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002134:	4b71      	ldr	r3, [pc, #452]	; (80022fc <HAL_SPI_MspInit+0x520>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800213a:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_SPI_MspInit+0x520>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002140:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <HAL_SPI_MspInit+0x520>)
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002146:	486d      	ldr	r0, [pc, #436]	; (80022fc <HAL_SPI_MspInit+0x520>)
 8002148:	f001 fcd0 	bl	8003aec <HAL_DMA_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_SPI_MspInit+0x37a>
      Error_Handler();
 8002152:	f7fe fe5d 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a68      	ldr	r2, [pc, #416]	; (80022fc <HAL_SPI_MspInit+0x520>)
 800215a:	64da      	str	r2, [r3, #76]	; 0x4c
 800215c:	4a67      	ldr	r2, [pc, #412]	; (80022fc <HAL_SPI_MspInit+0x520>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002162:	e0c0      	b.n	80022e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI5)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a66      	ldr	r2, [pc, #408]	; (8002304 <HAL_SPI_MspInit+0x528>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d15b      	bne.n	8002226 <HAL_SPI_MspInit+0x44a>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	4b60      	ldr	r3, [pc, #384]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002194:	f043 0320 	orr.w	r3, r3, #32
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b56      	ldr	r3, [pc, #344]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021b8:	2305      	movs	r3, #5
 80021ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4851      	ldr	r0, [pc, #324]	; (8002308 <HAL_SPI_MspInit+0x52c>)
 80021c4:	f001 ff7c 	bl	80040c0 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream5;
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021ca:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_SPI_MspInit+0x534>)
 80021cc:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
 80021ce:	4b4f      	ldr	r3, [pc, #316]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80021d4:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021d6:	4b4d      	ldr	r3, [pc, #308]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021e2:	4b4a      	ldr	r3, [pc, #296]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e8:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ea:	4b48      	ldr	r3, [pc, #288]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f0:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80021f6:	4b45      	ldr	r3, [pc, #276]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021fc:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_SPI_MspInit+0x530>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_SPI_MspInit+0x530>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8002208:	4840      	ldr	r0, [pc, #256]	; (800230c <HAL_SPI_MspInit+0x530>)
 800220a:	f001 fc6f 	bl	8003aec <HAL_DMA_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_SPI_MspInit+0x43c>
      Error_Handler();
 8002214:	f7fe fdfc 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3c      	ldr	r2, [pc, #240]	; (800230c <HAL_SPI_MspInit+0x530>)
 800221c:	64da      	str	r2, [r3, #76]	; 0x4c
 800221e:	4a3b      	ldr	r2, [pc, #236]	; (800230c <HAL_SPI_MspInit+0x530>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002224:	e05f      	b.n	80022e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI6)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <HAL_SPI_MspInit+0x538>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d15a      	bne.n	80022e6 <HAL_SPI_MspInit+0x50a>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 800223a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223e:	6453      	str	r3, [r2, #68]	; 0x44
 8002240:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 8002256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_SPI_MspInit+0x518>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002268:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800227a:	2305      	movs	r3, #5
 800227c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800227e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002282:	4619      	mov	r1, r3
 8002284:	4824      	ldr	r0, [pc, #144]	; (8002318 <HAL_SPI_MspInit+0x53c>)
 8002286:	f001 ff1b 	bl	80040c0 <HAL_GPIO_Init>
    hdma_spi6_rx.Instance = DMA2_Stream6;
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_SPI_MspInit+0x540>)
 800228c:	4a24      	ldr	r2, [pc, #144]	; (8002320 <HAL_SPI_MspInit+0x544>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_SPI_MspInit+0x540>)
 8002292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002296:	605a      	str	r2, [r3, #4]
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <HAL_SPI_MspInit+0x540>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	611a      	str	r2, [r3, #16]
    hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_spi6_rx.Init.Mode = DMA_NORMAL;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
 80022ca:	4814      	ldr	r0, [pc, #80]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022cc:	f001 fc0e 	bl	8003aec <HAL_DMA_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_SPI_MspInit+0x4fe>
      Error_Handler();
 80022d6:	f7fe fd9b 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022de:	64da      	str	r2, [r3, #76]	; 0x4c
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_SPI_MspInit+0x540>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022e6:	bf00      	nop
 80022e8:	3750      	adds	r7, #80	; 0x50
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40013400 	.word	0x40013400
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40021000 	.word	0x40021000
 80022fc:	20000a14 	.word	0x20000a14
 8002300:	40026458 	.word	0x40026458
 8002304:	40015000 	.word	0x40015000
 8002308:	40021400 	.word	0x40021400
 800230c:	200009b4 	.word	0x200009b4
 8002310:	40026488 	.word	0x40026488
 8002314:	40015400 	.word	0x40015400
 8002318:	40021800 	.word	0x40021800
 800231c:	20000c34 	.word	0x20000c34
 8002320:	400264a0 	.word	0x400264a0

08002324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_MspInit+0x4c>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_MspInit+0x4c>)
 8002334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002338:	6453      	str	r3, [r2, #68]	; 0x44
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_MspInit+0x4c>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_MspInit+0x4c>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_MspInit+0x4c>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_MspInit+0x4c>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800

08002374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <NMI_Handler+0x4>

0800237a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <HardFault_Handler+0x4>

08002380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <MemManage_Handler+0x4>

08002386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <BusFault_Handler+0x4>

0800238c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <UsageFault_Handler+0x4>

08002392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c0:	f001 fa62 	bl	8003888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <DMA1_Stream0_IRQHandler+0x10>)
 80023ce:	f001 fc3b 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000cf4 	.word	0x20000cf4

080023dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA1_Stream4_IRQHandler+0x10>)
 80023e2:	f001 fc31 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000c94 	.word	0x20000c94

080023f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <DMA2_Stream0_IRQHandler+0x10>)
 80023f6:	f001 fc27 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000bd4 	.word	0x20000bd4

08002404 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <DMA2_Stream3_IRQHandler+0x10>)
 800240a:	f001 fc1d 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000a14 	.word	0x20000a14

08002418 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <DMA2_Stream5_IRQHandler+0x10>)
 800241e:	f001 fc13 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200009b4 	.word	0x200009b4

0800242c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <DMA2_Stream6_IRQHandler+0x10>)
 8002432:	f001 fc09 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000c34 	.word	0x20000c34

08002440 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e00a      	b.n	8002468 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002452:	f3af 8000 	nop.w
 8002456:	4601      	mov	r1, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	60ba      	str	r2, [r7, #8]
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbf0      	blt.n	8002452 <_read+0x12>
	}

return len;
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e009      	b.n	80024a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fb07 	bl	8000aa8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf1      	blt.n	800248c <_write+0x12>
	}
	return len;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_close>:

int _close(int file)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	return -1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024da:	605a      	str	r2, [r3, #4]
	return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_isatty>:

int _isatty(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
	return 1;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
	return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800254c:	f003 fc60 	bl	8005e10 <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20030000 	.word	0x20030000
 800257c:	00000400 	.word	0x00000400
 8002580:	200000f0 	.word	0x200000f0
 8002584:	20000db0 	.word	0x20000db0

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SystemInit+0x20>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <SystemInit+0x20>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <MX_UART4_Init+0x50>)
 80025b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_UART4_Init+0x4c>)
 80025e4:	f003 f922 	bl	800582c <HAL_UART_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80025ee:	f7fe fc0f 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000d54 	.word	0x20000d54
 80025fc:	40004c00 	.word	0x40004c00

08002600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_UART_MspInit+0x84>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d12b      	bne.n	800267a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_UART_MspInit+0x88>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_UART_MspInit+0x88>)
 800262c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_UART_MspInit+0x88>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_UART_MspInit+0x88>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <HAL_UART_MspInit+0x88>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_UART_MspInit+0x88>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800265a:	2303      	movs	r3, #3
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800266a:	2308      	movs	r3, #8
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <HAL_UART_MspInit+0x8c>)
 8002676:	f001 fd23 	bl	80040c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	; 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40004c00 	.word	0x40004c00
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000

08002690 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <WIZCHIP_READ+0x94>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <WIZCHIP_READ+0x94>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst)   // byte operation
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <WIZCHIP_READ+0x94>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <WIZCHIP_READ+0x24>
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <WIZCHIP_READ+0x94>)
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d114      	bne.n	80026de <WIZCHIP_READ+0x4e>
   {
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <WIZCHIP_READ+0x94>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	0c12      	lsrs	r2, r2, #16
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	4610      	mov	r0, r2
 80026c0:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <WIZCHIP_READ+0x94>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	0a12      	lsrs	r2, r2, #8
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4610      	mov	r0, r2
 80026ce:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <WIZCHIP_READ+0x94>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	4610      	mov	r0, r2
 80026da:	4798      	blx	r3
 80026dc:	e011      	b.n	8002702 <WIZCHIP_READ+0x72>
   }
   else                                               // burst operation
   {
      spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	733b      	strb	r3, [r7, #12]
      spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	737b      	strb	r3, [r7, #13]
      spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	73bb      	strb	r3, [r7, #14]
      WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <WIZCHIP_READ+0x94>)
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	f107 020c 	add.w	r2, r7, #12
 80026fc:	2103      	movs	r1, #3
 80026fe:	4610      	mov	r0, r2
 8002700:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <WIZCHIP_READ+0x94>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4798      	blx	r3
 8002708:	4603      	mov	r3, r0
 800270a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <WIZCHIP_READ+0x94>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <WIZCHIP_READ+0x94>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	4798      	blx	r3
   return ret;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000020 	.word	0x20000020

08002728 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4798      	blx	r3
   WIZCHIP.CS._select();
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst)    // byte operation
   if(!WIZCHIP.IF.SPI._write_burst)    // byte operation
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d119      	bne.n	8002784 <WIZCHIP_WRITE+0x5c>
   {
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	0c12      	lsrs	r2, r2, #16
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4610      	mov	r0, r2
 800275c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	0a12      	lsrs	r2, r2, #8
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4610      	mov	r0, r2
 800276a:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	4610      	mov	r0, r2
 8002776:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(wb);
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	4610      	mov	r0, r2
 8002780:	4798      	blx	r3
 8002782:	e013      	b.n	80027ac <WIZCHIP_WRITE+0x84>
   }
   else                          // burst operation
   {
      spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	b2db      	uxtb	r3, r3
 800278a:	733b      	strb	r3, [r7, #12]
      spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	b2db      	uxtb	r3, r3
 8002792:	737b      	strb	r3, [r7, #13]
      spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	73bb      	strb	r3, [r7, #14]
      spi_data[3] = wb;
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	73fb      	strb	r3, [r7, #15]
      WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f107 020c 	add.w	r2, r7, #12
 80027a6:	2104      	movs	r1, #4
 80027a8:	4610      	mov	r0, r2
 80027aa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80027b2:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <WIZCHIP_WRITE+0x98>)
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	4798      	blx	r3
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000020 	.word	0x20000020

080027c4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst)   // byte operation
 80027de:	4b28      	ldr	r3, [pc, #160]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <WIZCHIP_READ_BUF+0x2a>
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d126      	bne.n	800283c <WIZCHIP_READ_BUF+0x78>
   {
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	0c12      	lsrs	r2, r2, #16
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	4610      	mov	r0, r2
 80027fa:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	0a12      	lsrs	r2, r2, #8
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	4610      	mov	r0, r2
 8002808:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4610      	mov	r0, r2
 8002814:	4798      	blx	r3
      for(i = 0; i < len; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	82fb      	strh	r3, [r7, #22]
 800281a:	e00a      	b.n	8002832 <WIZCHIP_READ_BUF+0x6e>
         pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	8afa      	ldrh	r2, [r7, #22]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	188c      	adds	r4, r1, r2
 8002826:	4798      	blx	r3
 8002828:	4603      	mov	r3, r0
 800282a:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++)
 800282c:	8afb      	ldrh	r3, [r7, #22]
 800282e:	3301      	adds	r3, #1
 8002830:	82fb      	strh	r3, [r7, #22]
 8002832:	8afa      	ldrh	r2, [r7, #22]
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3f0      	bcc.n	800281c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst)   // byte operation
 800283a:	e017      	b.n	800286c <WIZCHIP_READ_BUF+0xa8>
   }
   else                                               // burst operation
   {
      spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	b2db      	uxtb	r3, r3
 8002842:	743b      	strb	r3, [r7, #16]
      spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	b2db      	uxtb	r3, r3
 800284a:	747b      	strb	r3, [r7, #17]
      spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	74bb      	strb	r3, [r7, #18]
      WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f107 0210 	add.w	r2, r7, #16
 800285a:	2103      	movs	r1, #3
 800285c:	4610      	mov	r0, r2
 800285e:	4798      	blx	r3
      WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	4611      	mov	r1, r2
 8002868:	68b8      	ldr	r0, [r7, #8]
 800286a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002872:	4b03      	ldr	r3, [pc, #12]	; (8002880 <WIZCHIP_READ_BUF+0xbc>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	4798      	blx	r3
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}
 8002880:	20000020 	.word	0x20000020

08002884 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst)    // byte operation
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d126      	bne.n	80028fc <WIZCHIP_WRITE_BUF+0x78>
   {
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	0c12      	lsrs	r2, r2, #16
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	4610      	mov	r0, r2
 80028ba:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	0a12      	lsrs	r2, r2, #8
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	4610      	mov	r0, r2
 80028c8:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4610      	mov	r0, r2
 80028d4:	4798      	blx	r3
      for(i = 0; i < len; i++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	82fb      	strh	r3, [r7, #22]
 80028da:	e00a      	b.n	80028f2 <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	8afa      	ldrh	r2, [r7, #22]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	440a      	add	r2, r1
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	4610      	mov	r0, r2
 80028ea:	4798      	blx	r3
      for(i = 0; i < len; i++)
 80028ec:	8afb      	ldrh	r3, [r7, #22]
 80028ee:	3301      	adds	r3, #1
 80028f0:	82fb      	strh	r3, [r7, #22]
 80028f2:	8afa      	ldrh	r2, [r7, #22]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3f0      	bcc.n	80028dc <WIZCHIP_WRITE_BUF+0x58>
 80028fa:	e017      	b.n	800292c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else                          // burst operation
   {
      spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	b2db      	uxtb	r3, r3
 8002902:	743b      	strb	r3, [r7, #16]
      spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b2db      	uxtb	r3, r3
 800290a:	747b      	strb	r3, [r7, #17]
      spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	74bb      	strb	r3, [r7, #18]
      WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	f107 0210 	add.w	r2, r7, #16
 800291a:	2103      	movs	r1, #3
 800291c:	4610      	mov	r0, r2
 800291e:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	4611      	mov	r1, r2
 8002928:	68b8      	ldr	r0, [r7, #8]
 800292a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002932:	4b03      	ldr	r3, [pc, #12]	; (8002940 <WIZCHIP_WRITE_BUF+0xbc>)
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	4798      	blx	r3
}
 8002938:	bf00      	nop
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000020 	.word	0x20000020

08002944 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800294e:	2300      	movs	r3, #0
 8002950:	81fb      	strh	r3, [r7, #14]
 8002952:	2300      	movs	r3, #0
 8002954:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	3301      	adds	r3, #1
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fe94 	bl	8002690 <WIZCHIP_READ>
 8002968:	4603      	mov	r3, r0
 800296a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800296c:	89bb      	ldrh	r3, [r7, #12]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	b29c      	uxth	r4, r3
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3301      	adds	r3, #1
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fe86 	bl	8002690 <WIZCHIP_READ>
 8002984:	4603      	mov	r3, r0
 8002986:	b29b      	uxth	r3, r3
 8002988:	4423      	add	r3, r4
 800298a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800298c:	89bb      	ldrh	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01a      	beq.n	80029c8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	3301      	adds	r3, #1
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fe76 	bl	8002690 <WIZCHIP_READ>
 80029a4:	4603      	mov	r3, r0
 80029a6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80029a8:	89fb      	ldrh	r3, [r7, #14]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	b29c      	uxth	r4, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3301      	adds	r3, #1
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fe68 	bl	8002690 <WIZCHIP_READ>
 80029c0:	4603      	mov	r3, r0
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4423      	add	r3, r4
 80029c6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80029c8:	89fa      	ldrh	r2, [r7, #14]
 80029ca:	89bb      	ldrh	r3, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1c2      	bne.n	8002956 <getSn_TX_FSR+0x12>
   return val;
 80029d0:	89fb      	ldrh	r3, [r7, #14]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}

080029da <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80029da:	b590      	push	{r4, r7, lr}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	81fb      	strh	r3, [r7, #14]
 80029e8:	2300      	movs	r3, #0
 80029ea:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	3301      	adds	r3, #1
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe49 	bl	8002690 <WIZCHIP_READ>
 80029fe:	4603      	mov	r3, r0
 8002a00:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a02:	89bb      	ldrh	r3, [r7, #12]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	b29c      	uxth	r4, r3
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe3b 	bl	8002690 <WIZCHIP_READ>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4423      	add	r3, r4
 8002a20:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01a      	beq.n	8002a5e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe2b 	bl	8002690 <WIZCHIP_READ>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	b29c      	uxth	r4, r3
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	3301      	adds	r3, #1
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe1d 	bl	8002690 <WIZCHIP_READ>
 8002a56:	4603      	mov	r3, r0
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4423      	add	r3, r4
 8002a5c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a5e:	89fa      	ldrh	r2, [r7, #14]
 8002a60:	89bb      	ldrh	r3, [r7, #12]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d1c2      	bne.n	80029ec <getSn_RX_RSR+0x12>
   return val;
 8002a66:	89fb      	ldrh	r3, [r7, #14]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd90      	pop	{r4, r7, pc}

08002a70 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002a88:	88bb      	ldrh	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d048      	beq.n	8002b20 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	3301      	adds	r3, #1
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fdf8 	bl	8002690 <WIZCHIP_READ>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b29c      	uxth	r4, r3
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	3301      	adds	r3, #1
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fdeb 	bl	8002690 <WIZCHIP_READ>
 8002aba:	4603      	mov	r3, r0
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	4423      	add	r3, r4
 8002ac0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	79fa      	ldrb	r2, [r7, #7]
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	3202      	adds	r2, #2
 8002acc:	00d2      	lsls	r2, r2, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002ad2:	88bb      	ldrh	r3, [r7, #4]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	68b8      	ldr	r0, [r7, #8]
 8002ada:	f7ff fed3 	bl	8002884 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002ade:	89fa      	ldrh	r2, [r7, #14]
 8002ae0:	88bb      	ldrh	r3, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3301      	adds	r3, #1
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002af2:	461a      	mov	r2, r3
 8002af4:	89fb      	ldrh	r3, [r7, #14]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f7ff fe12 	bl	8002728 <WIZCHIP_WRITE>
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3301      	adds	r3, #1
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002b10:	461a      	mov	r2, r3
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7ff fe05 	bl	8002728 <WIZCHIP_WRITE>
 8002b1e:	e000      	b.n	8002b22 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002b20:	bf00      	nop
}
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002b40:	88bb      	ldrh	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d048      	beq.n	8002bd8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fd9c 	bl	8002690 <WIZCHIP_READ>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	b29c      	uxth	r4, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	3301      	adds	r3, #1
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fd8f 	bl	8002690 <WIZCHIP_READ>
 8002b72:	4603      	mov	r3, r0
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4423      	add	r3, r4
 8002b78:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	79fa      	ldrb	r2, [r7, #7]
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	3203      	adds	r2, #3
 8002b84:	00d2      	lsls	r2, r2, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002b8a:	88bb      	ldrh	r3, [r7, #4]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	68b8      	ldr	r0, [r7, #8]
 8002b92:	f7ff fe17 	bl	80027c4 <WIZCHIP_READ_BUF>
   ptr += len;
 8002b96:	89fa      	ldrh	r2, [r7, #14]
 8002b98:	88bb      	ldrh	r3, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002baa:	461a      	mov	r2, r3
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f7ff fdb6 	bl	8002728 <WIZCHIP_WRITE>
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002bc8:	461a      	mov	r2, r3
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7ff fda9 	bl	8002728 <WIZCHIP_WRITE>
 8002bd6:	e000      	b.n	8002bda <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002bd8:	bf00      	nop
}
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	460a      	mov	r2, r1
 8002bea:	71fb      	strb	r3, [r7, #7]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fd45 	bl	8002690 <WIZCHIP_READ>
 8002c06:	4603      	mov	r3, r0
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	b29c      	uxth	r4, r3
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3301      	adds	r3, #1
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fd38 	bl	8002690 <WIZCHIP_READ>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4423      	add	r3, r4
 8002c26:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002c28:	89fa      	ldrh	r2, [r7, #14]
 8002c2a:	88bb      	ldrh	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	3301      	adds	r3, #1
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f7ff fd6d 	bl	8002728 <WIZCHIP_WRITE>
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	3301      	adds	r3, #1
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7ff fd60 	bl	8002728 <WIZCHIP_WRITE>
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd90      	pop	{r4, r7, pc}

08002c70 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{};
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	807b      	strh	r3, [r7, #2]
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	807b      	strh	r3, [r7, #2]
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <reg_wizchip_cs_cbfunc+0x16>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <reg_wizchip_cs_cbfunc+0x40>)
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <reg_wizchip_cs_cbfunc+0x44>)
 8002d52:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <reg_wizchip_cs_cbfunc+0x40>)
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <reg_wizchip_cs_cbfunc+0x48>)
 8002d58:	619a      	str	r2, [r3, #24]
 8002d5a:	e006      	b.n	8002d6a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <reg_wizchip_cs_cbfunc+0x40>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <reg_wizchip_cs_cbfunc+0x40>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6193      	str	r3, [r2, #24]
   }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000020 	.word	0x20000020
 8002d7c:	08002c8d 	.word	0x08002c8d
 8002d80:	08002c9b 	.word	0x08002c9b

08002d84 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002d8e:	bf00      	nop
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f9      	beq.n	8002d90 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <reg_wizchip_spi_cbfunc+0x24>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8002daa:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <reg_wizchip_spi_cbfunc+0x50>)
 8002dac:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8002db0:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <reg_wizchip_spi_cbfunc+0x54>)
 8002db2:	621a      	str	r2, [r3, #32]
 8002db4:	e006      	b.n	8002dc4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002db6:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <reg_wizchip_spi_cbfunc+0x4c>)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6213      	str	r3, [r2, #32]
   }
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	20000020 	.word	0x20000020
 8002dd4:	08002ce1 	.word	0x08002ce1
 8002dd8:	08002cf1 	.word	0x08002cf1

08002ddc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002de6:	bf00      	nop
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f9      	beq.n	8002de8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <reg_wizchip_spiburst_cbfunc+0x24>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <reg_wizchip_spiburst_cbfunc+0x50>)
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002e08:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <reg_wizchip_spiburst_cbfunc+0x54>)
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e0c:	e006      	b.n	8002e1c <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8002e0e:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	20000020 	.word	0x20000020
 8002e2c:	08002d07 	.word	0x08002d07
 8002e30:	08002d1f 	.word	0x08002d1f

08002e34 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	f200 80c2 	bhi.w	8002fd8 <ctlwizchip+0x1a4>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <ctlwizchip+0x28>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e9d 	.word	0x08002e9d
 8002e60:	08002ea3 	.word	0x08002ea3
 8002e64:	08002ecf 	.word	0x08002ecf
 8002e68:	08002ec3 	.word	0x08002ec3
 8002e6c:	08002edd 	.word	0x08002edd
 8002e70:	08002ee9 	.word	0x08002ee9
 8002e74:	08002ef7 	.word	0x08002ef7
 8002e78:	08002f1d 	.word	0x08002f1d
 8002e7c:	08002f43 	.word	0x08002f43
 8002e80:	08002f7d 	.word	0x08002f7d
 8002e84:	08002f83 	.word	0x08002f83
 8002e88:	08002f8b 	.word	0x08002f8b
 8002e8c:	08002fdf 	.word	0x08002fdf
 8002e90:	08002f93 	.word	0x08002f93
 8002e94:	08002fa1 	.word	0x08002fa1
 8002e98:	08002fbd 	.word	0x08002fbd
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002e9c:	f000 f8e6 	bl	800306c <wizchip_sw_reset>
         break;
 8002ea0:	e09e      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f923 	bl	8003104 <wizchip_init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	e08f      	b.n	8002fe2 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f9a8 	bl	800321c <wizchip_clrinterrupt>
         break;
 8002ecc:	e088      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002ece:	f000 f9c3 	bl	8003258 <wizchip_getinterrupt>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	801a      	strh	r2, [r3, #0]
         break;
 8002eda:	e081      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f9de 	bl	80032a2 <wizchip_setinterruptmask>
         break;         
 8002ee6:	e07b      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002ee8:	f000 f9f6 	bl	80032d8 <wizchip_getinterruptmask>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	801a      	strh	r2, [r3, #0]
         break;
 8002ef4:	e074      	b.n	8002fe0 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002f06:	f7ff fc0f 	bl	8002728 <WIZCHIP_WRITE>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002f16:	f7ff fc07 	bl	8002728 <WIZCHIP_WRITE>
         break;
 8002f1a:	e061      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002f1c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002f20:	f7ff fbb6 	bl	8002690 <WIZCHIP_READ>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b29c      	uxth	r4, r3
 8002f2c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002f30:	f7ff fbae 	bl	8002690 <WIZCHIP_READ>
 8002f34:	4603      	mov	r3, r0
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4423      	add	r3, r4
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	801a      	strh	r2, [r3, #0]
         break;
 8002f40:	e04e      	b.n	8002fe0 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <ctlwizchip+0x1b8>)
 8002f44:	789a      	ldrb	r2, [r3, #2]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4a27      	ldr	r2, [pc, #156]	; (8002fec <ctlwizchip+0x1b8>)
 8002f50:	78d2      	ldrb	r2, [r2, #3]
 8002f52:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3302      	adds	r3, #2
 8002f58:	4a24      	ldr	r2, [pc, #144]	; (8002fec <ctlwizchip+0x1b8>)
 8002f5a:	7912      	ldrb	r2, [r2, #4]
 8002f5c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	3303      	adds	r3, #3
 8002f62:	4a22      	ldr	r2, [pc, #136]	; (8002fec <ctlwizchip+0x1b8>)
 8002f64:	7952      	ldrb	r2, [r2, #5]
 8002f66:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <ctlwizchip+0x1b8>)
 8002f6e:	7992      	ldrb	r2, [r2, #6]
 8002f70:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3305      	adds	r3, #5
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
         break;
 8002f7a:	e031      	b.n	8002fe0 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002f7c:	f000 f9fe 	bl	800337c <wizphy_reset>
         break;
 8002f80:	e02e      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002f82:	6838      	ldr	r0, [r7, #0]
 8002f84:	f000 fa21 	bl	80033ca <wizphy_setphyconf>
         break;
 8002f88:	e02a      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002f8a:	6838      	ldr	r0, [r7, #0]
 8002f8c:	f000 fa5f 	bl	800344e <wizphy_getphyconf>
         break;
 8002f90:	e026      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fac2 	bl	8003520 <wizphy_setphypmode>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	e020      	b.n	8002fe2 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002fa0:	f000 f9d3 	bl	800334a <wizphy_getphypmode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2bff      	cmp	r3, #255	; 0xff
 8002fac:	d102      	bne.n	8002fb4 <ctlwizchip+0x180>
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	e016      	b.n	8002fe2 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	7dfa      	ldrb	r2, [r7, #23]
 8002fb8:	701a      	strb	r2, [r3, #0]
         break;
 8002fba:	e011      	b.n	8002fe0 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002fbc:	f000 f9af 	bl	800331e <wizphy_getphylink>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	d102      	bne.n	8002fd0 <ctlwizchip+0x19c>
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e008      	b.n	8002fe2 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	7dfa      	ldrb	r2, [r7, #23]
 8002fd4:	701a      	strb	r2, [r3, #0]
         break;
 8002fd6:	e003      	b.n	8002fe0 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	e001      	b.n	8002fe2 <ctlwizchip+0x1ae>
         break;
 8002fde:	bf00      	nop
   }
   return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000020 	.word	0x20000020

08002ff0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d82c      	bhi.n	800305c <ctlnetwork+0x6c>
 8003002:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <ctlnetwork+0x18>)
 8003004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003008:	08003021 	.word	0x08003021
 800300c:	08003029 	.word	0x08003029
 8003010:	08003031 	.word	0x08003031
 8003014:	0800303f 	.word	0x0800303f
 8003018:	0800304d 	.word	0x0800304d
 800301c:	08003055 	.word	0x08003055
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f000 fac7 	bl	80035b4 <wizchip_setnetinfo>
         break;
 8003026:	e01c      	b.n	8003062 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f000 fb03 	bl	8003634 <wizchip_getnetinfo>
         break;
 800302e:	e018      	b.n	8003062 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fb3d 	bl	80036b4 <wizchip_setnetmode>
 800303a:	4603      	mov	r3, r0
 800303c:	e012      	b.n	8003064 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800303e:	f000 fb5b 	bl	80036f8 <wizchip_getnetmode>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	701a      	strb	r2, [r3, #0]
         break;
 800304a:	e00a      	b.n	8003062 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800304c:	6838      	ldr	r0, [r7, #0]
 800304e:	f000 fb5b 	bl	8003708 <wizchip_settimeout>
         break;
 8003052:	e006      	b.n	8003062 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003054:	6838      	ldr	r0, [r7, #0]
 8003056:	f000 fb78 	bl	800374a <wizchip_gettimeout>
         break;
 800305a:	e002      	b.n	8003062 <ctlnetwork+0x72>
      default:
         return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	e000      	b.n	8003064 <ctlnetwork+0x74>
   }
   return 0;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2206      	movs	r2, #6
 8003076:	4619      	mov	r1, r3
 8003078:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800307c:	f7ff fba2 	bl	80027c4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2204      	movs	r2, #4
 8003086:	4619      	mov	r1, r3
 8003088:	f44f 7080 	mov.w	r0, #256	; 0x100
 800308c:	f7ff fb9a 	bl	80027c4 <WIZCHIP_READ_BUF>
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	2204      	movs	r2, #4
 8003096:	4619      	mov	r1, r3
 8003098:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800309c:	f7ff fb92 	bl	80027c4 <WIZCHIP_READ_BUF>
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	2204      	movs	r2, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80030ac:	f7ff fb8a 	bl	80027c4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7ff fb38 	bl	8002728 <WIZCHIP_WRITE>
   getMR(); // for delay
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7ff fae9 	bl	8002690 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	2206      	movs	r2, #6
 80030c2:	4619      	mov	r1, r3
 80030c4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80030c8:	f7ff fbdc 	bl	8002884 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2204      	movs	r2, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030d8:	f7ff fbd4 	bl	8002884 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80030dc:	f107 0310 	add.w	r3, r7, #16
 80030e0:	2204      	movs	r2, #4
 80030e2:	4619      	mov	r1, r3
 80030e4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80030e8:	f7ff fbcc 	bl	8002884 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	2204      	movs	r2, #4
 80030f2:	4619      	mov	r1, r3
 80030f4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80030f8:	f7ff fbc4 	bl	8002884 <WIZCHIP_WRITE_BUF>
}
 80030fc:	bf00      	nop
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003112:	f7ff ffab 	bl	800306c <wizchip_sw_reset>
   if(txsize)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d03b      	beq.n	8003194 <wizchip_init+0x90>
   {
      tmp = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e015      	b.n	8003152 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	7bbb      	ldrb	r3, [r7, #14]
 8003132:	4413      	add	r3, r2
 8003134:	b2db      	uxtb	r3, r3
 8003136:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800313c:	2b10      	cmp	r3, #16
 800313e:	dd02      	ble.n	8003146 <wizchip_init+0x42>
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	e066      	b.n	8003214 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	73fb      	strb	r3, [r7, #15]
 8003152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003156:	2b07      	cmp	r3, #7
 8003158:	dde5      	ble.n	8003126 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e015      	b.n	800318c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3301      	adds	r3, #1
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800316e:	4618      	mov	r0, r3
 8003170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	f7ff fad4 	bl	8002728 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3301      	adds	r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003190:	2b07      	cmp	r3, #7
 8003192:	dde5      	ble.n	8003160 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d03b      	beq.n	8003212 <wizchip_init+0x10e>
   {
      tmp = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e015      	b.n	80031d0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80031a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	7bbb      	ldrb	r3, [r7, #14]
 80031b0:	4413      	add	r3, r2
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80031b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	dd02      	ble.n	80031c4 <wizchip_init+0xc0>
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	e027      	b.n	8003214 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80031c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d4:	2b07      	cmp	r3, #7
 80031d6:	dde5      	ble.n	80031a4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e015      	b.n	800320a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80031de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	3301      	adds	r3, #1
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80031ec:	4618      	mov	r0, r3
 80031ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	f7ff fa95 	bl	8002728 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320e:	2b07      	cmp	r3, #7
 8003210:	dde5      	ble.n	80031de <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	b29b      	uxth	r3, r3
 8003230:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	f023 030f 	bic.w	r3, r3, #15
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003240:	f7ff fa72 	bl	8002728 <WIZCHIP_WRITE>
   setSIR(sir);
 8003244:	7bbb      	ldrb	r3, [r7, #14]
 8003246:	4619      	mov	r1, r3
 8003248:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800324c:	f7ff fa6c 	bl	8002728 <WIZCHIP_WRITE>
#endif   
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800326a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800326e:	f7ff fa0f 	bl	8002690 <WIZCHIP_READ>
 8003272:	4603      	mov	r3, r0
 8003274:	f023 030f 	bic.w	r3, r3, #15
 8003278:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800327a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800327e:	f7ff fa07 	bl	8002690 <WIZCHIP_READ>
 8003282:	4603      	mov	r3, r0
 8003284:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003286:	79bb      	ldrb	r3, [r7, #6]
 8003288:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800328a:	88bb      	ldrh	r3, [r7, #4]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	b29a      	uxth	r2, r3
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	b29b      	uxth	r3, r3
 8003294:	4413      	add	r3, r2
 8003296:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003298:	88bb      	ldrh	r3, [r7, #4]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	4619      	mov	r1, r3
 80032bc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80032c0:	f7ff fa32 	bl	8002728 <WIZCHIP_WRITE>
   setSIMR(simr);
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	4619      	mov	r1, r3
 80032c8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80032cc:	f7ff fa2c 	bl	8002728 <WIZCHIP_WRITE>
#endif   
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80032ea:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80032ee:	f7ff f9cf 	bl	8002690 <WIZCHIP_READ>
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80032f6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80032fa:	f7ff f9c9 	bl	8002690 <WIZCHIP_READ>
 80032fe:	4603      	mov	r3, r0
 8003300:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003302:	79bb      	ldrb	r3, [r7, #6]
 8003304:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003306:	88bb      	ldrh	r3, [r7, #4]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	b29a      	uxth	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	b29b      	uxth	r3, r3
 8003310:	4413      	add	r3, r2
 8003312:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003314:	88bb      	ldrh	r3, [r7, #4]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003324:	2300      	movs	r3, #0
 8003326:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003328:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800332c:	f7ff f9b0 	bl	8002690 <WIZCHIP_READ>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800333a:	2301      	movs	r3, #1
 800333c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003354:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003358:	f7ff f99a 	bl	8002690 <WIZCHIP_READ>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d102      	bne.n	800336c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003366:	2301      	movs	r3, #1
 8003368:	71fb      	strb	r3, [r7, #7]
 800336a:	e001      	b.n	8003370 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800336c:	2300      	movs	r3, #0
 800336e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003382:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003386:	f7ff f983 	bl	8002690 <WIZCHIP_READ>
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003394:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	4619      	mov	r1, r3
 800339a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800339e:	f7ff f9c3 	bl	8002728 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80033a2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80033a6:	f7ff f973 	bl	8002690 <WIZCHIP_READ>
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033b4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	4619      	mov	r1, r3
 80033ba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80033be:	f7ff f9b3 	bl	8002728 <WIZCHIP_WRITE>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d104      	bne.n	80033e8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e003      	b.n	80033f0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ee:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d104      	bne.n	8003402 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e019      	b.n	8003436 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	78db      	ldrb	r3, [r3, #3]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10d      	bne.n	8003426 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	789b      	ldrb	r3, [r3, #2]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d104      	bne.n	800341c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	f043 0318 	orr.w	r3, r3, #24
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e00c      	b.n	8003436 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	f043 0308 	orr.w	r3, r3, #8
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e007      	b.n	8003436 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	789b      	ldrb	r3, [r3, #2]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d103      	bne.n	8003436 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	f043 0310 	orr.w	r3, r3, #16
 8003434:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	4619      	mov	r1, r3
 800343a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800343e:	f7ff f973 	bl	8002728 <WIZCHIP_WRITE>
   wizphy_reset();
 8003442:	f7ff ff9b 	bl	800337c <wizphy_reset>
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800345a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800345e:	f7ff f917 	bl	8002690 <WIZCHIP_READ>
 8003462:	4603      	mov	r3, r0
 8003464:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	119b      	asrs	r3, r3, #6
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800347c:	2b20      	cmp	r3, #32
 800347e:	d001      	beq.n	8003484 <wizphy_getphyconf+0x36>
 8003480:	2b38      	cmp	r3, #56	; 0x38
 8003482:	d103      	bne.n	800348c <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
         break;
 800348a:	e003      	b.n	8003494 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
         break;
 8003492:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349a:	3b10      	subs	r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	bf8c      	ite	hi
 80034a0:	2201      	movhi	r2, #1
 80034a2:	2200      	movls	r2, #0
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	2a00      	cmp	r2, #0
 80034a8:	d111      	bne.n	80034ce <wizphy_getphyconf+0x80>
 80034aa:	2201      	movs	r2, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80034b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	709a      	strb	r2, [r3, #2]
         break;
 80034cc:	e003      	b.n	80034d6 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	709a      	strb	r2, [r3, #2]
         break;
 80034d4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034dc:	3b08      	subs	r3, #8
 80034de:	2b18      	cmp	r3, #24
 80034e0:	bf8c      	ite	hi
 80034e2:	2201      	movhi	r2, #1
 80034e4:	2200      	movls	r2, #0
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d111      	bne.n	8003510 <wizphy_getphyconf+0xc2>
 80034ec:	2201      	movs	r2, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80034f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	70da      	strb	r2, [r3, #3]
         break;
 800350e:	e003      	b.n	8003518 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	70da      	strb	r2, [r3, #3]
         break;
 8003516:	bf00      	nop
   }
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800352e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003532:	f7ff f8ad 	bl	8002690 <WIZCHIP_READ>
 8003536:	4603      	mov	r3, r0
 8003538:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <wizphy_setphypmode+0x2a>
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e030      	b.n	80035ac <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003550:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d104      	bne.n	8003562 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e003      	b.n	800356a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003568:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	4619      	mov	r1, r3
 800356e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003572:	f7ff f8d9 	bl	8002728 <WIZCHIP_WRITE>
   wizphy_reset();
 8003576:	f7ff ff01 	bl	800337c <wizphy_reset>
   tmp = getPHYCFGR();
 800357a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800357e:	f7ff f887 	bl	8002690 <WIZCHIP_READ>
 8003582:	4603      	mov	r3, r0
 8003584:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d106      	bne.n	800359a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <wizphy_setphypmode+0x88>
 8003596:	2300      	movs	r3, #0
 8003598:	e008      	b.n	80035ac <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <wizphy_setphypmode+0x88>
 80035a4:	2300      	movs	r3, #0
 80035a6:	e001      	b.n	80035ac <wizphy_setphypmode+0x8c>
   }
   return -1;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2206      	movs	r2, #6
 80035c0:	4619      	mov	r1, r3
 80035c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80035c6:	f7ff f95d 	bl	8002884 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	330e      	adds	r3, #14
 80035ce:	2204      	movs	r2, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035d6:	f7ff f955 	bl	8002884 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	330a      	adds	r3, #10
 80035de:	2204      	movs	r2, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80035e6:	f7ff f94d 	bl	8002884 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3306      	adds	r3, #6
 80035ee:	2204      	movs	r2, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80035f6:	f7ff f945 	bl	8002884 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7c9a      	ldrb	r2, [r3, #18]
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <wizchip_setnetinfo+0x78>)
 8003600:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7cda      	ldrb	r2, [r3, #19]
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <wizchip_setnetinfo+0x78>)
 8003608:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	7d1a      	ldrb	r2, [r3, #20]
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <wizchip_setnetinfo+0x78>)
 8003610:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7d5a      	ldrb	r2, [r3, #21]
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <wizchip_setnetinfo+0x78>)
 8003618:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7d9a      	ldrb	r2, [r3, #22]
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <wizchip_setnetinfo+0x7c>)
 8003620:	701a      	strb	r2, [r3, #0]
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200000f4 	.word	0x200000f4
 8003630:	200000f8 	.word	0x200000f8

08003634 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2206      	movs	r2, #6
 8003640:	4619      	mov	r1, r3
 8003642:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003646:	f7ff f8bd 	bl	80027c4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	330e      	adds	r3, #14
 800364e:	2204      	movs	r2, #4
 8003650:	4619      	mov	r1, r3
 8003652:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003656:	f7ff f8b5 	bl	80027c4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	330a      	adds	r3, #10
 800365e:	2204      	movs	r2, #4
 8003660:	4619      	mov	r1, r3
 8003662:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003666:	f7ff f8ad 	bl	80027c4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3306      	adds	r3, #6
 800366e:	2204      	movs	r2, #4
 8003670:	4619      	mov	r1, r3
 8003672:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003676:	f7ff f8a5 	bl	80027c4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <wizchip_getnetinfo+0x78>)
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <wizchip_getnetinfo+0x78>)
 8003684:	785a      	ldrb	r2, [r3, #1]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <wizchip_getnetinfo+0x78>)
 800368c:	789a      	ldrb	r2, [r3, #2]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <wizchip_getnetinfo+0x78>)
 8003694:	78da      	ldrb	r2, [r3, #3]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <wizchip_getnetinfo+0x7c>)
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	759a      	strb	r2, [r3, #22]
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200000f4 	.word	0x200000f4
 80036b0:	200000f8 	.word	0x200000f8

080036b4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <wizchip_setnetmode+0x1e>
 80036cc:	f04f 33ff 	mov.w	r3, #4294967295
 80036d0:	e00e      	b.n	80036f0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80036d2:	2000      	movs	r0, #0
 80036d4:	f7fe ffdc 	bl	8002690 <WIZCHIP_READ>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	4619      	mov	r1, r3
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7ff f81d 	bl	8002728 <WIZCHIP_WRITE>
   return 0;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7fe ffc7 	bl	8002690 <WIZCHIP_READ>
 8003702:	4603      	mov	r3, r0
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}

08003708 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800371a:	f7ff f805 	bl	8002728 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	885b      	ldrh	r3, [r3, #2]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	b29b      	uxth	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4619      	mov	r1, r3
 800372a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800372e:	f7fe fffb 	bl	8002728 <WIZCHIP_WRITE>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	885b      	ldrh	r3, [r3, #2]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800373e:	f7fe fff3 	bl	8002728 <WIZCHIP_WRITE>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003752:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003756:	f7fe ff9b 	bl	8002690 <WIZCHIP_READ>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003762:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003766:	f7fe ff93 	bl	8002690 <WIZCHIP_READ>
 800376a:	4603      	mov	r3, r0
 800376c:	b29b      	uxth	r3, r3
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	b29c      	uxth	r4, r3
 8003772:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003776:	f7fe ff8b 	bl	8002690 <WIZCHIP_READ>
 800377a:	4603      	mov	r3, r0
 800377c:	b29b      	uxth	r3, r3
 800377e:	4423      	add	r3, r4
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	805a      	strh	r2, [r3, #2]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
	...

08003790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003794:	480d      	ldr	r0, [pc, #52]	; (80037cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003796:	490e      	ldr	r1, [pc, #56]	; (80037d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003798:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800379c:	e002      	b.n	80037a4 <LoopCopyDataInit>

0800379e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a2:	3304      	adds	r3, #4

080037a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a8:	d3f9      	bcc.n	800379e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037aa:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037ac:	4c0b      	ldr	r4, [pc, #44]	; (80037dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b0:	e001      	b.n	80037b6 <LoopFillZerobss>

080037b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b4:	3204      	adds	r2, #4

080037b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b8:	d3fb      	bcc.n	80037b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037ba:	f7fe fee5 	bl	8002588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037be:	f002 fb2d 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037c2:	f7fd f983 	bl	8000acc <main>
  bx  lr    
 80037c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80037cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037d0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80037d4:	08007108 	.word	0x08007108
  ldr r2, =_sbss
 80037d8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80037dc:	20000dac 	.word	0x20000dac

080037e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037e0:	e7fe      	b.n	80037e0 <ADC_IRQHandler>
	...

080037e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_Init+0x40>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <HAL_Init+0x40>)
 80037ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_Init+0x40>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <HAL_Init+0x40>)
 80037fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_Init+0x40>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_Init+0x40>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800380c:	2003      	movs	r0, #3
 800380e:	f000 f92b 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003812:	2000      	movs	r0, #0
 8003814:	f000 f808 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003818:	f7fe fd84 	bl	8002324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_InitTick+0x54>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_InitTick+0x58>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f943 	bl	8003ad2 <HAL_SYSTICK_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00e      	b.n	8003874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d80a      	bhi.n	8003872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385c:	2200      	movs	r2, #0
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f000 f90b 	bl	8003a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003868:	4a06      	ldr	r2, [pc, #24]	; (8003884 <HAL_InitTick+0x5c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	2000001c 	.word	0x2000001c
 8003880:	20000050 	.word	0x20000050
 8003884:	2000004c 	.word	0x2000004c

08003888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_IncTick+0x20>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_IncTick+0x24>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4413      	add	r3, r2
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_IncTick+0x24>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000050 	.word	0x20000050
 80038ac:	20000d98 	.word	0x20000d98

080038b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_GetTick+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000d98 	.word	0x20000d98

080038c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	; (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	; (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	; (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
         );
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f7ff ff8e 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff29 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a90:	f7ff ff3e 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff8e 	bl	80039bc <NVIC_EncodePriority>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff31 	bl	800392c <__NVIC_EnableIRQ>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffa2 	bl	8003a24 <SysTick_Config>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7ff feda 	bl	80038b0 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e099      	b.n	8003c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b28:	e00f      	b.n	8003b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b2a:	f7ff fec1 	bl	80038b0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d908      	bls.n	8003b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e078      	b.n	8003c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e8      	bne.n	8003b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <HAL_DMA_Init+0x158>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d107      	bne.n	8003bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4313      	orrs	r3, r2
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d117      	bne.n	8003c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f9e9 	bl	8003fc8 <DMA_CheckFifoParam>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2240      	movs	r2, #64	; 0x40
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e016      	b.n	8003c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f9a0 	bl	8003f5c <DMA_CalcBaseAndBitshift>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	223f      	movs	r2, #63	; 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	f010803f 	.word	0xf010803f

08003c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c54:	4b92      	ldr	r3, [pc, #584]	; (8003ea0 <HAL_DMA_IRQHandler+0x258>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a92      	ldr	r2, [pc, #584]	; (8003ea4 <HAL_DMA_IRQHandler+0x25c>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	2208      	movs	r2, #8
 8003c74:	409a      	lsls	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0204 	bic.w	r2, r2, #4
 8003c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f043 0202 	orr.w	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	2204      	movs	r2, #4
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d012      	beq.n	8003d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	2210      	movs	r2, #16
 8003d26:	409a      	lsls	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d043      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d03c      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	2210      	movs	r2, #16
 8003d44:	409a      	lsls	r2, r3
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d108      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d024      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
 8003d76:	e01f      	b.n	8003db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
 8003d88:	e016      	b.n	8003db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0208 	bic.w	r2, r2, #8
 8003da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 808e 	beq.w	8003ee6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	2220      	movs	r2, #32
 8003de0:	409a      	lsls	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d136      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0216 	bic.w	r2, r2, #22
 8003e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d103      	bne.n	8003e22 <HAL_DMA_IRQHandler+0x1da>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0208 	bic.w	r2, r2, #8
 8003e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e36:	223f      	movs	r2, #63	; 0x3f
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d07d      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
        }
        return;
 8003e5e:	e078      	b.n	8003f52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01c      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d030      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e02b      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d027      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
 8003e9e:	e022      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x29e>
 8003ea0:	2000001c 	.word	0x2000001c
 8003ea4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10f      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0210 	bic.w	r2, r2, #16
 8003ec4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d032      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d022      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2205      	movs	r2, #5
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3301      	adds	r3, #1
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d307      	bcc.n	8003f2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f2      	bne.n	8003f12 <HAL_DMA_IRQHandler+0x2ca>
 8003f2c:	e000      	b.n	8003f30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
 8003f50:	e000      	b.n	8003f54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f52:	bf00      	nop
    }
  }
}
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop

08003f5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	3b10      	subs	r3, #16
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <DMA_CalcBaseAndBitshift+0x64>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <DMA_CalcBaseAndBitshift+0x68>)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d909      	bls.n	8003f9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	1d1a      	adds	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f9c:	e007      	b.n	8003fae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	aaaaaaab 	.word	0xaaaaaaab
 8003fc4:	08007058 	.word	0x08007058

08003fc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11f      	bne.n	8004022 <DMA_CheckFifoParam+0x5a>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d856      	bhi.n	8004096 <DMA_CheckFifoParam+0xce>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <DMA_CheckFifoParam+0x28>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004001 	.word	0x08004001
 8003ff4:	08004013 	.word	0x08004013
 8003ff8:	08004001 	.word	0x08004001
 8003ffc:	08004097 	.word	0x08004097
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d046      	beq.n	800409a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004010:	e043      	b.n	800409a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800401a:	d140      	bne.n	800409e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004020:	e03d      	b.n	800409e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402a:	d121      	bne.n	8004070 <DMA_CheckFifoParam+0xa8>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d837      	bhi.n	80040a2 <DMA_CheckFifoParam+0xda>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <DMA_CheckFifoParam+0x70>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	08004049 	.word	0x08004049
 800403c:	0800404f 	.word	0x0800404f
 8004040:	08004049 	.word	0x08004049
 8004044:	08004061 	.word	0x08004061
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e030      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d025      	beq.n	80040a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800405e:	e022      	b.n	80040a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004068:	d11f      	bne.n	80040aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800406e:	e01c      	b.n	80040aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d903      	bls.n	800407e <DMA_CheckFifoParam+0xb6>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d003      	beq.n	8004084 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800407c:	e018      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
      break;
 8004082:	e015      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00e      	beq.n	80040ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      break;
 8004094:	e00b      	b.n	80040ae <DMA_CheckFifoParam+0xe6>
      break;
 8004096:	bf00      	nop
 8004098:	e00a      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      break;
 800409a:	bf00      	nop
 800409c:	e008      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      break;
 800409e:	bf00      	nop
 80040a0:	e006      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e004      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
    }
  } 
  
  return status; 
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop

080040c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e177      	b.n	80043cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040dc:	2201      	movs	r2, #1
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	f040 8166 	bne.w	80043c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b01      	cmp	r3, #1
 8004104:	d005      	beq.n	8004112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800410e:	2b02      	cmp	r3, #2
 8004110:	d130      	bne.n	8004174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	2203      	movs	r2, #3
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004148:	2201      	movs	r2, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 0201 	and.w	r2, r3, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b03      	cmp	r3, #3
 800417e:	d017      	beq.n	80041b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d123      	bne.n	8004204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	08da      	lsrs	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3208      	adds	r2, #8
 80041c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	220f      	movs	r2, #15
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	08da      	lsrs	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3208      	adds	r2, #8
 80041fe:	69b9      	ldr	r1, [r7, #24]
 8004200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	2203      	movs	r2, #3
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0203 	and.w	r2, r3, #3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80c0 	beq.w	80043c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b66      	ldr	r3, [pc, #408]	; (80043e4 <HAL_GPIO_Init+0x324>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <HAL_GPIO_Init+0x324>)
 8004250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004254:	6453      	str	r3, [r2, #68]	; 0x44
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_GPIO_Init+0x324>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004262:	4a61      	ldr	r2, [pc, #388]	; (80043e8 <HAL_GPIO_Init+0x328>)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3302      	adds	r3, #2
 800426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a58      	ldr	r2, [pc, #352]	; (80043ec <HAL_GPIO_Init+0x32c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d037      	beq.n	80042fe <HAL_GPIO_Init+0x23e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <HAL_GPIO_Init+0x330>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_GPIO_Init+0x23a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a56      	ldr	r2, [pc, #344]	; (80043f4 <HAL_GPIO_Init+0x334>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02b      	beq.n	80042f6 <HAL_GPIO_Init+0x236>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a55      	ldr	r2, [pc, #340]	; (80043f8 <HAL_GPIO_Init+0x338>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d025      	beq.n	80042f2 <HAL_GPIO_Init+0x232>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a54      	ldr	r2, [pc, #336]	; (80043fc <HAL_GPIO_Init+0x33c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x22e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a53      	ldr	r2, [pc, #332]	; (8004400 <HAL_GPIO_Init+0x340>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x22a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a52      	ldr	r2, [pc, #328]	; (8004404 <HAL_GPIO_Init+0x344>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x226>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a51      	ldr	r2, [pc, #324]	; (8004408 <HAL_GPIO_Init+0x348>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x222>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a50      	ldr	r2, [pc, #320]	; (800440c <HAL_GPIO_Init+0x34c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x21e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4f      	ldr	r2, [pc, #316]	; (8004410 <HAL_GPIO_Init+0x350>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x21a>
 80042d6:	2309      	movs	r3, #9
 80042d8:	e012      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042da:	230a      	movs	r3, #10
 80042dc:	e010      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042de:	2308      	movs	r3, #8
 80042e0:	e00e      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042e2:	2307      	movs	r3, #7
 80042e4:	e00c      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042e6:	2306      	movs	r3, #6
 80042e8:	e00a      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042ea:	2305      	movs	r3, #5
 80042ec:	e008      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042ee:	2304      	movs	r3, #4
 80042f0:	e006      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042f2:	2303      	movs	r3, #3
 80042f4:	e004      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e002      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <HAL_GPIO_Init+0x240>
 80042fe:	2300      	movs	r3, #0
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	f002 0203 	and.w	r2, r2, #3
 8004306:	0092      	lsls	r2, r2, #2
 8004308:	4093      	lsls	r3, r2
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004310:	4935      	ldr	r1, [pc, #212]	; (80043e8 <HAL_GPIO_Init+0x328>)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	3302      	adds	r3, #2
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431e:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <HAL_GPIO_Init+0x354>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004342:	4a34      	ldr	r2, [pc, #208]	; (8004414 <HAL_GPIO_Init+0x354>)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004348:	4b32      	ldr	r3, [pc, #200]	; (8004414 <HAL_GPIO_Init+0x354>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800436c:	4a29      	ldr	r2, [pc, #164]	; (8004414 <HAL_GPIO_Init+0x354>)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004372:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_GPIO_Init+0x354>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004396:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <HAL_GPIO_Init+0x354>)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_GPIO_Init+0x354>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <HAL_GPIO_Init+0x354>)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3301      	adds	r3, #1
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	f67f ae84 	bls.w	80040dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3724      	adds	r7, #36	; 0x24
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40013800 	.word	0x40013800
 80043ec:	40020000 	.word	0x40020000
 80043f0:	40020400 	.word	0x40020400
 80043f4:	40020800 	.word	0x40020800
 80043f8:	40020c00 	.word	0x40020c00
 80043fc:	40021000 	.word	0x40021000
 8004400:	40021400 	.word	0x40021400
 8004404:	40021800 	.word	0x40021800
 8004408:	40021c00 	.word	0x40021c00
 800440c:	40022000 	.word	0x40022000
 8004410:	40022400 	.word	0x40022400
 8004414:	40013c00 	.word	0x40013c00

08004418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
 8004424:	4613      	mov	r3, r2
 8004426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004428:	787b      	ldrb	r3, [r7, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004434:	e003      	b.n	800443e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	041a      	lsls	r2, r3, #16
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	619a      	str	r2, [r3, #24]
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e264      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d075      	beq.n	8004556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800446a:	4ba3      	ldr	r3, [pc, #652]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b04      	cmp	r3, #4
 8004474:	d00c      	beq.n	8004490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004476:	4ba0      	ldr	r3, [pc, #640]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800447e:	2b08      	cmp	r3, #8
 8004480:	d112      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004482:	4b9d      	ldr	r3, [pc, #628]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448e:	d10b      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	4b99      	ldr	r3, [pc, #612]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d05b      	beq.n	8004554 <HAL_RCC_OscConfig+0x108>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d157      	bne.n	8004554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e23f      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x74>
 80044b2:	4b91      	ldr	r3, [pc, #580]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a90      	ldr	r2, [pc, #576]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e01d      	b.n	80044fc <HAL_RCC_OscConfig+0xb0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x98>
 80044ca:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a8a      	ldr	r2, [pc, #552]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a87      	ldr	r2, [pc, #540]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0xb0>
 80044e4:	4b84      	ldr	r3, [pc, #528]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a83      	ldr	r2, [pc, #524]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b81      	ldr	r3, [pc, #516]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a80      	ldr	r2, [pc, #512]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7ff f9d4 	bl	80038b0 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800450c:	f7ff f9d0 	bl	80038b0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e204      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b76      	ldr	r3, [pc, #472]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0xc0>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7ff f9c0 	bl	80038b0 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7ff f9bc 	bl	80038b0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e1f0      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	4b6c      	ldr	r3, [pc, #432]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0xe8>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004562:	4b65      	ldr	r3, [pc, #404]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	4b62      	ldr	r3, [pc, #392]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d11c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457a:	4b5f      	ldr	r3, [pc, #380]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	4b5c      	ldr	r3, [pc, #368]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCC_OscConfig+0x152>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e1c4      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b56      	ldr	r3, [pc, #344]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4952      	ldr	r1, [pc, #328]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	e03a      	b.n	800462a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045bc:	4b4f      	ldr	r3, [pc, #316]	; (80046fc <HAL_RCC_OscConfig+0x2b0>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7ff f975 	bl	80038b0 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ca:	f7ff f971 	bl	80038b0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e1a5      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4940      	ldr	r1, [pc, #256]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
 80045fc:	e015      	b.n	800462a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <HAL_RCC_OscConfig+0x2b0>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7ff f954 	bl	80038b0 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460c:	f7ff f950 	bl	80038b0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e184      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d030      	beq.n	8004698 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463e:	4b30      	ldr	r3, [pc, #192]	; (8004700 <HAL_RCC_OscConfig+0x2b4>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7ff f934 	bl	80038b0 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464c:	f7ff f930 	bl	80038b0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e164      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x200>
 800466a:	e015      	b.n	8004698 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_OscConfig+0x2b4>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7ff f91d 	bl	80038b0 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467a:	f7ff f919 	bl	80038b0 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e14d      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468c:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a0 	beq.w	80047e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_OscConfig+0x2b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d121      	bne.n	8004726 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_RCC_OscConfig+0x2b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a07      	ldr	r2, [pc, #28]	; (8004704 <HAL_RCC_OscConfig+0x2b8>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ee:	f7ff f8df 	bl	80038b0 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	e011      	b.n	800471a <HAL_RCC_OscConfig+0x2ce>
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	42470000 	.word	0x42470000
 8004700:	42470e80 	.word	0x42470e80
 8004704:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004708:	f7ff f8d2 	bl	80038b0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e106      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471a:	4b85      	ldr	r3, [pc, #532]	; (8004930 <HAL_RCC_OscConfig+0x4e4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d106      	bne.n	800473c <HAL_RCC_OscConfig+0x2f0>
 800472e:	4b81      	ldr	r3, [pc, #516]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a80      	ldr	r2, [pc, #512]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
 800473a:	e01c      	b.n	8004776 <HAL_RCC_OscConfig+0x32a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x312>
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a7a      	ldr	r2, [pc, #488]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
 8004750:	4b78      	ldr	r3, [pc, #480]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	4a77      	ldr	r2, [pc, #476]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	; 0x70
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0x32a>
 800475e:	4b75      	ldr	r3, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a74      	ldr	r2, [pc, #464]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
 800476a:	4b72      	ldr	r3, [pc, #456]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a71      	ldr	r2, [pc, #452]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d015      	beq.n	80047aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7ff f897 	bl	80038b0 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7ff f893 	bl	80038b0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0c5      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b65      	ldr	r3, [pc, #404]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ee      	beq.n	8004786 <HAL_RCC_OscConfig+0x33a>
 80047a8:	e014      	b.n	80047d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7ff f881 	bl	80038b0 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7ff f87d 	bl	80038b0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e0af      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c8:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b56      	ldr	r3, [pc, #344]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a55      	ldr	r2, [pc, #340]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 809b 	beq.w	8004926 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047f0:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d05c      	beq.n	80048b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d141      	bne.n	8004888 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b4c      	ldr	r3, [pc, #304]	; (8004938 <HAL_RCC_OscConfig+0x4ec>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7ff f851 	bl	80038b0 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004812:	f7ff f84d 	bl	80038b0 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e081      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004824:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	019b      	lsls	r3, r3, #6
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	3b01      	subs	r3, #1
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	4937      	ldr	r1, [pc, #220]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485a:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_RCC_OscConfig+0x4ec>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7ff f826 	bl	80038b0 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7ff f822 	bl	80038b0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e056      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x41c>
 8004886:	e04e      	b.n	8004926 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_RCC_OscConfig+0x4ec>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7ff f80f 	bl	80038b0 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004896:	f7ff f80b 	bl	80038b0 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e03f      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a8:	4b22      	ldr	r3, [pc, #136]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x44a>
 80048b4:	e037      	b.n	8004926 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e032      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <HAL_RCC_OscConfig+0x4e8>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d028      	beq.n	8004922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d121      	bne.n	8004922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d11a      	bne.n	8004922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f2:	4013      	ands	r3, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d111      	bne.n	8004922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d107      	bne.n	8004922 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40007000 	.word	0x40007000
 8004934:	40023800 	.word	0x40023800
 8004938:	42470060 	.word	0x42470060

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0cc      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b68      	ldr	r3, [pc, #416]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d90c      	bls.n	8004978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0b8      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d020      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4a58      	ldr	r2, [pc, #352]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800499a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a8:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	494d      	ldr	r1, [pc, #308]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d044      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d119      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e07f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d003      	beq.n	80049fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b3f      	ldr	r3, [pc, #252]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e06f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e067      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4934      	ldr	r1, [pc, #208]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fe ff40 	bl	80038b0 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a34:	f7fe ff3c 	bl	80038b0 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e04f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 020c 	and.w	r2, r3, #12
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d1eb      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d20c      	bcs.n	8004a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e032      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4916      	ldr	r1, [pc, #88]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	490e      	ldr	r1, [pc, #56]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ac2:	f000 f821 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	490a      	ldr	r1, [pc, #40]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fea0 	bl	8003828 <HAL_InitTick>

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023c00 	.word	0x40023c00
 8004af8:	40023800 	.word	0x40023800
 8004afc:	08007040 	.word	0x08007040
 8004b00:	2000001c 	.word	0x2000001c
 8004b04:	2000004c 	.word	0x2000004c

08004b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b0e:	2100      	movs	r1, #0
 8004b10:	6079      	str	r1, [r7, #4]
 8004b12:	2100      	movs	r1, #0
 8004b14:	60f9      	str	r1, [r7, #12]
 8004b16:	2100      	movs	r1, #0
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b1e:	4952      	ldr	r1, [pc, #328]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b20:	6889      	ldr	r1, [r1, #8]
 8004b22:	f001 010c 	and.w	r1, r1, #12
 8004b26:	2908      	cmp	r1, #8
 8004b28:	d00d      	beq.n	8004b46 <HAL_RCC_GetSysClockFreq+0x3e>
 8004b2a:	2908      	cmp	r1, #8
 8004b2c:	f200 8094 	bhi.w	8004c58 <HAL_RCC_GetSysClockFreq+0x150>
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x32>
 8004b34:	2904      	cmp	r1, #4
 8004b36:	d003      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x38>
 8004b38:	e08e      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b3a:	4b4c      	ldr	r3, [pc, #304]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004b3c:	60bb      	str	r3, [r7, #8]
       break;
 8004b3e:	e08e      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b40:	4b4b      	ldr	r3, [pc, #300]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b42:	60bb      	str	r3, [r7, #8]
      break;
 8004b44:	e08b      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b46:	4948      	ldr	r1, [pc, #288]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b48:	6849      	ldr	r1, [r1, #4]
 8004b4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004b4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b50:	4945      	ldr	r1, [pc, #276]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b52:	6849      	ldr	r1, [r1, #4]
 8004b54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	d024      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5c:	4942      	ldr	r1, [pc, #264]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b5e:	6849      	ldr	r1, [r1, #4]
 8004b60:	0989      	lsrs	r1, r1, #6
 8004b62:	4608      	mov	r0, r1
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004b6c:	f04f 0500 	mov.w	r5, #0
 8004b70:	ea00 0204 	and.w	r2, r0, r4
 8004b74:	ea01 0305 	and.w	r3, r1, r5
 8004b78:	493d      	ldr	r1, [pc, #244]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b7a:	fb01 f003 	mul.w	r0, r1, r3
 8004b7e:	2100      	movs	r1, #0
 8004b80:	fb01 f102 	mul.w	r1, r1, r2
 8004b84:	1844      	adds	r4, r0, r1
 8004b86:	493a      	ldr	r1, [pc, #232]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b88:	fba2 0101 	umull	r0, r1, r2, r1
 8004b8c:	1863      	adds	r3, r4, r1
 8004b8e:	4619      	mov	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f7fb fb7a 	bl	8000290 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e04a      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	461a      	mov	r2, r3
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bb6:	f04f 0100 	mov.w	r1, #0
 8004bba:	ea02 0400 	and.w	r4, r2, r0
 8004bbe:	ea03 0501 	and.w	r5, r3, r1
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	014b      	lsls	r3, r1, #5
 8004bd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bd4:	0142      	lsls	r2, r0, #5
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	1b00      	subs	r0, r0, r4
 8004bdc:	eb61 0105 	sbc.w	r1, r1, r5
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	018b      	lsls	r3, r1, #6
 8004bea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bee:	0182      	lsls	r2, r0, #6
 8004bf0:	1a12      	subs	r2, r2, r0
 8004bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf6:	f04f 0000 	mov.w	r0, #0
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	00d9      	lsls	r1, r3, #3
 8004c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c04:	00d0      	lsls	r0, r2, #3
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	1912      	adds	r2, r2, r4
 8004c0c:	eb45 0303 	adc.w	r3, r5, r3
 8004c10:	f04f 0000 	mov.w	r0, #0
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	0299      	lsls	r1, r3, #10
 8004c1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c1e:	0290      	lsls	r0, r2, #10
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	f7fb fb2e 	bl	8000290 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	60bb      	str	r3, [r7, #8]
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004c5a:	60bb      	str	r3, [r7, #8]
      break;
 8004c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdb0      	pop	{r4, r5, r7, pc}
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	017d7840 	.word	0x017d7840

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	2000001c 	.word	0x2000001c

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	08007050 	.word	0x08007050

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb8:	f7ff ffdc 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	08007050 	.word	0x08007050

08004cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07b      	b.n	8004de6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d108      	bne.n	8004d08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d009      	beq.n	8004d14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	61da      	str	r2, [r3, #28]
 8004d06:	e005      	b.n	8004d14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fd f854 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	f003 0104 	and.w	r1, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0210 	and.w	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b088      	sub	sp, #32
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_SPI_Transmit+0x22>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e126      	b.n	800505e <HAL_SPI_Transmit+0x270>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e18:	f7fe fd4a 	bl	80038b0 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e32:	e10b      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Transmit+0x52>
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e44:	e102      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	d10f      	bne.n	8004eae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d007      	beq.n	8004ecc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed4:	d14b      	bne.n	8004f6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Transmit+0xf6>
 8004ede:	8afb      	ldrh	r3, [r7, #22]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d13e      	bne.n	8004f62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	881a      	ldrh	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	1c9a      	adds	r2, r3, #2
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f08:	e02b      	b.n	8004f62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d112      	bne.n	8004f3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	881a      	ldrh	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f3c:	e011      	b.n	8004f62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3e:	f7fe fcb7 	bl	80038b0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d803      	bhi.n	8004f56 <HAL_SPI_Transmit+0x168>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d102      	bne.n	8004f5c <HAL_SPI_Transmit+0x16e>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f60:	e074      	b.n	800504c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ce      	bne.n	8004f0a <HAL_SPI_Transmit+0x11c>
 8004f6c:	e04c      	b.n	8005008 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_SPI_Transmit+0x18e>
 8004f76:	8afb      	ldrh	r3, [r7, #22]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d140      	bne.n	8004ffe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fa2:	e02c      	b.n	8004ffe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d113      	bne.n	8004fda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fd8:	e011      	b.n	8004ffe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fda:	f7fe fc69 	bl	80038b0 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d803      	bhi.n	8004ff2 <HAL_SPI_Transmit+0x204>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d102      	bne.n	8004ff8 <HAL_SPI_Transmit+0x20a>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ffc:	e026      	b.n	800504c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1cd      	bne.n	8004fa4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fbcb 	bl	80057a8 <SPI_EndRxTxTransaction>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e000      	b.n	800504c <HAL_SPI_Transmit+0x25e>
  }

error:
 800504a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800505c:	7ffb      	ldrb	r3, [r7, #31]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3720      	adds	r7, #32
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b088      	sub	sp, #32
 800506a:	af02      	add	r7, sp, #8
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005082:	d112      	bne.n	80050aa <HAL_SPI_Receive+0x44>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10e      	bne.n	80050aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2204      	movs	r2, #4
 8005090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8f1 	bl	8005288 <HAL_SPI_TransmitReceive>
 80050a6:	4603      	mov	r3, r0
 80050a8:	e0ea      	b.n	8005280 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_Receive+0x52>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0e3      	b.n	8005280 <HAL_SPI_Receive+0x21a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c0:	f7fe fbf6 	bl	80038b0 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
 80050d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050d6:	e0ca      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Receive+0x7e>
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050e8:	e0c1      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2204      	movs	r2, #4
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005130:	d10f      	bne.n	8005152 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005150:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d007      	beq.n	8005170 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d162      	bne.n	800523e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005178:	e02e      	b.n	80051d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d115      	bne.n	80051b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f103 020c 	add.w	r2, r3, #12
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051b2:	e011      	b.n	80051d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051b4:	f7fe fb7c 	bl	80038b0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d803      	bhi.n	80051cc <HAL_SPI_Receive+0x166>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d102      	bne.n	80051d2 <HAL_SPI_Receive+0x16c>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051d6:	e04a      	b.n	800526e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1cb      	bne.n	800517a <HAL_SPI_Receive+0x114>
 80051e2:	e031      	b.n	8005248 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d113      	bne.n	800521a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	b292      	uxth	r2, r2
 80051fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	1c9a      	adds	r2, r3, #2
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005218:	e011      	b.n	800523e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521a:	f7fe fb49 	bl	80038b0 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d803      	bhi.n	8005232 <HAL_SPI_Receive+0x1cc>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d102      	bne.n	8005238 <HAL_SPI_Receive+0x1d2>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800523c:	e017      	b.n	800526e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1cd      	bne.n	80051e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fa45 	bl	80056dc <SPI_EndRxTransaction>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	75fb      	strb	r3, [r7, #23]
 800526a:	e000      	b.n	800526e <HAL_SPI_Receive+0x208>
  }

error :
 800526c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800527e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	; 0x30
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005296:	2301      	movs	r3, #1
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x26>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e18a      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x33c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b6:	f7fe fafb 	bl	80038b0 <HAL_GetTick>
 80052ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d00f      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x70>
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052de:	d107      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x68>
 80052e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d003      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052f6:	e15b      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_SPI_TransmitReceive+0x82>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_SPI_TransmitReceive+0x82>
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d103      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005310:	e14e      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b04      	cmp	r3, #4
 800531c:	d003      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2205      	movs	r2, #5
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	887a      	ldrh	r2, [r7, #2]
 800534e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d007      	beq.n	800537a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005382:	d178      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x10a>
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d166      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	1c9a      	adds	r2, r3, #2
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053b6:	e053      	b.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d11b      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x176>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x176>
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d113      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d119      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x1b8>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d014      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	b292      	uxth	r2, r2
 8005422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	1c9a      	adds	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800543c:	2301      	movs	r3, #1
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005440:	f7fe fa36 	bl	80038b0 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800544c:	429a      	cmp	r2, r3
 800544e:	d807      	bhi.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d003      	beq.n	8005460 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800545e:	e0a7      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1a6      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x130>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1a1      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x130>
 8005474:	e07c      	b.n	8005570 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x1fc>
 800547e:	8b7b      	ldrh	r3, [r7, #26]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d16b      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	7812      	ldrb	r2, [r2, #0]
 8005490:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054aa:	e057      	b.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d11c      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d017      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d114      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d119      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x2ae>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d014      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005532:	2301      	movs	r3, #1
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005536:	f7fe f9bb 	bl	80038b0 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005542:	429a      	cmp	r2, r3
 8005544:	d803      	bhi.n	800554e <HAL_SPI_TransmitReceive+0x2c6>
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d102      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x2cc>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800555a:	e029      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1a2      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x224>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d19d      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f917 	bl	80057a8 <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800558c:	e010      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	e000      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3730      	adds	r7, #48	; 0x30
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055dc:	f7fe f968 	bl	80038b0 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055ec:	f7fe f960 	bl	80038b0 <HAL_GetTick>
 80055f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055f2:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	e054      	b.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d050      	beq.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800560c:	f7fe f950 	bl	80038b0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	429a      	cmp	r2, r3
 800561a:	d902      	bls.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d13d      	bne.n	800569e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800563a:	d111      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005644:	d004      	beq.n	8005650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564e:	d107      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005668:	d10f      	bne.n	800568a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e017      	b.n	80056ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d19b      	bne.n	8005604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2000001c 	.word	0x2000001c

080056dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f0:	d111      	bne.n	8005716 <SPI_EndRxTransaction+0x3a>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fa:	d004      	beq.n	8005706 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d107      	bne.n	8005716 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571e:	d12a      	bne.n	8005776 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005728:	d012      	beq.n	8005750 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2200      	movs	r2, #0
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ff49 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d02d      	beq.n	800579c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e026      	b.n	800579e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	2101      	movs	r1, #1
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff ff36 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01a      	beq.n	800579c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e013      	b.n	800579e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	2101      	movs	r1, #1
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff ff23 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e000      	b.n	800579e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <SPI_EndRxTxTransaction+0x7c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <SPI_EndRxTxTransaction+0x80>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0d5b      	lsrs	r3, r3, #21
 80057c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d2:	d112      	bne.n	80057fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fef4 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e00f      	b.n	800581a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3b01      	subs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d0f2      	beq.n	80057fa <SPI_EndRxTxTransaction+0x52>
 8005814:	e000      	b.n	8005818 <SPI_EndRxTxTransaction+0x70>
        break;
 8005816:	bf00      	nop
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	2000001c 	.word	0x2000001c
 8005828:	165e9f81 	.word	0x165e9f81

0800582c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e03f      	b.n	80058be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fc fed4 	bl	8002600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2224      	movs	r2, #36	; 0x24
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800586e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f905 	bl	8005a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695a      	ldr	r2, [r3, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b08a      	sub	sp, #40	; 0x28
 80058ca:	af02      	add	r7, sp, #8
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d17c      	bne.n	80059e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_UART_Transmit+0x2c>
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e075      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Transmit+0x3e>
 8005900:	2302      	movs	r3, #2
 8005902:	e06e      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2221      	movs	r2, #33	; 0x21
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800591a:	f7fd ffc9 	bl	80038b0 <HAL_GetTick>
 800591e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	88fa      	ldrh	r2, [r7, #6]
 800592a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d108      	bne.n	8005948 <HAL_UART_Transmit+0x82>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e003      	b.n	8005950 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005958:	e02a      	b.n	80059b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f840 	bl	80059ea <UART_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e036      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005988:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	3302      	adds	r3, #2
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e007      	b.n	80059a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1cf      	bne.n	800595a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	2140      	movs	r1, #64	; 0x40
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f810 	bl	80059ea <UART_WaitOnFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e006      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e000      	b.n	80059e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
  }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fa:	e02c      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d028      	beq.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a0a:	f7fd ff51 	bl	80038b0 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d21d      	bcs.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d0c3      	beq.n	80059fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	b09f      	sub	sp, #124	; 0x7c
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	68d9      	ldr	r1, [r3, #12]
 8005a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	ea40 0301 	orr.w	r3, r0, r1
 8005aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ac4:	f021 010c 	bic.w	r1, r1, #12
 8005ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	6999      	ldr	r1, [r3, #24]
 8005ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	ea40 0301 	orr.w	r3, r0, r1
 8005ae8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4bc5      	ldr	r3, [pc, #788]	; (8005e04 <UART_SetConfig+0x384>)
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d004      	beq.n	8005afe <UART_SetConfig+0x7e>
 8005af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4bc3      	ldr	r3, [pc, #780]	; (8005e08 <UART_SetConfig+0x388>)
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d103      	bne.n	8005b06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005afe:	f7ff f8d9 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8005b02:	6778      	str	r0, [r7, #116]	; 0x74
 8005b04:	e002      	b.n	8005b0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b06:	f7ff f8c1 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8005b0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b14:	f040 80b6 	bne.w	8005c84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b1a:	461c      	mov	r4, r3
 8005b1c:	f04f 0500 	mov.w	r5, #0
 8005b20:	4622      	mov	r2, r4
 8005b22:	462b      	mov	r3, r5
 8005b24:	1891      	adds	r1, r2, r2
 8005b26:	6439      	str	r1, [r7, #64]	; 0x40
 8005b28:	415b      	adcs	r3, r3
 8005b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b30:	1912      	adds	r2, r2, r4
 8005b32:	eb45 0303 	adc.w	r3, r5, r3
 8005b36:	f04f 0000 	mov.w	r0, #0
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	00d9      	lsls	r1, r3, #3
 8005b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b44:	00d0      	lsls	r0, r2, #3
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	1911      	adds	r1, r2, r4
 8005b4c:	6639      	str	r1, [r7, #96]	; 0x60
 8005b4e:	416b      	adcs	r3, r5
 8005b50:	667b      	str	r3, [r7, #100]	; 0x64
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	1891      	adds	r1, r2, r2
 8005b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b60:	415b      	adcs	r3, r3
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b6c:	f7fa fb90 	bl	8000290 <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4ba5      	ldr	r3, [pc, #660]	; (8005e0c <UART_SetConfig+0x38c>)
 8005b76:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	011e      	lsls	r6, r3, #4
 8005b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b80:	461c      	mov	r4, r3
 8005b82:	f04f 0500 	mov.w	r5, #0
 8005b86:	4622      	mov	r2, r4
 8005b88:	462b      	mov	r3, r5
 8005b8a:	1891      	adds	r1, r2, r2
 8005b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8005b8e:	415b      	adcs	r3, r3
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
 8005b92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b96:	1912      	adds	r2, r2, r4
 8005b98:	eb45 0303 	adc.w	r3, r5, r3
 8005b9c:	f04f 0000 	mov.w	r0, #0
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	00d9      	lsls	r1, r3, #3
 8005ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005baa:	00d0      	lsls	r0, r2, #3
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	1911      	adds	r1, r2, r4
 8005bb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bb4:	416b      	adcs	r3, r5
 8005bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	1891      	adds	r1, r2, r2
 8005bc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005bc6:	415b      	adcs	r3, r3
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bd2:	f7fa fb5d 	bl	8000290 <__aeabi_uldivmod>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4b8c      	ldr	r3, [pc, #560]	; (8005e0c <UART_SetConfig+0x38c>)
 8005bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	2164      	movs	r1, #100	; 0x64
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	3332      	adds	r3, #50	; 0x32
 8005bee:	4a87      	ldr	r2, [pc, #540]	; (8005e0c <UART_SetConfig+0x38c>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bfc:	441e      	add	r6, r3
 8005bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c00:	4618      	mov	r0, r3
 8005c02:	f04f 0100 	mov.w	r1, #0
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	1894      	adds	r4, r2, r2
 8005c0c:	623c      	str	r4, [r7, #32]
 8005c0e:	415b      	adcs	r3, r3
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
 8005c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c16:	1812      	adds	r2, r2, r0
 8005c18:	eb41 0303 	adc.w	r3, r1, r3
 8005c1c:	f04f 0400 	mov.w	r4, #0
 8005c20:	f04f 0500 	mov.w	r5, #0
 8005c24:	00dd      	lsls	r5, r3, #3
 8005c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c2a:	00d4      	lsls	r4, r2, #3
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	462b      	mov	r3, r5
 8005c30:	1814      	adds	r4, r2, r0
 8005c32:	653c      	str	r4, [r7, #80]	; 0x50
 8005c34:	414b      	adcs	r3, r1
 8005c36:	657b      	str	r3, [r7, #84]	; 0x54
 8005c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	1891      	adds	r1, r2, r2
 8005c44:	61b9      	str	r1, [r7, #24]
 8005c46:	415b      	adcs	r3, r3
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c52:	f7fa fb1d 	bl	8000290 <__aeabi_uldivmod>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4b6c      	ldr	r3, [pc, #432]	; (8005e0c <UART_SetConfig+0x38c>)
 8005c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	2164      	movs	r1, #100	; 0x64
 8005c64:	fb01 f303 	mul.w	r3, r1, r3
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	3332      	adds	r3, #50	; 0x32
 8005c6e:	4a67      	ldr	r2, [pc, #412]	; (8005e0c <UART_SetConfig+0x38c>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	f003 0207 	and.w	r2, r3, #7
 8005c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4432      	add	r2, r6
 8005c80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c82:	e0b9      	b.n	8005df8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c86:	461c      	mov	r4, r3
 8005c88:	f04f 0500 	mov.w	r5, #0
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	462b      	mov	r3, r5
 8005c90:	1891      	adds	r1, r2, r2
 8005c92:	6139      	str	r1, [r7, #16]
 8005c94:	415b      	adcs	r3, r3
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c9c:	1912      	adds	r2, r2, r4
 8005c9e:	eb45 0303 	adc.w	r3, r5, r3
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	00d9      	lsls	r1, r3, #3
 8005cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cb0:	00d0      	lsls	r0, r2, #3
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	eb12 0804 	adds.w	r8, r2, r4
 8005cba:	eb43 0905 	adc.w	r9, r3, r5
 8005cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f04f 0100 	mov.w	r1, #0
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	008b      	lsls	r3, r1, #2
 8005cd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cd6:	0082      	lsls	r2, r0, #2
 8005cd8:	4640      	mov	r0, r8
 8005cda:	4649      	mov	r1, r9
 8005cdc:	f7fa fad8 	bl	8000290 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4b49      	ldr	r3, [pc, #292]	; (8005e0c <UART_SetConfig+0x38c>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	011e      	lsls	r6, r3, #4
 8005cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f04f 0100 	mov.w	r1, #0
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	1894      	adds	r4, r2, r2
 8005cfc:	60bc      	str	r4, [r7, #8]
 8005cfe:	415b      	adcs	r3, r3
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d06:	1812      	adds	r2, r2, r0
 8005d08:	eb41 0303 	adc.w	r3, r1, r3
 8005d0c:	f04f 0400 	mov.w	r4, #0
 8005d10:	f04f 0500 	mov.w	r5, #0
 8005d14:	00dd      	lsls	r5, r3, #3
 8005d16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d1a:	00d4      	lsls	r4, r2, #3
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	1814      	adds	r4, r2, r0
 8005d22:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d24:	414b      	adcs	r3, r1
 8005d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	008b      	lsls	r3, r1, #2
 8005d3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d40:	0082      	lsls	r2, r0, #2
 8005d42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d46:	f7fa faa3 	bl	8000290 <__aeabi_uldivmod>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4b2f      	ldr	r3, [pc, #188]	; (8005e0c <UART_SetConfig+0x38c>)
 8005d50:	fba3 1302 	umull	r1, r3, r3, r2
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	2164      	movs	r1, #100	; 0x64
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	3332      	adds	r3, #50	; 0x32
 8005d62:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <UART_SetConfig+0x38c>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d6e:	441e      	add	r6, r3
 8005d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d72:	4618      	mov	r0, r3
 8005d74:	f04f 0100 	mov.w	r1, #0
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	1894      	adds	r4, r2, r2
 8005d7e:	603c      	str	r4, [r7, #0]
 8005d80:	415b      	adcs	r3, r3
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d88:	1812      	adds	r2, r2, r0
 8005d8a:	eb41 0303 	adc.w	r3, r1, r3
 8005d8e:	f04f 0400 	mov.w	r4, #0
 8005d92:	f04f 0500 	mov.w	r5, #0
 8005d96:	00dd      	lsls	r5, r3, #3
 8005d98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d9c:	00d4      	lsls	r4, r2, #3
 8005d9e:	4622      	mov	r2, r4
 8005da0:	462b      	mov	r3, r5
 8005da2:	eb12 0a00 	adds.w	sl, r2, r0
 8005da6:	eb43 0b01 	adc.w	fp, r3, r1
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	008b      	lsls	r3, r1, #2
 8005dbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dc2:	0082      	lsls	r2, r0, #2
 8005dc4:	4650      	mov	r0, sl
 8005dc6:	4659      	mov	r1, fp
 8005dc8:	f7fa fa62 	bl	8000290 <__aeabi_uldivmod>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <UART_SetConfig+0x38c>)
 8005dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2164      	movs	r1, #100	; 0x64
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	3332      	adds	r3, #50	; 0x32
 8005de4:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <UART_SetConfig+0x38c>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4432      	add	r2, r6
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	377c      	adds	r7, #124	; 0x7c
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e02:	bf00      	nop
 8005e04:	40011000 	.word	0x40011000
 8005e08:	40011400 	.word	0x40011400
 8005e0c:	51eb851f 	.word	0x51eb851f

08005e10 <__errno>:
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <__errno+0x8>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000054 	.word	0x20000054

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	4d0d      	ldr	r5, [pc, #52]	; (8005e54 <__libc_init_array+0x38>)
 8005e20:	4c0d      	ldr	r4, [pc, #52]	; (8005e58 <__libc_init_array+0x3c>)
 8005e22:	1b64      	subs	r4, r4, r5
 8005e24:	10a4      	asrs	r4, r4, #2
 8005e26:	2600      	movs	r6, #0
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	4d0b      	ldr	r5, [pc, #44]	; (8005e5c <__libc_init_array+0x40>)
 8005e2e:	4c0c      	ldr	r4, [pc, #48]	; (8005e60 <__libc_init_array+0x44>)
 8005e30:	f000 ffec 	bl	8006e0c <_init>
 8005e34:	1b64      	subs	r4, r4, r5
 8005e36:	10a4      	asrs	r4, r4, #2
 8005e38:	2600      	movs	r6, #0
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08007100 	.word	0x08007100
 8005e58:	08007100 	.word	0x08007100
 8005e5c:	08007100 	.word	0x08007100
 8005e60:	08007104 	.word	0x08007104

08005e64 <memset>:
 8005e64:	4402      	add	r2, r0
 8005e66:	4603      	mov	r3, r0
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d100      	bne.n	8005e6e <memset+0xa>
 8005e6c:	4770      	bx	lr
 8005e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e72:	e7f9      	b.n	8005e68 <memset+0x4>

08005e74 <iprintf>:
 8005e74:	b40f      	push	{r0, r1, r2, r3}
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <iprintf+0x2c>)
 8005e78:	b513      	push	{r0, r1, r4, lr}
 8005e7a:	681c      	ldr	r4, [r3, #0]
 8005e7c:	b124      	cbz	r4, 8005e88 <iprintf+0x14>
 8005e7e:	69a3      	ldr	r3, [r4, #24]
 8005e80:	b913      	cbnz	r3, 8005e88 <iprintf+0x14>
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 fa5e 	bl	8006344 <__sinit>
 8005e88:	ab05      	add	r3, sp, #20
 8005e8a:	9a04      	ldr	r2, [sp, #16]
 8005e8c:	68a1      	ldr	r1, [r4, #8]
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fc2f 	bl	80066f4 <_vfiprintf_r>
 8005e96:	b002      	add	sp, #8
 8005e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9c:	b004      	add	sp, #16
 8005e9e:	4770      	bx	lr
 8005ea0:	20000054 	.word	0x20000054

08005ea4 <_puts_r>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	460e      	mov	r6, r1
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b118      	cbz	r0, 8005eb4 <_puts_r+0x10>
 8005eac:	6983      	ldr	r3, [r0, #24]
 8005eae:	b90b      	cbnz	r3, 8005eb4 <_puts_r+0x10>
 8005eb0:	f000 fa48 	bl	8006344 <__sinit>
 8005eb4:	69ab      	ldr	r3, [r5, #24]
 8005eb6:	68ac      	ldr	r4, [r5, #8]
 8005eb8:	b913      	cbnz	r3, 8005ec0 <_puts_r+0x1c>
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 fa42 	bl	8006344 <__sinit>
 8005ec0:	4b2c      	ldr	r3, [pc, #176]	; (8005f74 <_puts_r+0xd0>)
 8005ec2:	429c      	cmp	r4, r3
 8005ec4:	d120      	bne.n	8005f08 <_puts_r+0x64>
 8005ec6:	686c      	ldr	r4, [r5, #4]
 8005ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eca:	07db      	lsls	r3, r3, #31
 8005ecc:	d405      	bmi.n	8005eda <_puts_r+0x36>
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	0598      	lsls	r0, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_puts_r+0x36>
 8005ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ed6:	f000 fad3 	bl	8006480 <__retarget_lock_acquire_recursive>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	0719      	lsls	r1, r3, #28
 8005ede:	d51d      	bpl.n	8005f1c <_puts_r+0x78>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	b1db      	cbz	r3, 8005f1c <_puts_r+0x78>
 8005ee4:	3e01      	subs	r6, #1
 8005ee6:	68a3      	ldr	r3, [r4, #8]
 8005ee8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eec:	3b01      	subs	r3, #1
 8005eee:	60a3      	str	r3, [r4, #8]
 8005ef0:	bb39      	cbnz	r1, 8005f42 <_puts_r+0x9e>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da38      	bge.n	8005f68 <_puts_r+0xc4>
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	210a      	movs	r1, #10
 8005efa:	4628      	mov	r0, r5
 8005efc:	f000 f848 	bl	8005f90 <__swbuf_r>
 8005f00:	3001      	adds	r0, #1
 8005f02:	d011      	beq.n	8005f28 <_puts_r+0x84>
 8005f04:	250a      	movs	r5, #10
 8005f06:	e011      	b.n	8005f2c <_puts_r+0x88>
 8005f08:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <_puts_r+0xd4>)
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	d101      	bne.n	8005f12 <_puts_r+0x6e>
 8005f0e:	68ac      	ldr	r4, [r5, #8]
 8005f10:	e7da      	b.n	8005ec8 <_puts_r+0x24>
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <_puts_r+0xd8>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	bf08      	it	eq
 8005f18:	68ec      	ldreq	r4, [r5, #12]
 8005f1a:	e7d5      	b.n	8005ec8 <_puts_r+0x24>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 f888 	bl	8006034 <__swsetup_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0dd      	beq.n	8005ee4 <_puts_r+0x40>
 8005f28:	f04f 35ff 	mov.w	r5, #4294967295
 8005f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f2e:	07da      	lsls	r2, r3, #31
 8005f30:	d405      	bmi.n	8005f3e <_puts_r+0x9a>
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	059b      	lsls	r3, r3, #22
 8005f36:	d402      	bmi.n	8005f3e <_puts_r+0x9a>
 8005f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f3a:	f000 faa2 	bl	8006482 <__retarget_lock_release_recursive>
 8005f3e:	4628      	mov	r0, r5
 8005f40:	bd70      	pop	{r4, r5, r6, pc}
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da04      	bge.n	8005f50 <_puts_r+0xac>
 8005f46:	69a2      	ldr	r2, [r4, #24]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	dc06      	bgt.n	8005f5a <_puts_r+0xb6>
 8005f4c:	290a      	cmp	r1, #10
 8005f4e:	d004      	beq.n	8005f5a <_puts_r+0xb6>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	6022      	str	r2, [r4, #0]
 8005f56:	7019      	strb	r1, [r3, #0]
 8005f58:	e7c5      	b.n	8005ee6 <_puts_r+0x42>
 8005f5a:	4622      	mov	r2, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 f817 	bl	8005f90 <__swbuf_r>
 8005f62:	3001      	adds	r0, #1
 8005f64:	d1bf      	bne.n	8005ee6 <_puts_r+0x42>
 8005f66:	e7df      	b.n	8005f28 <_puts_r+0x84>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	250a      	movs	r5, #10
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	6022      	str	r2, [r4, #0]
 8005f70:	701d      	strb	r5, [r3, #0]
 8005f72:	e7db      	b.n	8005f2c <_puts_r+0x88>
 8005f74:	08007084 	.word	0x08007084
 8005f78:	080070a4 	.word	0x080070a4
 8005f7c:	08007064 	.word	0x08007064

08005f80 <puts>:
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <puts+0xc>)
 8005f82:	4601      	mov	r1, r0
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f7ff bf8d 	b.w	8005ea4 <_puts_r>
 8005f8a:	bf00      	nop
 8005f8c:	20000054 	.word	0x20000054

08005f90 <__swbuf_r>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	460e      	mov	r6, r1
 8005f94:	4614      	mov	r4, r2
 8005f96:	4605      	mov	r5, r0
 8005f98:	b118      	cbz	r0, 8005fa2 <__swbuf_r+0x12>
 8005f9a:	6983      	ldr	r3, [r0, #24]
 8005f9c:	b90b      	cbnz	r3, 8005fa2 <__swbuf_r+0x12>
 8005f9e:	f000 f9d1 	bl	8006344 <__sinit>
 8005fa2:	4b21      	ldr	r3, [pc, #132]	; (8006028 <__swbuf_r+0x98>)
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	d12b      	bne.n	8006000 <__swbuf_r+0x70>
 8005fa8:	686c      	ldr	r4, [r5, #4]
 8005faa:	69a3      	ldr	r3, [r4, #24]
 8005fac:	60a3      	str	r3, [r4, #8]
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	071a      	lsls	r2, r3, #28
 8005fb2:	d52f      	bpl.n	8006014 <__swbuf_r+0x84>
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	b36b      	cbz	r3, 8006014 <__swbuf_r+0x84>
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	1ac0      	subs	r0, r0, r3
 8005fbe:	6963      	ldr	r3, [r4, #20]
 8005fc0:	b2f6      	uxtb	r6, r6
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	4637      	mov	r7, r6
 8005fc6:	dc04      	bgt.n	8005fd2 <__swbuf_r+0x42>
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f000 f926 	bl	800621c <_fflush_r>
 8005fd0:	bb30      	cbnz	r0, 8006020 <__swbuf_r+0x90>
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	60a3      	str	r3, [r4, #8]
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	6022      	str	r2, [r4, #0]
 8005fde:	701e      	strb	r6, [r3, #0]
 8005fe0:	6963      	ldr	r3, [r4, #20]
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	4283      	cmp	r3, r0
 8005fe6:	d004      	beq.n	8005ff2 <__swbuf_r+0x62>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	07db      	lsls	r3, r3, #31
 8005fec:	d506      	bpl.n	8005ffc <__swbuf_r+0x6c>
 8005fee:	2e0a      	cmp	r6, #10
 8005ff0:	d104      	bne.n	8005ffc <__swbuf_r+0x6c>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f911 	bl	800621c <_fflush_r>
 8005ffa:	b988      	cbnz	r0, 8006020 <__swbuf_r+0x90>
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <__swbuf_r+0x9c>)
 8006002:	429c      	cmp	r4, r3
 8006004:	d101      	bne.n	800600a <__swbuf_r+0x7a>
 8006006:	68ac      	ldr	r4, [r5, #8]
 8006008:	e7cf      	b.n	8005faa <__swbuf_r+0x1a>
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <__swbuf_r+0xa0>)
 800600c:	429c      	cmp	r4, r3
 800600e:	bf08      	it	eq
 8006010:	68ec      	ldreq	r4, [r5, #12]
 8006012:	e7ca      	b.n	8005faa <__swbuf_r+0x1a>
 8006014:	4621      	mov	r1, r4
 8006016:	4628      	mov	r0, r5
 8006018:	f000 f80c 	bl	8006034 <__swsetup_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	d0cb      	beq.n	8005fb8 <__swbuf_r+0x28>
 8006020:	f04f 37ff 	mov.w	r7, #4294967295
 8006024:	e7ea      	b.n	8005ffc <__swbuf_r+0x6c>
 8006026:	bf00      	nop
 8006028:	08007084 	.word	0x08007084
 800602c:	080070a4 	.word	0x080070a4
 8006030:	08007064 	.word	0x08007064

08006034 <__swsetup_r>:
 8006034:	4b32      	ldr	r3, [pc, #200]	; (8006100 <__swsetup_r+0xcc>)
 8006036:	b570      	push	{r4, r5, r6, lr}
 8006038:	681d      	ldr	r5, [r3, #0]
 800603a:	4606      	mov	r6, r0
 800603c:	460c      	mov	r4, r1
 800603e:	b125      	cbz	r5, 800604a <__swsetup_r+0x16>
 8006040:	69ab      	ldr	r3, [r5, #24]
 8006042:	b913      	cbnz	r3, 800604a <__swsetup_r+0x16>
 8006044:	4628      	mov	r0, r5
 8006046:	f000 f97d 	bl	8006344 <__sinit>
 800604a:	4b2e      	ldr	r3, [pc, #184]	; (8006104 <__swsetup_r+0xd0>)
 800604c:	429c      	cmp	r4, r3
 800604e:	d10f      	bne.n	8006070 <__swsetup_r+0x3c>
 8006050:	686c      	ldr	r4, [r5, #4]
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006058:	0719      	lsls	r1, r3, #28
 800605a:	d42c      	bmi.n	80060b6 <__swsetup_r+0x82>
 800605c:	06dd      	lsls	r5, r3, #27
 800605e:	d411      	bmi.n	8006084 <__swsetup_r+0x50>
 8006060:	2309      	movs	r3, #9
 8006062:	6033      	str	r3, [r6, #0]
 8006064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	f04f 30ff 	mov.w	r0, #4294967295
 800606e:	e03e      	b.n	80060ee <__swsetup_r+0xba>
 8006070:	4b25      	ldr	r3, [pc, #148]	; (8006108 <__swsetup_r+0xd4>)
 8006072:	429c      	cmp	r4, r3
 8006074:	d101      	bne.n	800607a <__swsetup_r+0x46>
 8006076:	68ac      	ldr	r4, [r5, #8]
 8006078:	e7eb      	b.n	8006052 <__swsetup_r+0x1e>
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <__swsetup_r+0xd8>)
 800607c:	429c      	cmp	r4, r3
 800607e:	bf08      	it	eq
 8006080:	68ec      	ldreq	r4, [r5, #12]
 8006082:	e7e6      	b.n	8006052 <__swsetup_r+0x1e>
 8006084:	0758      	lsls	r0, r3, #29
 8006086:	d512      	bpl.n	80060ae <__swsetup_r+0x7a>
 8006088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800608a:	b141      	cbz	r1, 800609e <__swsetup_r+0x6a>
 800608c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006090:	4299      	cmp	r1, r3
 8006092:	d002      	beq.n	800609a <__swsetup_r+0x66>
 8006094:	4630      	mov	r0, r6
 8006096:	f000 fa59 	bl	800654c <_free_r>
 800609a:	2300      	movs	r3, #0
 800609c:	6363      	str	r3, [r4, #52]	; 0x34
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060a4:	81a3      	strh	r3, [r4, #12]
 80060a6:	2300      	movs	r3, #0
 80060a8:	6063      	str	r3, [r4, #4]
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	f043 0308 	orr.w	r3, r3, #8
 80060b4:	81a3      	strh	r3, [r4, #12]
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	b94b      	cbnz	r3, 80060ce <__swsetup_r+0x9a>
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c4:	d003      	beq.n	80060ce <__swsetup_r+0x9a>
 80060c6:	4621      	mov	r1, r4
 80060c8:	4630      	mov	r0, r6
 80060ca:	f000 f9ff 	bl	80064cc <__smakebuf_r>
 80060ce:	89a0      	ldrh	r0, [r4, #12]
 80060d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060d4:	f010 0301 	ands.w	r3, r0, #1
 80060d8:	d00a      	beq.n	80060f0 <__swsetup_r+0xbc>
 80060da:	2300      	movs	r3, #0
 80060dc:	60a3      	str	r3, [r4, #8]
 80060de:	6963      	ldr	r3, [r4, #20]
 80060e0:	425b      	negs	r3, r3
 80060e2:	61a3      	str	r3, [r4, #24]
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	b943      	cbnz	r3, 80060fa <__swsetup_r+0xc6>
 80060e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060ec:	d1ba      	bne.n	8006064 <__swsetup_r+0x30>
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	0781      	lsls	r1, r0, #30
 80060f2:	bf58      	it	pl
 80060f4:	6963      	ldrpl	r3, [r4, #20]
 80060f6:	60a3      	str	r3, [r4, #8]
 80060f8:	e7f4      	b.n	80060e4 <__swsetup_r+0xb0>
 80060fa:	2000      	movs	r0, #0
 80060fc:	e7f7      	b.n	80060ee <__swsetup_r+0xba>
 80060fe:	bf00      	nop
 8006100:	20000054 	.word	0x20000054
 8006104:	08007084 	.word	0x08007084
 8006108:	080070a4 	.word	0x080070a4
 800610c:	08007064 	.word	0x08007064

08006110 <__sflush_r>:
 8006110:	898a      	ldrh	r2, [r1, #12]
 8006112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	4605      	mov	r5, r0
 8006118:	0710      	lsls	r0, r2, #28
 800611a:	460c      	mov	r4, r1
 800611c:	d458      	bmi.n	80061d0 <__sflush_r+0xc0>
 800611e:	684b      	ldr	r3, [r1, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	dc05      	bgt.n	8006130 <__sflush_r+0x20>
 8006124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006126:	2b00      	cmp	r3, #0
 8006128:	dc02      	bgt.n	8006130 <__sflush_r+0x20>
 800612a:	2000      	movs	r0, #0
 800612c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006132:	2e00      	cmp	r6, #0
 8006134:	d0f9      	beq.n	800612a <__sflush_r+0x1a>
 8006136:	2300      	movs	r3, #0
 8006138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800613c:	682f      	ldr	r7, [r5, #0]
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	d032      	beq.n	80061a8 <__sflush_r+0x98>
 8006142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	075a      	lsls	r2, r3, #29
 8006148:	d505      	bpl.n	8006156 <__sflush_r+0x46>
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	1ac0      	subs	r0, r0, r3
 800614e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006150:	b10b      	cbz	r3, 8006156 <__sflush_r+0x46>
 8006152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006154:	1ac0      	subs	r0, r0, r3
 8006156:	2300      	movs	r3, #0
 8006158:	4602      	mov	r2, r0
 800615a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800615c:	6a21      	ldr	r1, [r4, #32]
 800615e:	4628      	mov	r0, r5
 8006160:	47b0      	blx	r6
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	d106      	bne.n	8006176 <__sflush_r+0x66>
 8006168:	6829      	ldr	r1, [r5, #0]
 800616a:	291d      	cmp	r1, #29
 800616c:	d82c      	bhi.n	80061c8 <__sflush_r+0xb8>
 800616e:	4a2a      	ldr	r2, [pc, #168]	; (8006218 <__sflush_r+0x108>)
 8006170:	40ca      	lsrs	r2, r1
 8006172:	07d6      	lsls	r6, r2, #31
 8006174:	d528      	bpl.n	80061c8 <__sflush_r+0xb8>
 8006176:	2200      	movs	r2, #0
 8006178:	6062      	str	r2, [r4, #4]
 800617a:	04d9      	lsls	r1, r3, #19
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	d504      	bpl.n	800618c <__sflush_r+0x7c>
 8006182:	1c42      	adds	r2, r0, #1
 8006184:	d101      	bne.n	800618a <__sflush_r+0x7a>
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	b903      	cbnz	r3, 800618c <__sflush_r+0x7c>
 800618a:	6560      	str	r0, [r4, #84]	; 0x54
 800618c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800618e:	602f      	str	r7, [r5, #0]
 8006190:	2900      	cmp	r1, #0
 8006192:	d0ca      	beq.n	800612a <__sflush_r+0x1a>
 8006194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006198:	4299      	cmp	r1, r3
 800619a:	d002      	beq.n	80061a2 <__sflush_r+0x92>
 800619c:	4628      	mov	r0, r5
 800619e:	f000 f9d5 	bl	800654c <_free_r>
 80061a2:	2000      	movs	r0, #0
 80061a4:	6360      	str	r0, [r4, #52]	; 0x34
 80061a6:	e7c1      	b.n	800612c <__sflush_r+0x1c>
 80061a8:	6a21      	ldr	r1, [r4, #32]
 80061aa:	2301      	movs	r3, #1
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b0      	blx	r6
 80061b0:	1c41      	adds	r1, r0, #1
 80061b2:	d1c7      	bne.n	8006144 <__sflush_r+0x34>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0c4      	beq.n	8006144 <__sflush_r+0x34>
 80061ba:	2b1d      	cmp	r3, #29
 80061bc:	d001      	beq.n	80061c2 <__sflush_r+0xb2>
 80061be:	2b16      	cmp	r3, #22
 80061c0:	d101      	bne.n	80061c6 <__sflush_r+0xb6>
 80061c2:	602f      	str	r7, [r5, #0]
 80061c4:	e7b1      	b.n	800612a <__sflush_r+0x1a>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061cc:	81a3      	strh	r3, [r4, #12]
 80061ce:	e7ad      	b.n	800612c <__sflush_r+0x1c>
 80061d0:	690f      	ldr	r7, [r1, #16]
 80061d2:	2f00      	cmp	r7, #0
 80061d4:	d0a9      	beq.n	800612a <__sflush_r+0x1a>
 80061d6:	0793      	lsls	r3, r2, #30
 80061d8:	680e      	ldr	r6, [r1, #0]
 80061da:	bf08      	it	eq
 80061dc:	694b      	ldreq	r3, [r1, #20]
 80061de:	600f      	str	r7, [r1, #0]
 80061e0:	bf18      	it	ne
 80061e2:	2300      	movne	r3, #0
 80061e4:	eba6 0807 	sub.w	r8, r6, r7
 80061e8:	608b      	str	r3, [r1, #8]
 80061ea:	f1b8 0f00 	cmp.w	r8, #0
 80061ee:	dd9c      	ble.n	800612a <__sflush_r+0x1a>
 80061f0:	6a21      	ldr	r1, [r4, #32]
 80061f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061f4:	4643      	mov	r3, r8
 80061f6:	463a      	mov	r2, r7
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b0      	blx	r6
 80061fc:	2800      	cmp	r0, #0
 80061fe:	dc06      	bgt.n	800620e <__sflush_r+0xfe>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e78e      	b.n	800612c <__sflush_r+0x1c>
 800620e:	4407      	add	r7, r0
 8006210:	eba8 0800 	sub.w	r8, r8, r0
 8006214:	e7e9      	b.n	80061ea <__sflush_r+0xda>
 8006216:	bf00      	nop
 8006218:	20400001 	.word	0x20400001

0800621c <_fflush_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	690b      	ldr	r3, [r1, #16]
 8006220:	4605      	mov	r5, r0
 8006222:	460c      	mov	r4, r1
 8006224:	b913      	cbnz	r3, 800622c <_fflush_r+0x10>
 8006226:	2500      	movs	r5, #0
 8006228:	4628      	mov	r0, r5
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	b118      	cbz	r0, 8006236 <_fflush_r+0x1a>
 800622e:	6983      	ldr	r3, [r0, #24]
 8006230:	b90b      	cbnz	r3, 8006236 <_fflush_r+0x1a>
 8006232:	f000 f887 	bl	8006344 <__sinit>
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <_fflush_r+0x6c>)
 8006238:	429c      	cmp	r4, r3
 800623a:	d11b      	bne.n	8006274 <_fflush_r+0x58>
 800623c:	686c      	ldr	r4, [r5, #4]
 800623e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0ef      	beq.n	8006226 <_fflush_r+0xa>
 8006246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006248:	07d0      	lsls	r0, r2, #31
 800624a:	d404      	bmi.n	8006256 <_fflush_r+0x3a>
 800624c:	0599      	lsls	r1, r3, #22
 800624e:	d402      	bmi.n	8006256 <_fflush_r+0x3a>
 8006250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006252:	f000 f915 	bl	8006480 <__retarget_lock_acquire_recursive>
 8006256:	4628      	mov	r0, r5
 8006258:	4621      	mov	r1, r4
 800625a:	f7ff ff59 	bl	8006110 <__sflush_r>
 800625e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006260:	07da      	lsls	r2, r3, #31
 8006262:	4605      	mov	r5, r0
 8006264:	d4e0      	bmi.n	8006228 <_fflush_r+0xc>
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	059b      	lsls	r3, r3, #22
 800626a:	d4dd      	bmi.n	8006228 <_fflush_r+0xc>
 800626c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800626e:	f000 f908 	bl	8006482 <__retarget_lock_release_recursive>
 8006272:	e7d9      	b.n	8006228 <_fflush_r+0xc>
 8006274:	4b05      	ldr	r3, [pc, #20]	; (800628c <_fflush_r+0x70>)
 8006276:	429c      	cmp	r4, r3
 8006278:	d101      	bne.n	800627e <_fflush_r+0x62>
 800627a:	68ac      	ldr	r4, [r5, #8]
 800627c:	e7df      	b.n	800623e <_fflush_r+0x22>
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <_fflush_r+0x74>)
 8006280:	429c      	cmp	r4, r3
 8006282:	bf08      	it	eq
 8006284:	68ec      	ldreq	r4, [r5, #12]
 8006286:	e7da      	b.n	800623e <_fflush_r+0x22>
 8006288:	08007084 	.word	0x08007084
 800628c:	080070a4 	.word	0x080070a4
 8006290:	08007064 	.word	0x08007064

08006294 <std>:
 8006294:	2300      	movs	r3, #0
 8006296:	b510      	push	{r4, lr}
 8006298:	4604      	mov	r4, r0
 800629a:	e9c0 3300 	strd	r3, r3, [r0]
 800629e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062a2:	6083      	str	r3, [r0, #8]
 80062a4:	8181      	strh	r1, [r0, #12]
 80062a6:	6643      	str	r3, [r0, #100]	; 0x64
 80062a8:	81c2      	strh	r2, [r0, #14]
 80062aa:	6183      	str	r3, [r0, #24]
 80062ac:	4619      	mov	r1, r3
 80062ae:	2208      	movs	r2, #8
 80062b0:	305c      	adds	r0, #92	; 0x5c
 80062b2:	f7ff fdd7 	bl	8005e64 <memset>
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <std+0x38>)
 80062b8:	6263      	str	r3, [r4, #36]	; 0x24
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <std+0x3c>)
 80062bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80062be:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <std+0x40>)
 80062c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062c2:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <std+0x44>)
 80062c4:	6224      	str	r4, [r4, #32]
 80062c6:	6323      	str	r3, [r4, #48]	; 0x30
 80062c8:	bd10      	pop	{r4, pc}
 80062ca:	bf00      	nop
 80062cc:	08006c9d 	.word	0x08006c9d
 80062d0:	08006cbf 	.word	0x08006cbf
 80062d4:	08006cf7 	.word	0x08006cf7
 80062d8:	08006d1b 	.word	0x08006d1b

080062dc <_cleanup_r>:
 80062dc:	4901      	ldr	r1, [pc, #4]	; (80062e4 <_cleanup_r+0x8>)
 80062de:	f000 b8af 	b.w	8006440 <_fwalk_reent>
 80062e2:	bf00      	nop
 80062e4:	0800621d 	.word	0x0800621d

080062e8 <__sfmoreglue>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	1e4a      	subs	r2, r1, #1
 80062ec:	2568      	movs	r5, #104	; 0x68
 80062ee:	4355      	muls	r5, r2
 80062f0:	460e      	mov	r6, r1
 80062f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062f6:	f000 f979 	bl	80065ec <_malloc_r>
 80062fa:	4604      	mov	r4, r0
 80062fc:	b140      	cbz	r0, 8006310 <__sfmoreglue+0x28>
 80062fe:	2100      	movs	r1, #0
 8006300:	e9c0 1600 	strd	r1, r6, [r0]
 8006304:	300c      	adds	r0, #12
 8006306:	60a0      	str	r0, [r4, #8]
 8006308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800630c:	f7ff fdaa 	bl	8005e64 <memset>
 8006310:	4620      	mov	r0, r4
 8006312:	bd70      	pop	{r4, r5, r6, pc}

08006314 <__sfp_lock_acquire>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__sfp_lock_acquire+0x8>)
 8006316:	f000 b8b3 	b.w	8006480 <__retarget_lock_acquire_recursive>
 800631a:	bf00      	nop
 800631c:	20000da4 	.word	0x20000da4

08006320 <__sfp_lock_release>:
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <__sfp_lock_release+0x8>)
 8006322:	f000 b8ae 	b.w	8006482 <__retarget_lock_release_recursive>
 8006326:	bf00      	nop
 8006328:	20000da4 	.word	0x20000da4

0800632c <__sinit_lock_acquire>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__sinit_lock_acquire+0x8>)
 800632e:	f000 b8a7 	b.w	8006480 <__retarget_lock_acquire_recursive>
 8006332:	bf00      	nop
 8006334:	20000d9f 	.word	0x20000d9f

08006338 <__sinit_lock_release>:
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <__sinit_lock_release+0x8>)
 800633a:	f000 b8a2 	b.w	8006482 <__retarget_lock_release_recursive>
 800633e:	bf00      	nop
 8006340:	20000d9f 	.word	0x20000d9f

08006344 <__sinit>:
 8006344:	b510      	push	{r4, lr}
 8006346:	4604      	mov	r4, r0
 8006348:	f7ff fff0 	bl	800632c <__sinit_lock_acquire>
 800634c:	69a3      	ldr	r3, [r4, #24]
 800634e:	b11b      	cbz	r3, 8006358 <__sinit+0x14>
 8006350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006354:	f7ff bff0 	b.w	8006338 <__sinit_lock_release>
 8006358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800635c:	6523      	str	r3, [r4, #80]	; 0x50
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <__sinit+0x68>)
 8006360:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <__sinit+0x6c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	62a2      	str	r2, [r4, #40]	; 0x28
 8006366:	42a3      	cmp	r3, r4
 8006368:	bf04      	itt	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	61a3      	streq	r3, [r4, #24]
 800636e:	4620      	mov	r0, r4
 8006370:	f000 f820 	bl	80063b4 <__sfp>
 8006374:	6060      	str	r0, [r4, #4]
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f81c 	bl	80063b4 <__sfp>
 800637c:	60a0      	str	r0, [r4, #8]
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f818 	bl	80063b4 <__sfp>
 8006384:	2200      	movs	r2, #0
 8006386:	60e0      	str	r0, [r4, #12]
 8006388:	2104      	movs	r1, #4
 800638a:	6860      	ldr	r0, [r4, #4]
 800638c:	f7ff ff82 	bl	8006294 <std>
 8006390:	68a0      	ldr	r0, [r4, #8]
 8006392:	2201      	movs	r2, #1
 8006394:	2109      	movs	r1, #9
 8006396:	f7ff ff7d 	bl	8006294 <std>
 800639a:	68e0      	ldr	r0, [r4, #12]
 800639c:	2202      	movs	r2, #2
 800639e:	2112      	movs	r1, #18
 80063a0:	f7ff ff78 	bl	8006294 <std>
 80063a4:	2301      	movs	r3, #1
 80063a6:	61a3      	str	r3, [r4, #24]
 80063a8:	e7d2      	b.n	8006350 <__sinit+0xc>
 80063aa:	bf00      	nop
 80063ac:	08007060 	.word	0x08007060
 80063b0:	080062dd 	.word	0x080062dd

080063b4 <__sfp>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	4607      	mov	r7, r0
 80063b8:	f7ff ffac 	bl	8006314 <__sfp_lock_acquire>
 80063bc:	4b1e      	ldr	r3, [pc, #120]	; (8006438 <__sfp+0x84>)
 80063be:	681e      	ldr	r6, [r3, #0]
 80063c0:	69b3      	ldr	r3, [r6, #24]
 80063c2:	b913      	cbnz	r3, 80063ca <__sfp+0x16>
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7ff ffbd 	bl	8006344 <__sinit>
 80063ca:	3648      	adds	r6, #72	; 0x48
 80063cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	d503      	bpl.n	80063dc <__sfp+0x28>
 80063d4:	6833      	ldr	r3, [r6, #0]
 80063d6:	b30b      	cbz	r3, 800641c <__sfp+0x68>
 80063d8:	6836      	ldr	r6, [r6, #0]
 80063da:	e7f7      	b.n	80063cc <__sfp+0x18>
 80063dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063e0:	b9d5      	cbnz	r5, 8006418 <__sfp+0x64>
 80063e2:	4b16      	ldr	r3, [pc, #88]	; (800643c <__sfp+0x88>)
 80063e4:	60e3      	str	r3, [r4, #12]
 80063e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063ea:	6665      	str	r5, [r4, #100]	; 0x64
 80063ec:	f000 f847 	bl	800647e <__retarget_lock_init_recursive>
 80063f0:	f7ff ff96 	bl	8006320 <__sfp_lock_release>
 80063f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063fc:	6025      	str	r5, [r4, #0]
 80063fe:	61a5      	str	r5, [r4, #24]
 8006400:	2208      	movs	r2, #8
 8006402:	4629      	mov	r1, r5
 8006404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006408:	f7ff fd2c 	bl	8005e64 <memset>
 800640c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006414:	4620      	mov	r0, r4
 8006416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006418:	3468      	adds	r4, #104	; 0x68
 800641a:	e7d9      	b.n	80063d0 <__sfp+0x1c>
 800641c:	2104      	movs	r1, #4
 800641e:	4638      	mov	r0, r7
 8006420:	f7ff ff62 	bl	80062e8 <__sfmoreglue>
 8006424:	4604      	mov	r4, r0
 8006426:	6030      	str	r0, [r6, #0]
 8006428:	2800      	cmp	r0, #0
 800642a:	d1d5      	bne.n	80063d8 <__sfp+0x24>
 800642c:	f7ff ff78 	bl	8006320 <__sfp_lock_release>
 8006430:	230c      	movs	r3, #12
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	e7ee      	b.n	8006414 <__sfp+0x60>
 8006436:	bf00      	nop
 8006438:	08007060 	.word	0x08007060
 800643c:	ffff0001 	.word	0xffff0001

08006440 <_fwalk_reent>:
 8006440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006444:	4606      	mov	r6, r0
 8006446:	4688      	mov	r8, r1
 8006448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800644c:	2700      	movs	r7, #0
 800644e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006452:	f1b9 0901 	subs.w	r9, r9, #1
 8006456:	d505      	bpl.n	8006464 <_fwalk_reent+0x24>
 8006458:	6824      	ldr	r4, [r4, #0]
 800645a:	2c00      	cmp	r4, #0
 800645c:	d1f7      	bne.n	800644e <_fwalk_reent+0xe>
 800645e:	4638      	mov	r0, r7
 8006460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006464:	89ab      	ldrh	r3, [r5, #12]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d907      	bls.n	800647a <_fwalk_reent+0x3a>
 800646a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800646e:	3301      	adds	r3, #1
 8006470:	d003      	beq.n	800647a <_fwalk_reent+0x3a>
 8006472:	4629      	mov	r1, r5
 8006474:	4630      	mov	r0, r6
 8006476:	47c0      	blx	r8
 8006478:	4307      	orrs	r7, r0
 800647a:	3568      	adds	r5, #104	; 0x68
 800647c:	e7e9      	b.n	8006452 <_fwalk_reent+0x12>

0800647e <__retarget_lock_init_recursive>:
 800647e:	4770      	bx	lr

08006480 <__retarget_lock_acquire_recursive>:
 8006480:	4770      	bx	lr

08006482 <__retarget_lock_release_recursive>:
 8006482:	4770      	bx	lr

08006484 <__swhatbuf_r>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	460e      	mov	r6, r1
 8006488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648c:	2900      	cmp	r1, #0
 800648e:	b096      	sub	sp, #88	; 0x58
 8006490:	4614      	mov	r4, r2
 8006492:	461d      	mov	r5, r3
 8006494:	da07      	bge.n	80064a6 <__swhatbuf_r+0x22>
 8006496:	2300      	movs	r3, #0
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	89b3      	ldrh	r3, [r6, #12]
 800649c:	061a      	lsls	r2, r3, #24
 800649e:	d410      	bmi.n	80064c2 <__swhatbuf_r+0x3e>
 80064a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064a4:	e00e      	b.n	80064c4 <__swhatbuf_r+0x40>
 80064a6:	466a      	mov	r2, sp
 80064a8:	f000 fc5e 	bl	8006d68 <_fstat_r>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	dbf2      	blt.n	8006496 <__swhatbuf_r+0x12>
 80064b0:	9a01      	ldr	r2, [sp, #4]
 80064b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064ba:	425a      	negs	r2, r3
 80064bc:	415a      	adcs	r2, r3
 80064be:	602a      	str	r2, [r5, #0]
 80064c0:	e7ee      	b.n	80064a0 <__swhatbuf_r+0x1c>
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	2000      	movs	r0, #0
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	b016      	add	sp, #88	; 0x58
 80064ca:	bd70      	pop	{r4, r5, r6, pc}

080064cc <__smakebuf_r>:
 80064cc:	898b      	ldrh	r3, [r1, #12]
 80064ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064d0:	079d      	lsls	r5, r3, #30
 80064d2:	4606      	mov	r6, r0
 80064d4:	460c      	mov	r4, r1
 80064d6:	d507      	bpl.n	80064e8 <__smakebuf_r+0x1c>
 80064d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	2301      	movs	r3, #1
 80064e2:	6163      	str	r3, [r4, #20]
 80064e4:	b002      	add	sp, #8
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	ab01      	add	r3, sp, #4
 80064ea:	466a      	mov	r2, sp
 80064ec:	f7ff ffca 	bl	8006484 <__swhatbuf_r>
 80064f0:	9900      	ldr	r1, [sp, #0]
 80064f2:	4605      	mov	r5, r0
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f879 	bl	80065ec <_malloc_r>
 80064fa:	b948      	cbnz	r0, 8006510 <__smakebuf_r+0x44>
 80064fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006500:	059a      	lsls	r2, r3, #22
 8006502:	d4ef      	bmi.n	80064e4 <__smakebuf_r+0x18>
 8006504:	f023 0303 	bic.w	r3, r3, #3
 8006508:	f043 0302 	orr.w	r3, r3, #2
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	e7e3      	b.n	80064d8 <__smakebuf_r+0xc>
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <__smakebuf_r+0x7c>)
 8006512:	62b3      	str	r3, [r6, #40]	; 0x28
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	6020      	str	r0, [r4, #0]
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	9b00      	ldr	r3, [sp, #0]
 8006520:	6163      	str	r3, [r4, #20]
 8006522:	9b01      	ldr	r3, [sp, #4]
 8006524:	6120      	str	r0, [r4, #16]
 8006526:	b15b      	cbz	r3, 8006540 <__smakebuf_r+0x74>
 8006528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800652c:	4630      	mov	r0, r6
 800652e:	f000 fc2d 	bl	8006d8c <_isatty_r>
 8006532:	b128      	cbz	r0, 8006540 <__smakebuf_r+0x74>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	89a0      	ldrh	r0, [r4, #12]
 8006542:	4305      	orrs	r5, r0
 8006544:	81a5      	strh	r5, [r4, #12]
 8006546:	e7cd      	b.n	80064e4 <__smakebuf_r+0x18>
 8006548:	080062dd 	.word	0x080062dd

0800654c <_free_r>:
 800654c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800654e:	2900      	cmp	r1, #0
 8006550:	d048      	beq.n	80065e4 <_free_r+0x98>
 8006552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006556:	9001      	str	r0, [sp, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f1a1 0404 	sub.w	r4, r1, #4
 800655e:	bfb8      	it	lt
 8006560:	18e4      	addlt	r4, r4, r3
 8006562:	f000 fc35 	bl	8006dd0 <__malloc_lock>
 8006566:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <_free_r+0x9c>)
 8006568:	9801      	ldr	r0, [sp, #4]
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	4615      	mov	r5, r2
 800656e:	b933      	cbnz	r3, 800657e <_free_r+0x32>
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	6014      	str	r4, [r2, #0]
 8006574:	b003      	add	sp, #12
 8006576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800657a:	f000 bc2f 	b.w	8006ddc <__malloc_unlock>
 800657e:	42a3      	cmp	r3, r4
 8006580:	d90b      	bls.n	800659a <_free_r+0x4e>
 8006582:	6821      	ldr	r1, [r4, #0]
 8006584:	1862      	adds	r2, r4, r1
 8006586:	4293      	cmp	r3, r2
 8006588:	bf04      	itt	eq
 800658a:	681a      	ldreq	r2, [r3, #0]
 800658c:	685b      	ldreq	r3, [r3, #4]
 800658e:	6063      	str	r3, [r4, #4]
 8006590:	bf04      	itt	eq
 8006592:	1852      	addeq	r2, r2, r1
 8006594:	6022      	streq	r2, [r4, #0]
 8006596:	602c      	str	r4, [r5, #0]
 8006598:	e7ec      	b.n	8006574 <_free_r+0x28>
 800659a:	461a      	mov	r2, r3
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	b10b      	cbz	r3, 80065a4 <_free_r+0x58>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d9fa      	bls.n	800659a <_free_r+0x4e>
 80065a4:	6811      	ldr	r1, [r2, #0]
 80065a6:	1855      	adds	r5, r2, r1
 80065a8:	42a5      	cmp	r5, r4
 80065aa:	d10b      	bne.n	80065c4 <_free_r+0x78>
 80065ac:	6824      	ldr	r4, [r4, #0]
 80065ae:	4421      	add	r1, r4
 80065b0:	1854      	adds	r4, r2, r1
 80065b2:	42a3      	cmp	r3, r4
 80065b4:	6011      	str	r1, [r2, #0]
 80065b6:	d1dd      	bne.n	8006574 <_free_r+0x28>
 80065b8:	681c      	ldr	r4, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	6053      	str	r3, [r2, #4]
 80065be:	4421      	add	r1, r4
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	e7d7      	b.n	8006574 <_free_r+0x28>
 80065c4:	d902      	bls.n	80065cc <_free_r+0x80>
 80065c6:	230c      	movs	r3, #12
 80065c8:	6003      	str	r3, [r0, #0]
 80065ca:	e7d3      	b.n	8006574 <_free_r+0x28>
 80065cc:	6825      	ldr	r5, [r4, #0]
 80065ce:	1961      	adds	r1, r4, r5
 80065d0:	428b      	cmp	r3, r1
 80065d2:	bf04      	itt	eq
 80065d4:	6819      	ldreq	r1, [r3, #0]
 80065d6:	685b      	ldreq	r3, [r3, #4]
 80065d8:	6063      	str	r3, [r4, #4]
 80065da:	bf04      	itt	eq
 80065dc:	1949      	addeq	r1, r1, r5
 80065de:	6021      	streq	r1, [r4, #0]
 80065e0:	6054      	str	r4, [r2, #4]
 80065e2:	e7c7      	b.n	8006574 <_free_r+0x28>
 80065e4:	b003      	add	sp, #12
 80065e6:	bd30      	pop	{r4, r5, pc}
 80065e8:	200000fc 	.word	0x200000fc

080065ec <_malloc_r>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	1ccd      	adds	r5, r1, #3
 80065f0:	f025 0503 	bic.w	r5, r5, #3
 80065f4:	3508      	adds	r5, #8
 80065f6:	2d0c      	cmp	r5, #12
 80065f8:	bf38      	it	cc
 80065fa:	250c      	movcc	r5, #12
 80065fc:	2d00      	cmp	r5, #0
 80065fe:	4606      	mov	r6, r0
 8006600:	db01      	blt.n	8006606 <_malloc_r+0x1a>
 8006602:	42a9      	cmp	r1, r5
 8006604:	d903      	bls.n	800660e <_malloc_r+0x22>
 8006606:	230c      	movs	r3, #12
 8006608:	6033      	str	r3, [r6, #0]
 800660a:	2000      	movs	r0, #0
 800660c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660e:	f000 fbdf 	bl	8006dd0 <__malloc_lock>
 8006612:	4921      	ldr	r1, [pc, #132]	; (8006698 <_malloc_r+0xac>)
 8006614:	680a      	ldr	r2, [r1, #0]
 8006616:	4614      	mov	r4, r2
 8006618:	b99c      	cbnz	r4, 8006642 <_malloc_r+0x56>
 800661a:	4f20      	ldr	r7, [pc, #128]	; (800669c <_malloc_r+0xb0>)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	b923      	cbnz	r3, 800662a <_malloc_r+0x3e>
 8006620:	4621      	mov	r1, r4
 8006622:	4630      	mov	r0, r6
 8006624:	f000 fb2a 	bl	8006c7c <_sbrk_r>
 8006628:	6038      	str	r0, [r7, #0]
 800662a:	4629      	mov	r1, r5
 800662c:	4630      	mov	r0, r6
 800662e:	f000 fb25 	bl	8006c7c <_sbrk_r>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d123      	bne.n	800667e <_malloc_r+0x92>
 8006636:	230c      	movs	r3, #12
 8006638:	6033      	str	r3, [r6, #0]
 800663a:	4630      	mov	r0, r6
 800663c:	f000 fbce 	bl	8006ddc <__malloc_unlock>
 8006640:	e7e3      	b.n	800660a <_malloc_r+0x1e>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	1b5b      	subs	r3, r3, r5
 8006646:	d417      	bmi.n	8006678 <_malloc_r+0x8c>
 8006648:	2b0b      	cmp	r3, #11
 800664a:	d903      	bls.n	8006654 <_malloc_r+0x68>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	441c      	add	r4, r3
 8006650:	6025      	str	r5, [r4, #0]
 8006652:	e004      	b.n	800665e <_malloc_r+0x72>
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	42a2      	cmp	r2, r4
 8006658:	bf0c      	ite	eq
 800665a:	600b      	streq	r3, [r1, #0]
 800665c:	6053      	strne	r3, [r2, #4]
 800665e:	4630      	mov	r0, r6
 8006660:	f000 fbbc 	bl	8006ddc <__malloc_unlock>
 8006664:	f104 000b 	add.w	r0, r4, #11
 8006668:	1d23      	adds	r3, r4, #4
 800666a:	f020 0007 	bic.w	r0, r0, #7
 800666e:	1ac2      	subs	r2, r0, r3
 8006670:	d0cc      	beq.n	800660c <_malloc_r+0x20>
 8006672:	1a1b      	subs	r3, r3, r0
 8006674:	50a3      	str	r3, [r4, r2]
 8006676:	e7c9      	b.n	800660c <_malloc_r+0x20>
 8006678:	4622      	mov	r2, r4
 800667a:	6864      	ldr	r4, [r4, #4]
 800667c:	e7cc      	b.n	8006618 <_malloc_r+0x2c>
 800667e:	1cc4      	adds	r4, r0, #3
 8006680:	f024 0403 	bic.w	r4, r4, #3
 8006684:	42a0      	cmp	r0, r4
 8006686:	d0e3      	beq.n	8006650 <_malloc_r+0x64>
 8006688:	1a21      	subs	r1, r4, r0
 800668a:	4630      	mov	r0, r6
 800668c:	f000 faf6 	bl	8006c7c <_sbrk_r>
 8006690:	3001      	adds	r0, #1
 8006692:	d1dd      	bne.n	8006650 <_malloc_r+0x64>
 8006694:	e7cf      	b.n	8006636 <_malloc_r+0x4a>
 8006696:	bf00      	nop
 8006698:	200000fc 	.word	0x200000fc
 800669c:	20000100 	.word	0x20000100

080066a0 <__sfputc_r>:
 80066a0:	6893      	ldr	r3, [r2, #8]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	b410      	push	{r4}
 80066a8:	6093      	str	r3, [r2, #8]
 80066aa:	da08      	bge.n	80066be <__sfputc_r+0x1e>
 80066ac:	6994      	ldr	r4, [r2, #24]
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	db01      	blt.n	80066b6 <__sfputc_r+0x16>
 80066b2:	290a      	cmp	r1, #10
 80066b4:	d103      	bne.n	80066be <__sfputc_r+0x1e>
 80066b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ba:	f7ff bc69 	b.w	8005f90 <__swbuf_r>
 80066be:	6813      	ldr	r3, [r2, #0]
 80066c0:	1c58      	adds	r0, r3, #1
 80066c2:	6010      	str	r0, [r2, #0]
 80066c4:	7019      	strb	r1, [r3, #0]
 80066c6:	4608      	mov	r0, r1
 80066c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <__sfputs_r>:
 80066ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d0:	4606      	mov	r6, r0
 80066d2:	460f      	mov	r7, r1
 80066d4:	4614      	mov	r4, r2
 80066d6:	18d5      	adds	r5, r2, r3
 80066d8:	42ac      	cmp	r4, r5
 80066da:	d101      	bne.n	80066e0 <__sfputs_r+0x12>
 80066dc:	2000      	movs	r0, #0
 80066de:	e007      	b.n	80066f0 <__sfputs_r+0x22>
 80066e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e4:	463a      	mov	r2, r7
 80066e6:	4630      	mov	r0, r6
 80066e8:	f7ff ffda 	bl	80066a0 <__sfputc_r>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d1f3      	bne.n	80066d8 <__sfputs_r+0xa>
 80066f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066f4 <_vfiprintf_r>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	460d      	mov	r5, r1
 80066fa:	b09d      	sub	sp, #116	; 0x74
 80066fc:	4614      	mov	r4, r2
 80066fe:	4698      	mov	r8, r3
 8006700:	4606      	mov	r6, r0
 8006702:	b118      	cbz	r0, 800670c <_vfiprintf_r+0x18>
 8006704:	6983      	ldr	r3, [r0, #24]
 8006706:	b90b      	cbnz	r3, 800670c <_vfiprintf_r+0x18>
 8006708:	f7ff fe1c 	bl	8006344 <__sinit>
 800670c:	4b89      	ldr	r3, [pc, #548]	; (8006934 <_vfiprintf_r+0x240>)
 800670e:	429d      	cmp	r5, r3
 8006710:	d11b      	bne.n	800674a <_vfiprintf_r+0x56>
 8006712:	6875      	ldr	r5, [r6, #4]
 8006714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006716:	07d9      	lsls	r1, r3, #31
 8006718:	d405      	bmi.n	8006726 <_vfiprintf_r+0x32>
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	059a      	lsls	r2, r3, #22
 800671e:	d402      	bmi.n	8006726 <_vfiprintf_r+0x32>
 8006720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006722:	f7ff fead 	bl	8006480 <__retarget_lock_acquire_recursive>
 8006726:	89ab      	ldrh	r3, [r5, #12]
 8006728:	071b      	lsls	r3, r3, #28
 800672a:	d501      	bpl.n	8006730 <_vfiprintf_r+0x3c>
 800672c:	692b      	ldr	r3, [r5, #16]
 800672e:	b9eb      	cbnz	r3, 800676c <_vfiprintf_r+0x78>
 8006730:	4629      	mov	r1, r5
 8006732:	4630      	mov	r0, r6
 8006734:	f7ff fc7e 	bl	8006034 <__swsetup_r>
 8006738:	b1c0      	cbz	r0, 800676c <_vfiprintf_r+0x78>
 800673a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800673c:	07dc      	lsls	r4, r3, #31
 800673e:	d50e      	bpl.n	800675e <_vfiprintf_r+0x6a>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	b01d      	add	sp, #116	; 0x74
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	4b7b      	ldr	r3, [pc, #492]	; (8006938 <_vfiprintf_r+0x244>)
 800674c:	429d      	cmp	r5, r3
 800674e:	d101      	bne.n	8006754 <_vfiprintf_r+0x60>
 8006750:	68b5      	ldr	r5, [r6, #8]
 8006752:	e7df      	b.n	8006714 <_vfiprintf_r+0x20>
 8006754:	4b79      	ldr	r3, [pc, #484]	; (800693c <_vfiprintf_r+0x248>)
 8006756:	429d      	cmp	r5, r3
 8006758:	bf08      	it	eq
 800675a:	68f5      	ldreq	r5, [r6, #12]
 800675c:	e7da      	b.n	8006714 <_vfiprintf_r+0x20>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	0598      	lsls	r0, r3, #22
 8006762:	d4ed      	bmi.n	8006740 <_vfiprintf_r+0x4c>
 8006764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006766:	f7ff fe8c 	bl	8006482 <__retarget_lock_release_recursive>
 800676a:	e7e9      	b.n	8006740 <_vfiprintf_r+0x4c>
 800676c:	2300      	movs	r3, #0
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	2320      	movs	r3, #32
 8006772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006776:	f8cd 800c 	str.w	r8, [sp, #12]
 800677a:	2330      	movs	r3, #48	; 0x30
 800677c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006940 <_vfiprintf_r+0x24c>
 8006780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006784:	f04f 0901 	mov.w	r9, #1
 8006788:	4623      	mov	r3, r4
 800678a:	469a      	mov	sl, r3
 800678c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006790:	b10a      	cbz	r2, 8006796 <_vfiprintf_r+0xa2>
 8006792:	2a25      	cmp	r2, #37	; 0x25
 8006794:	d1f9      	bne.n	800678a <_vfiprintf_r+0x96>
 8006796:	ebba 0b04 	subs.w	fp, sl, r4
 800679a:	d00b      	beq.n	80067b4 <_vfiprintf_r+0xc0>
 800679c:	465b      	mov	r3, fp
 800679e:	4622      	mov	r2, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	4630      	mov	r0, r6
 80067a4:	f7ff ff93 	bl	80066ce <__sfputs_r>
 80067a8:	3001      	adds	r0, #1
 80067aa:	f000 80aa 	beq.w	8006902 <_vfiprintf_r+0x20e>
 80067ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b0:	445a      	add	r2, fp
 80067b2:	9209      	str	r2, [sp, #36]	; 0x24
 80067b4:	f89a 3000 	ldrb.w	r3, [sl]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80a2 	beq.w	8006902 <_vfiprintf_r+0x20e>
 80067be:	2300      	movs	r3, #0
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295
 80067c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067c8:	f10a 0a01 	add.w	sl, sl, #1
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	9307      	str	r3, [sp, #28]
 80067d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067d4:	931a      	str	r3, [sp, #104]	; 0x68
 80067d6:	4654      	mov	r4, sl
 80067d8:	2205      	movs	r2, #5
 80067da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067de:	4858      	ldr	r0, [pc, #352]	; (8006940 <_vfiprintf_r+0x24c>)
 80067e0:	f7f9 fd06 	bl	80001f0 <memchr>
 80067e4:	9a04      	ldr	r2, [sp, #16]
 80067e6:	b9d8      	cbnz	r0, 8006820 <_vfiprintf_r+0x12c>
 80067e8:	06d1      	lsls	r1, r2, #27
 80067ea:	bf44      	itt	mi
 80067ec:	2320      	movmi	r3, #32
 80067ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f2:	0713      	lsls	r3, r2, #28
 80067f4:	bf44      	itt	mi
 80067f6:	232b      	movmi	r3, #43	; 0x2b
 80067f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006800:	2b2a      	cmp	r3, #42	; 0x2a
 8006802:	d015      	beq.n	8006830 <_vfiprintf_r+0x13c>
 8006804:	9a07      	ldr	r2, [sp, #28]
 8006806:	4654      	mov	r4, sl
 8006808:	2000      	movs	r0, #0
 800680a:	f04f 0c0a 	mov.w	ip, #10
 800680e:	4621      	mov	r1, r4
 8006810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006814:	3b30      	subs	r3, #48	; 0x30
 8006816:	2b09      	cmp	r3, #9
 8006818:	d94e      	bls.n	80068b8 <_vfiprintf_r+0x1c4>
 800681a:	b1b0      	cbz	r0, 800684a <_vfiprintf_r+0x156>
 800681c:	9207      	str	r2, [sp, #28]
 800681e:	e014      	b.n	800684a <_vfiprintf_r+0x156>
 8006820:	eba0 0308 	sub.w	r3, r0, r8
 8006824:	fa09 f303 	lsl.w	r3, r9, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	46a2      	mov	sl, r4
 800682e:	e7d2      	b.n	80067d6 <_vfiprintf_r+0xe2>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	1d19      	adds	r1, r3, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	9103      	str	r1, [sp, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	bfbb      	ittet	lt
 800683c:	425b      	neglt	r3, r3
 800683e:	f042 0202 	orrlt.w	r2, r2, #2
 8006842:	9307      	strge	r3, [sp, #28]
 8006844:	9307      	strlt	r3, [sp, #28]
 8006846:	bfb8      	it	lt
 8006848:	9204      	strlt	r2, [sp, #16]
 800684a:	7823      	ldrb	r3, [r4, #0]
 800684c:	2b2e      	cmp	r3, #46	; 0x2e
 800684e:	d10c      	bne.n	800686a <_vfiprintf_r+0x176>
 8006850:	7863      	ldrb	r3, [r4, #1]
 8006852:	2b2a      	cmp	r3, #42	; 0x2a
 8006854:	d135      	bne.n	80068c2 <_vfiprintf_r+0x1ce>
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	1d1a      	adds	r2, r3, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	9203      	str	r2, [sp, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfb8      	it	lt
 8006862:	f04f 33ff 	movlt.w	r3, #4294967295
 8006866:	3402      	adds	r4, #2
 8006868:	9305      	str	r3, [sp, #20]
 800686a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006950 <_vfiprintf_r+0x25c>
 800686e:	7821      	ldrb	r1, [r4, #0]
 8006870:	2203      	movs	r2, #3
 8006872:	4650      	mov	r0, sl
 8006874:	f7f9 fcbc 	bl	80001f0 <memchr>
 8006878:	b140      	cbz	r0, 800688c <_vfiprintf_r+0x198>
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	eba0 000a 	sub.w	r0, r0, sl
 8006880:	fa03 f000 	lsl.w	r0, r3, r0
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	4303      	orrs	r3, r0
 8006888:	3401      	adds	r4, #1
 800688a:	9304      	str	r3, [sp, #16]
 800688c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006890:	482c      	ldr	r0, [pc, #176]	; (8006944 <_vfiprintf_r+0x250>)
 8006892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006896:	2206      	movs	r2, #6
 8006898:	f7f9 fcaa 	bl	80001f0 <memchr>
 800689c:	2800      	cmp	r0, #0
 800689e:	d03f      	beq.n	8006920 <_vfiprintf_r+0x22c>
 80068a0:	4b29      	ldr	r3, [pc, #164]	; (8006948 <_vfiprintf_r+0x254>)
 80068a2:	bb1b      	cbnz	r3, 80068ec <_vfiprintf_r+0x1f8>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	3307      	adds	r3, #7
 80068a8:	f023 0307 	bic.w	r3, r3, #7
 80068ac:	3308      	adds	r3, #8
 80068ae:	9303      	str	r3, [sp, #12]
 80068b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b2:	443b      	add	r3, r7
 80068b4:	9309      	str	r3, [sp, #36]	; 0x24
 80068b6:	e767      	b.n	8006788 <_vfiprintf_r+0x94>
 80068b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80068bc:	460c      	mov	r4, r1
 80068be:	2001      	movs	r0, #1
 80068c0:	e7a5      	b.n	800680e <_vfiprintf_r+0x11a>
 80068c2:	2300      	movs	r3, #0
 80068c4:	3401      	adds	r4, #1
 80068c6:	9305      	str	r3, [sp, #20]
 80068c8:	4619      	mov	r1, r3
 80068ca:	f04f 0c0a 	mov.w	ip, #10
 80068ce:	4620      	mov	r0, r4
 80068d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d4:	3a30      	subs	r2, #48	; 0x30
 80068d6:	2a09      	cmp	r2, #9
 80068d8:	d903      	bls.n	80068e2 <_vfiprintf_r+0x1ee>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0c5      	beq.n	800686a <_vfiprintf_r+0x176>
 80068de:	9105      	str	r1, [sp, #20]
 80068e0:	e7c3      	b.n	800686a <_vfiprintf_r+0x176>
 80068e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80068e6:	4604      	mov	r4, r0
 80068e8:	2301      	movs	r3, #1
 80068ea:	e7f0      	b.n	80068ce <_vfiprintf_r+0x1da>
 80068ec:	ab03      	add	r3, sp, #12
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	462a      	mov	r2, r5
 80068f2:	4b16      	ldr	r3, [pc, #88]	; (800694c <_vfiprintf_r+0x258>)
 80068f4:	a904      	add	r1, sp, #16
 80068f6:	4630      	mov	r0, r6
 80068f8:	f3af 8000 	nop.w
 80068fc:	4607      	mov	r7, r0
 80068fe:	1c78      	adds	r0, r7, #1
 8006900:	d1d6      	bne.n	80068b0 <_vfiprintf_r+0x1bc>
 8006902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006904:	07d9      	lsls	r1, r3, #31
 8006906:	d405      	bmi.n	8006914 <_vfiprintf_r+0x220>
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	059a      	lsls	r2, r3, #22
 800690c:	d402      	bmi.n	8006914 <_vfiprintf_r+0x220>
 800690e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006910:	f7ff fdb7 	bl	8006482 <__retarget_lock_release_recursive>
 8006914:	89ab      	ldrh	r3, [r5, #12]
 8006916:	065b      	lsls	r3, r3, #25
 8006918:	f53f af12 	bmi.w	8006740 <_vfiprintf_r+0x4c>
 800691c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800691e:	e711      	b.n	8006744 <_vfiprintf_r+0x50>
 8006920:	ab03      	add	r3, sp, #12
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	462a      	mov	r2, r5
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <_vfiprintf_r+0x258>)
 8006928:	a904      	add	r1, sp, #16
 800692a:	4630      	mov	r0, r6
 800692c:	f000 f880 	bl	8006a30 <_printf_i>
 8006930:	e7e4      	b.n	80068fc <_vfiprintf_r+0x208>
 8006932:	bf00      	nop
 8006934:	08007084 	.word	0x08007084
 8006938:	080070a4 	.word	0x080070a4
 800693c:	08007064 	.word	0x08007064
 8006940:	080070c4 	.word	0x080070c4
 8006944:	080070ce 	.word	0x080070ce
 8006948:	00000000 	.word	0x00000000
 800694c:	080066cf 	.word	0x080066cf
 8006950:	080070ca 	.word	0x080070ca

08006954 <_printf_common>:
 8006954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	4616      	mov	r6, r2
 800695a:	4699      	mov	r9, r3
 800695c:	688a      	ldr	r2, [r1, #8]
 800695e:	690b      	ldr	r3, [r1, #16]
 8006960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006964:	4293      	cmp	r3, r2
 8006966:	bfb8      	it	lt
 8006968:	4613      	movlt	r3, r2
 800696a:	6033      	str	r3, [r6, #0]
 800696c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006970:	4607      	mov	r7, r0
 8006972:	460c      	mov	r4, r1
 8006974:	b10a      	cbz	r2, 800697a <_printf_common+0x26>
 8006976:	3301      	adds	r3, #1
 8006978:	6033      	str	r3, [r6, #0]
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	0699      	lsls	r1, r3, #26
 800697e:	bf42      	ittt	mi
 8006980:	6833      	ldrmi	r3, [r6, #0]
 8006982:	3302      	addmi	r3, #2
 8006984:	6033      	strmi	r3, [r6, #0]
 8006986:	6825      	ldr	r5, [r4, #0]
 8006988:	f015 0506 	ands.w	r5, r5, #6
 800698c:	d106      	bne.n	800699c <_printf_common+0x48>
 800698e:	f104 0a19 	add.w	sl, r4, #25
 8006992:	68e3      	ldr	r3, [r4, #12]
 8006994:	6832      	ldr	r2, [r6, #0]
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	42ab      	cmp	r3, r5
 800699a:	dc26      	bgt.n	80069ea <_printf_common+0x96>
 800699c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069a0:	1e13      	subs	r3, r2, #0
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	bf18      	it	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	0692      	lsls	r2, r2, #26
 80069aa:	d42b      	bmi.n	8006a04 <_printf_common+0xb0>
 80069ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069b0:	4649      	mov	r1, r9
 80069b2:	4638      	mov	r0, r7
 80069b4:	47c0      	blx	r8
 80069b6:	3001      	adds	r0, #1
 80069b8:	d01e      	beq.n	80069f8 <_printf_common+0xa4>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	68e5      	ldr	r5, [r4, #12]
 80069be:	6832      	ldr	r2, [r6, #0]
 80069c0:	f003 0306 	and.w	r3, r3, #6
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	bf08      	it	eq
 80069c8:	1aad      	subeq	r5, r5, r2
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	6922      	ldr	r2, [r4, #16]
 80069ce:	bf0c      	ite	eq
 80069d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069d4:	2500      	movne	r5, #0
 80069d6:	4293      	cmp	r3, r2
 80069d8:	bfc4      	itt	gt
 80069da:	1a9b      	subgt	r3, r3, r2
 80069dc:	18ed      	addgt	r5, r5, r3
 80069de:	2600      	movs	r6, #0
 80069e0:	341a      	adds	r4, #26
 80069e2:	42b5      	cmp	r5, r6
 80069e4:	d11a      	bne.n	8006a1c <_printf_common+0xc8>
 80069e6:	2000      	movs	r0, #0
 80069e8:	e008      	b.n	80069fc <_printf_common+0xa8>
 80069ea:	2301      	movs	r3, #1
 80069ec:	4652      	mov	r2, sl
 80069ee:	4649      	mov	r1, r9
 80069f0:	4638      	mov	r0, r7
 80069f2:	47c0      	blx	r8
 80069f4:	3001      	adds	r0, #1
 80069f6:	d103      	bne.n	8006a00 <_printf_common+0xac>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a00:	3501      	adds	r5, #1
 8006a02:	e7c6      	b.n	8006992 <_printf_common+0x3e>
 8006a04:	18e1      	adds	r1, r4, r3
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	2030      	movs	r0, #48	; 0x30
 8006a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a0e:	4422      	add	r2, r4
 8006a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a18:	3302      	adds	r3, #2
 8006a1a:	e7c7      	b.n	80069ac <_printf_common+0x58>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4649      	mov	r1, r9
 8006a22:	4638      	mov	r0, r7
 8006a24:	47c0      	blx	r8
 8006a26:	3001      	adds	r0, #1
 8006a28:	d0e6      	beq.n	80069f8 <_printf_common+0xa4>
 8006a2a:	3601      	adds	r6, #1
 8006a2c:	e7d9      	b.n	80069e2 <_printf_common+0x8e>
	...

08006a30 <_printf_i>:
 8006a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	460c      	mov	r4, r1
 8006a36:	4691      	mov	r9, r2
 8006a38:	7e27      	ldrb	r7, [r4, #24]
 8006a3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a3c:	2f78      	cmp	r7, #120	; 0x78
 8006a3e:	4680      	mov	r8, r0
 8006a40:	469a      	mov	sl, r3
 8006a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a46:	d807      	bhi.n	8006a58 <_printf_i+0x28>
 8006a48:	2f62      	cmp	r7, #98	; 0x62
 8006a4a:	d80a      	bhi.n	8006a62 <_printf_i+0x32>
 8006a4c:	2f00      	cmp	r7, #0
 8006a4e:	f000 80d8 	beq.w	8006c02 <_printf_i+0x1d2>
 8006a52:	2f58      	cmp	r7, #88	; 0x58
 8006a54:	f000 80a3 	beq.w	8006b9e <_printf_i+0x16e>
 8006a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a60:	e03a      	b.n	8006ad8 <_printf_i+0xa8>
 8006a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a66:	2b15      	cmp	r3, #21
 8006a68:	d8f6      	bhi.n	8006a58 <_printf_i+0x28>
 8006a6a:	a001      	add	r0, pc, #4	; (adr r0, 8006a70 <_printf_i+0x40>)
 8006a6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a70:	08006ac9 	.word	0x08006ac9
 8006a74:	08006add 	.word	0x08006add
 8006a78:	08006a59 	.word	0x08006a59
 8006a7c:	08006a59 	.word	0x08006a59
 8006a80:	08006a59 	.word	0x08006a59
 8006a84:	08006a59 	.word	0x08006a59
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006a59 	.word	0x08006a59
 8006a90:	08006a59 	.word	0x08006a59
 8006a94:	08006a59 	.word	0x08006a59
 8006a98:	08006a59 	.word	0x08006a59
 8006a9c:	08006be9 	.word	0x08006be9
 8006aa0:	08006b0d 	.word	0x08006b0d
 8006aa4:	08006bcb 	.word	0x08006bcb
 8006aa8:	08006a59 	.word	0x08006a59
 8006aac:	08006a59 	.word	0x08006a59
 8006ab0:	08006c0b 	.word	0x08006c0b
 8006ab4:	08006a59 	.word	0x08006a59
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006a59 	.word	0x08006a59
 8006ac0:	08006a59 	.word	0x08006a59
 8006ac4:	08006bd3 	.word	0x08006bd3
 8006ac8:	680b      	ldr	r3, [r1, #0]
 8006aca:	1d1a      	adds	r2, r3, #4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	600a      	str	r2, [r1, #0]
 8006ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0a3      	b.n	8006c24 <_printf_i+0x1f4>
 8006adc:	6825      	ldr	r5, [r4, #0]
 8006ade:	6808      	ldr	r0, [r1, #0]
 8006ae0:	062e      	lsls	r6, r5, #24
 8006ae2:	f100 0304 	add.w	r3, r0, #4
 8006ae6:	d50a      	bpl.n	8006afe <_printf_i+0xce>
 8006ae8:	6805      	ldr	r5, [r0, #0]
 8006aea:	600b      	str	r3, [r1, #0]
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	da03      	bge.n	8006af8 <_printf_i+0xc8>
 8006af0:	232d      	movs	r3, #45	; 0x2d
 8006af2:	426d      	negs	r5, r5
 8006af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af8:	485e      	ldr	r0, [pc, #376]	; (8006c74 <_printf_i+0x244>)
 8006afa:	230a      	movs	r3, #10
 8006afc:	e019      	b.n	8006b32 <_printf_i+0x102>
 8006afe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b02:	6805      	ldr	r5, [r0, #0]
 8006b04:	600b      	str	r3, [r1, #0]
 8006b06:	bf18      	it	ne
 8006b08:	b22d      	sxthne	r5, r5
 8006b0a:	e7ef      	b.n	8006aec <_printf_i+0xbc>
 8006b0c:	680b      	ldr	r3, [r1, #0]
 8006b0e:	6825      	ldr	r5, [r4, #0]
 8006b10:	1d18      	adds	r0, r3, #4
 8006b12:	6008      	str	r0, [r1, #0]
 8006b14:	0628      	lsls	r0, r5, #24
 8006b16:	d501      	bpl.n	8006b1c <_printf_i+0xec>
 8006b18:	681d      	ldr	r5, [r3, #0]
 8006b1a:	e002      	b.n	8006b22 <_printf_i+0xf2>
 8006b1c:	0669      	lsls	r1, r5, #25
 8006b1e:	d5fb      	bpl.n	8006b18 <_printf_i+0xe8>
 8006b20:	881d      	ldrh	r5, [r3, #0]
 8006b22:	4854      	ldr	r0, [pc, #336]	; (8006c74 <_printf_i+0x244>)
 8006b24:	2f6f      	cmp	r7, #111	; 0x6f
 8006b26:	bf0c      	ite	eq
 8006b28:	2308      	moveq	r3, #8
 8006b2a:	230a      	movne	r3, #10
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b32:	6866      	ldr	r6, [r4, #4]
 8006b34:	60a6      	str	r6, [r4, #8]
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	bfa2      	ittt	ge
 8006b3a:	6821      	ldrge	r1, [r4, #0]
 8006b3c:	f021 0104 	bicge.w	r1, r1, #4
 8006b40:	6021      	strge	r1, [r4, #0]
 8006b42:	b90d      	cbnz	r5, 8006b48 <_printf_i+0x118>
 8006b44:	2e00      	cmp	r6, #0
 8006b46:	d04d      	beq.n	8006be4 <_printf_i+0x1b4>
 8006b48:	4616      	mov	r6, r2
 8006b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b52:	5dc7      	ldrb	r7, [r0, r7]
 8006b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b58:	462f      	mov	r7, r5
 8006b5a:	42bb      	cmp	r3, r7
 8006b5c:	460d      	mov	r5, r1
 8006b5e:	d9f4      	bls.n	8006b4a <_printf_i+0x11a>
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d10b      	bne.n	8006b7c <_printf_i+0x14c>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	07df      	lsls	r7, r3, #31
 8006b68:	d508      	bpl.n	8006b7c <_printf_i+0x14c>
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	6861      	ldr	r1, [r4, #4]
 8006b6e:	4299      	cmp	r1, r3
 8006b70:	bfde      	ittt	le
 8006b72:	2330      	movle	r3, #48	; 0x30
 8006b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b7c:	1b92      	subs	r2, r2, r6
 8006b7e:	6122      	str	r2, [r4, #16]
 8006b80:	f8cd a000 	str.w	sl, [sp]
 8006b84:	464b      	mov	r3, r9
 8006b86:	aa03      	add	r2, sp, #12
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	f7ff fee2 	bl	8006954 <_printf_common>
 8006b90:	3001      	adds	r0, #1
 8006b92:	d14c      	bne.n	8006c2e <_printf_i+0x1fe>
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	b004      	add	sp, #16
 8006b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9e:	4835      	ldr	r0, [pc, #212]	; (8006c74 <_printf_i+0x244>)
 8006ba0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	680e      	ldr	r6, [r1, #0]
 8006ba8:	061f      	lsls	r7, r3, #24
 8006baa:	f856 5b04 	ldr.w	r5, [r6], #4
 8006bae:	600e      	str	r6, [r1, #0]
 8006bb0:	d514      	bpl.n	8006bdc <_printf_i+0x1ac>
 8006bb2:	07d9      	lsls	r1, r3, #31
 8006bb4:	bf44      	itt	mi
 8006bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bba:	6023      	strmi	r3, [r4, #0]
 8006bbc:	b91d      	cbnz	r5, 8006bc6 <_printf_i+0x196>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	f023 0320 	bic.w	r3, r3, #32
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	2310      	movs	r3, #16
 8006bc8:	e7b0      	b.n	8006b2c <_printf_i+0xfc>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	f043 0320 	orr.w	r3, r3, #32
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	2378      	movs	r3, #120	; 0x78
 8006bd4:	4828      	ldr	r0, [pc, #160]	; (8006c78 <_printf_i+0x248>)
 8006bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bda:	e7e3      	b.n	8006ba4 <_printf_i+0x174>
 8006bdc:	065e      	lsls	r6, r3, #25
 8006bde:	bf48      	it	mi
 8006be0:	b2ad      	uxthmi	r5, r5
 8006be2:	e7e6      	b.n	8006bb2 <_printf_i+0x182>
 8006be4:	4616      	mov	r6, r2
 8006be6:	e7bb      	b.n	8006b60 <_printf_i+0x130>
 8006be8:	680b      	ldr	r3, [r1, #0]
 8006bea:	6826      	ldr	r6, [r4, #0]
 8006bec:	6960      	ldr	r0, [r4, #20]
 8006bee:	1d1d      	adds	r5, r3, #4
 8006bf0:	600d      	str	r5, [r1, #0]
 8006bf2:	0635      	lsls	r5, r6, #24
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	d501      	bpl.n	8006bfc <_printf_i+0x1cc>
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <_printf_i+0x1d2>
 8006bfc:	0671      	lsls	r1, r6, #25
 8006bfe:	d5fb      	bpl.n	8006bf8 <_printf_i+0x1c8>
 8006c00:	8018      	strh	r0, [r3, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	4616      	mov	r6, r2
 8006c08:	e7ba      	b.n	8006b80 <_printf_i+0x150>
 8006c0a:	680b      	ldr	r3, [r1, #0]
 8006c0c:	1d1a      	adds	r2, r3, #4
 8006c0e:	600a      	str	r2, [r1, #0]
 8006c10:	681e      	ldr	r6, [r3, #0]
 8006c12:	6862      	ldr	r2, [r4, #4]
 8006c14:	2100      	movs	r1, #0
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7f9 faea 	bl	80001f0 <memchr>
 8006c1c:	b108      	cbz	r0, 8006c22 <_printf_i+0x1f2>
 8006c1e:	1b80      	subs	r0, r0, r6
 8006c20:	6060      	str	r0, [r4, #4]
 8006c22:	6863      	ldr	r3, [r4, #4]
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	2300      	movs	r3, #0
 8006c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c2c:	e7a8      	b.n	8006b80 <_printf_i+0x150>
 8006c2e:	6923      	ldr	r3, [r4, #16]
 8006c30:	4632      	mov	r2, r6
 8006c32:	4649      	mov	r1, r9
 8006c34:	4640      	mov	r0, r8
 8006c36:	47d0      	blx	sl
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d0ab      	beq.n	8006b94 <_printf_i+0x164>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	079b      	lsls	r3, r3, #30
 8006c40:	d413      	bmi.n	8006c6a <_printf_i+0x23a>
 8006c42:	68e0      	ldr	r0, [r4, #12]
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	4298      	cmp	r0, r3
 8006c48:	bfb8      	it	lt
 8006c4a:	4618      	movlt	r0, r3
 8006c4c:	e7a4      	b.n	8006b98 <_printf_i+0x168>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4632      	mov	r2, r6
 8006c52:	4649      	mov	r1, r9
 8006c54:	4640      	mov	r0, r8
 8006c56:	47d0      	blx	sl
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d09b      	beq.n	8006b94 <_printf_i+0x164>
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	68e3      	ldr	r3, [r4, #12]
 8006c60:	9903      	ldr	r1, [sp, #12]
 8006c62:	1a5b      	subs	r3, r3, r1
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	dcf2      	bgt.n	8006c4e <_printf_i+0x21e>
 8006c68:	e7eb      	b.n	8006c42 <_printf_i+0x212>
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	f104 0619 	add.w	r6, r4, #25
 8006c70:	e7f5      	b.n	8006c5e <_printf_i+0x22e>
 8006c72:	bf00      	nop
 8006c74:	080070d5 	.word	0x080070d5
 8006c78:	080070e6 	.word	0x080070e6

08006c7c <_sbrk_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d06      	ldr	r5, [pc, #24]	; (8006c98 <_sbrk_r+0x1c>)
 8006c80:	2300      	movs	r3, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	602b      	str	r3, [r5, #0]
 8006c88:	f7fb fc48 	bl	800251c <_sbrk>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_sbrk_r+0x1a>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_sbrk_r+0x1a>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	20000da8 	.word	0x20000da8

08006c9c <__sread>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca4:	f000 f8a0 	bl	8006de8 <_read_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	bfab      	itete	ge
 8006cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cae:	89a3      	ldrhlt	r3, [r4, #12]
 8006cb0:	181b      	addge	r3, r3, r0
 8006cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cb6:	bfac      	ite	ge
 8006cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cba:	81a3      	strhlt	r3, [r4, #12]
 8006cbc:	bd10      	pop	{r4, pc}

08006cbe <__swrite>:
 8006cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc2:	461f      	mov	r7, r3
 8006cc4:	898b      	ldrh	r3, [r1, #12]
 8006cc6:	05db      	lsls	r3, r3, #23
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	4616      	mov	r6, r2
 8006cce:	d505      	bpl.n	8006cdc <__swrite+0x1e>
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f000 f868 	bl	8006dac <_lseek_r>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	4632      	mov	r2, r6
 8006cea:	463b      	mov	r3, r7
 8006cec:	4628      	mov	r0, r5
 8006cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf2:	f000 b817 	b.w	8006d24 <_write_r>

08006cf6 <__sseek>:
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfe:	f000 f855 	bl	8006dac <_lseek_r>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	bf15      	itete	ne
 8006d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d12:	81a3      	strheq	r3, [r4, #12]
 8006d14:	bf18      	it	ne
 8006d16:	81a3      	strhne	r3, [r4, #12]
 8006d18:	bd10      	pop	{r4, pc}

08006d1a <__sclose>:
 8006d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1e:	f000 b813 	b.w	8006d48 <_close_r>
	...

08006d24 <_write_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d07      	ldr	r5, [pc, #28]	; (8006d44 <_write_r+0x20>)
 8006d28:	4604      	mov	r4, r0
 8006d2a:	4608      	mov	r0, r1
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	f7fb fba1 	bl	800247a <_write>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_write_r+0x1e>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_write_r+0x1e>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	20000da8 	.word	0x20000da8

08006d48 <_close_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d06      	ldr	r5, [pc, #24]	; (8006d64 <_close_r+0x1c>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	f7fb fbad 	bl	80024b2 <_close>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_close_r+0x1a>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_close_r+0x1a>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	20000da8 	.word	0x20000da8

08006d68 <_fstat_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	; (8006d88 <_fstat_r+0x20>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	602b      	str	r3, [r5, #0]
 8006d76:	f7fb fba8 	bl	80024ca <_fstat>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d102      	bne.n	8006d84 <_fstat_r+0x1c>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	b103      	cbz	r3, 8006d84 <_fstat_r+0x1c>
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	bf00      	nop
 8006d88:	20000da8 	.word	0x20000da8

08006d8c <_isatty_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d06      	ldr	r5, [pc, #24]	; (8006da8 <_isatty_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fb fba7 	bl	80024ea <_isatty>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_isatty_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_isatty_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20000da8 	.word	0x20000da8

08006dac <_lseek_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d07      	ldr	r5, [pc, #28]	; (8006dcc <_lseek_r+0x20>)
 8006db0:	4604      	mov	r4, r0
 8006db2:	4608      	mov	r0, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	602a      	str	r2, [r5, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f7fb fba0 	bl	8002500 <_lseek>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_lseek_r+0x1e>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_lseek_r+0x1e>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	20000da8 	.word	0x20000da8

08006dd0 <__malloc_lock>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	; (8006dd8 <__malloc_lock+0x8>)
 8006dd2:	f7ff bb55 	b.w	8006480 <__retarget_lock_acquire_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	20000da0 	.word	0x20000da0

08006ddc <__malloc_unlock>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__malloc_unlock+0x8>)
 8006dde:	f7ff bb50 	b.w	8006482 <__retarget_lock_release_recursive>
 8006de2:	bf00      	nop
 8006de4:	20000da0 	.word	0x20000da0

08006de8 <_read_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4d07      	ldr	r5, [pc, #28]	; (8006e08 <_read_r+0x20>)
 8006dec:	4604      	mov	r4, r0
 8006dee:	4608      	mov	r0, r1
 8006df0:	4611      	mov	r1, r2
 8006df2:	2200      	movs	r2, #0
 8006df4:	602a      	str	r2, [r5, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f7fb fb22 	bl	8002440 <_read>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_read_r+0x1e>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_read_r+0x1e>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	20000da8 	.word	0x20000da8

08006e0c <_init>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr

08006e18 <_fini>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr
