
f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c0  080072c0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c8  080072c8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c8  080072c8  000172c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080072d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200000b8  08007388  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  08007388  00020dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f20f  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be2  00000000  00000000  0002f2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00031ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251c4  00000000  00000000  000336e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd02  00000000  00000000  000588ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8626  00000000  00000000  000685ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140bd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  00140c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006fc4 	.word	0x08006fc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08006fc4 	.word	0x08006fc4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_DMA_Init+0xa8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_DMA_Init+0xa8>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_DMA_Init+0xa8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_DMA_Init+0xa8>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_DMA_Init+0xa8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200b      	movs	r0, #11
 80005cc:	f003 fb33 	bl	8003c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005d0:	200b      	movs	r0, #11
 80005d2:	f003 fb4c 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	200f      	movs	r0, #15
 80005dc:	f003 fb2b 	bl	8003c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005e0:	200f      	movs	r0, #15
 80005e2:	f003 fb44 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2038      	movs	r0, #56	; 0x38
 80005ec:	f003 fb23 	bl	8003c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005f0:	2038      	movs	r0, #56	; 0x38
 80005f2:	f003 fb3c 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	203b      	movs	r0, #59	; 0x3b
 80005fc:	f003 fb1b 	bl	8003c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000600:	203b      	movs	r0, #59	; 0x3b
 8000602:	f003 fb34 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2044      	movs	r0, #68	; 0x44
 800060c:	f003 fb13 	bl	8003c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000610:	2044      	movs	r0, #68	; 0x44
 8000612:	f003 fb2c 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2045      	movs	r0, #69	; 0x45
 800061c:	f003 fb0b 	bl	8003c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000620:	2045      	movs	r0, #69	; 0x45
 8000622:	f003 fb24 	bl	8003c6e <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4b4e      	ldr	r3, [pc, #312]	; (8000788 <MX_GPIO_Init+0x154>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a4d      	ldr	r2, [pc, #308]	; (8000788 <MX_GPIO_Init+0x154>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b4b      	ldr	r3, [pc, #300]	; (8000788 <MX_GPIO_Init+0x154>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b47      	ldr	r3, [pc, #284]	; (8000788 <MX_GPIO_Init+0x154>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a46      	ldr	r2, [pc, #280]	; (8000788 <MX_GPIO_Init+0x154>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b44      	ldr	r3, [pc, #272]	; (8000788 <MX_GPIO_Init+0x154>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b40      	ldr	r3, [pc, #256]	; (8000788 <MX_GPIO_Init+0x154>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a3f      	ldr	r2, [pc, #252]	; (8000788 <MX_GPIO_Init+0x154>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <MX_GPIO_Init+0x154>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b39      	ldr	r3, [pc, #228]	; (8000788 <MX_GPIO_Init+0x154>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a38      	ldr	r2, [pc, #224]	; (8000788 <MX_GPIO_Init+0x154>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <MX_GPIO_Init+0x154>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b32      	ldr	r3, [pc, #200]	; (8000788 <MX_GPIO_Init+0x154>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a31      	ldr	r2, [pc, #196]	; (8000788 <MX_GPIO_Init+0x154>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <MX_GPIO_Init+0x154>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <MX_GPIO_Init+0x154>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <MX_GPIO_Init+0x154>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <MX_GPIO_Init+0x154>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <MX_GPIO_Init+0x154>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <MX_GPIO_Init+0x154>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_GPIO_Init+0x154>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	481e      	ldr	r0, [pc, #120]	; (800078c <MX_GPIO_Init+0x158>)
 8000714:	f003 ff5c 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2103      	movs	r1, #3
 800071c:	481c      	ldr	r0, [pc, #112]	; (8000790 <MX_GPIO_Init+0x15c>)
 800071e:	f003 ff57 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	481b      	ldr	r0, [pc, #108]	; (8000794 <MX_GPIO_Init+0x160>)
 8000728:	f003 ff52 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800072c:	2310      	movs	r3, #16
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000734:	2301      	movs	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0x158>)
 8000744:	f003 fd98 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000748:	2303      	movs	r3, #3
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0x15c>)
 8000760:	f003 fd8a 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_GPIO_Init+0x160>)
 800077c:	f003 fd7c 	bl	8004278 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3730      	adds	r7, #48	; 0x30
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400
 8000794:	40021800 	.word	0x40021800

08000798 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4 , (uint8_t *)&ch, 1, 0xFFFF);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <__io_putchar+0x20>)
 80007aa:	f005 f968 	bl	8005a7e <HAL_UART_Transmit>
  return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000d54 	.word	0x20000d54

080007bc <W5500_Select>:
//void W5500_WriteByte(uint8_t byte);
//void network_init(void);



void W5500_Select(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //CS LOW
 80007c0:	2200      	movs	r2, #0
 80007c2:	2110      	movs	r1, #16
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <W5500_Select+0x14>)
 80007c6:	f003 ff03 	bl	80045d0 <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020000 	.word	0x40020000

080007d4 <W5500_Unselect>:

void W5500_Unselect(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <W5500_Unselect+0x14>)
 80007de:	f003 fef7 	bl	80045d0 <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020000 	.word	0x40020000

080007ec <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Receive(&hspi5, buff, len, HAL_MAX_DELAY);
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <W5500_ReadBuff+0x24>)
 8000802:	f004 fd0c 	bl	800521e <HAL_SPI_Receive>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000095c 	.word	0x2000095c

08000814 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	807b      	strh	r3, [r7, #2]
  HAL_SPI_Transmit(&hspi5, buff, len, HAL_MAX_DELAY);
 8000820:	887a      	ldrh	r2, [r7, #2]
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <W5500_WriteBuff+0x24>)
 800082a:	f004 fbbc 	bl	8004fa6 <HAL_SPI_Transmit>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000095c 	.word	0x2000095c

0800083c <W5500_ReadByte>:
uint8_t W5500_ReadByte(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  uint8_t byte;
  W5500_ReadBuff(&byte, sizeof(byte));
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	2101      	movs	r1, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ffd0 	bl	80007ec <W5500_ReadBuff>
  return byte;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  W5500_WriteBuff(&byte, sizeof(byte));
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffd5 	bl	8000814 <W5500_WriteBuff>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <network_init>:
//void W5500_WriteByte(uint8_t byte) {
//  W5500_WriteBuff(&byte, sizeof(byte));
//}

void network_init(void)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af04      	add	r7, sp, #16
  uint8_t tmpstr[6];
  ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 800087a:	4939      	ldr	r1, [pc, #228]	; (8000960 <network_init+0xec>)
 800087c:	2000      	movs	r0, #0
 800087e:	f002 fcbd 	bl	80031fc <ctlnetwork>
  ctlnetwork(CN_GET_NETINFO, (void*)&gWIZNETINFO);
 8000882:	4937      	ldr	r1, [pc, #220]	; (8000960 <network_init+0xec>)
 8000884:	2001      	movs	r0, #1
 8000886:	f002 fcb9 	bl	80031fc <ctlnetwork>

  // Display Network Information
  ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	2008      	movs	r0, #8
 8000890:	f002 fbd6 	bl	8003040 <ctlwizchip>
  printf("\r\n=== %s NET CONF ===\r\n",(char*)tmpstr);
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4832      	ldr	r0, [pc, #200]	; (8000964 <network_init+0xf0>)
 800089a:	f005 fc71 	bl	8006180 <iprintf>
  printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <network_init+0xec>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <network_init+0xec>)
 80008a6:	785b      	ldrb	r3, [r3, #1]
 80008a8:	461c      	mov	r4, r3
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <network_init+0xec>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	461d      	mov	r5, r3
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <network_init+0xec>)
 80008b2:	78db      	ldrb	r3, [r3, #3]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <network_init+0xec>)
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <network_init+0xec>)
 80008be:	795b      	ldrb	r3, [r3, #5]
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	9101      	str	r1, [sp, #4]
 80008c4:	9200      	str	r2, [sp, #0]
 80008c6:	462b      	mov	r3, r5
 80008c8:	4622      	mov	r2, r4
 80008ca:	4601      	mov	r1, r0
 80008cc:	4826      	ldr	r0, [pc, #152]	; (8000968 <network_init+0xf4>)
 80008ce:	f005 fc57 	bl	8006180 <iprintf>
  printf("SIP: %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <network_init+0xec>)
 80008d4:	799b      	ldrb	r3, [r3, #6]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <network_init+0xec>)
 80008da:	79db      	ldrb	r3, [r3, #7]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <network_init+0xec>)
 80008e0:	7a1b      	ldrb	r3, [r3, #8]
 80008e2:	4618      	mov	r0, r3
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <network_init+0xec>)
 80008e6:	7a5b      	ldrb	r3, [r3, #9]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	4603      	mov	r3, r0
 80008ec:	481f      	ldr	r0, [pc, #124]	; (800096c <network_init+0xf8>)
 80008ee:	f005 fc47 	bl	8006180 <iprintf>
  printf("GAR: %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <network_init+0xec>)
 80008f4:	7b9b      	ldrb	r3, [r3, #14]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <network_init+0xec>)
 80008fa:	7bdb      	ldrb	r3, [r3, #15]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <network_init+0xec>)
 8000900:	7c1b      	ldrb	r3, [r3, #16]
 8000902:	4618      	mov	r0, r3
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <network_init+0xec>)
 8000906:	7c5b      	ldrb	r3, [r3, #17]
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	4603      	mov	r3, r0
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <network_init+0xfc>)
 800090e:	f005 fc37 	bl	8006180 <iprintf>
  printf("SUB: %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <network_init+0xec>)
 8000914:	7a9b      	ldrb	r3, [r3, #10]
 8000916:	4619      	mov	r1, r3
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <network_init+0xec>)
 800091a:	7adb      	ldrb	r3, [r3, #11]
 800091c:	461a      	mov	r2, r3
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <network_init+0xec>)
 8000920:	7b1b      	ldrb	r3, [r3, #12]
 8000922:	4618      	mov	r0, r3
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <network_init+0xec>)
 8000926:	7b5b      	ldrb	r3, [r3, #13]
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	4603      	mov	r3, r0
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <network_init+0x100>)
 800092e:	f005 fc27 	bl	8006180 <iprintf>
  printf("DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <network_init+0xec>)
 8000934:	7c9b      	ldrb	r3, [r3, #18]
 8000936:	4619      	mov	r1, r3
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <network_init+0xec>)
 800093a:	7cdb      	ldrb	r3, [r3, #19]
 800093c:	461a      	mov	r2, r3
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <network_init+0xec>)
 8000940:	7d1b      	ldrb	r3, [r3, #20]
 8000942:	4618      	mov	r0, r3
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <network_init+0xec>)
 8000946:	7d5b      	ldrb	r3, [r3, #21]
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	4603      	mov	r3, r0
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <network_init+0x104>)
 800094e:	f005 fc17 	bl	8006180 <iprintf>
  printf("======================\r\n");
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <network_init+0x108>)
 8000954:	f005 fc9a 	bl	800628c <puts>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bdb0      	pop	{r4, r5, r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	08006fdc 	.word	0x08006fdc
 8000968:	08006ff4 	.word	0x08006ff4
 800096c:	0800701c 	.word	0x0800701c
 8000970:	08007030 	.word	0x08007030
 8000974:	08007044 	.word	0x08007044
 8000978:	08007058 	.word	0x08007058
 800097c:	0800706c 	.word	0x0800706c

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t tmp;
  int32_t retr = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <main+0xd8>)
 800098c:	463c      	mov	r4, r7
 800098e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000990:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f003 f802 	bl	800399c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f876 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f7ff fe4a 	bl	8000634 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a0:	f7ff fdf2 	bl	8000588 <MX_DMA_Init>
  MX_SPI1_Init();
 80009a4:	f000 f8e2 	bl	8000b6c <MX_SPI1_Init>
  MX_SPI2_Init();
 80009a8:	f000 f916 	bl	8000bd8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80009ac:	f000 f94a 	bl	8000c44 <MX_SPI3_Init>
  MX_SPI4_Init();
 80009b0:	f000 f97a 	bl	8000ca8 <MX_SPI4_Init>
  MX_SPI5_Init();
 80009b4:	f000 f9aa 	bl	8000d0c <MX_SPI5_Init>
  MX_SPI6_Init();
 80009b8:	f000 f9de 	bl	8000d78 <MX_SPI6_Init>
  MX_UART4_Init();
 80009bc:	f000 fdf6 	bl	80015ac <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80009c0:	4926      	ldr	r1, [pc, #152]	; (8000a5c <main+0xdc>)
 80009c2:	4827      	ldr	r0, [pc, #156]	; (8000a60 <main+0xe0>)
 80009c4:	f002 fabe 	bl	8002f44 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80009c8:	4926      	ldr	r1, [pc, #152]	; (8000a64 <main+0xe4>)
 80009ca:	4827      	ldr	r0, [pc, #156]	; (8000a68 <main+0xe8>)
 80009cc:	f002 fae0 	bl	8002f90 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80009d0:	4926      	ldr	r1, [pc, #152]	; (8000a6c <main+0xec>)
 80009d2:	4827      	ldr	r0, [pc, #156]	; (8000a70 <main+0xf0>)
 80009d4:	f002 fb08 	bl	8002fe8 <reg_wizchip_spiburst_cbfunc>



/* WIZCHIP SOCKET Buffer initialize */
if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	2001      	movs	r0, #1
 80009de:	f002 fb2f 	bl	8003040 <ctlwizchip>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e8:	d103      	bne.n	80009f2 <main+0x72>
{
   printf("WIZCHIP Initialized fail.\r\n");
 80009ea:	4822      	ldr	r0, [pc, #136]	; (8000a74 <main+0xf4>)
 80009ec:	f005 fc4e 	bl	800628c <puts>
   while(1);
 80009f0:	e7fe      	b.n	80009f0 <main+0x70>
}

/* PHY link status check */
do
{
   if(ctlwizchip(CW_GET_PHYLINK, (void*)&tmp) == -1)
 80009f2:	f107 0313 	add.w	r3, r7, #19
 80009f6:	4619      	mov	r1, r3
 80009f8:	200f      	movs	r0, #15
 80009fa:	f002 fb21 	bl	8003040 <ctlwizchip>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d102      	bne.n	8000a0c <main+0x8c>
      printf("Unknown PHY Link stauts.\r\n");
 8000a06:	481c      	ldr	r0, [pc, #112]	; (8000a78 <main+0xf8>)
 8000a08:	f005 fc40 	bl	800628c <puts>
}while(tmp == PHY_LINK_OFF);
 8000a0c:	7cfb      	ldrb	r3, [r7, #19]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0ef      	beq.n	80009f2 <main+0x72>
	printf("SOCKET ERROR =1");
 8000a12:	481a      	ldr	r0, [pc, #104]	; (8000a7c <main+0xfc>)
 8000a14:	f005 fbb4 	bl	8006180 <iprintf>
network_init();
 8000a18:	f7ff ff2c 	bl	8000874 <network_init>
//      HAL_Delay(500);
     
//    DHT_data d = DHT_getData(DHT22);
//     printf("Temp: %2.1f \r\n", d.temp );
//
		if( (retr = loopback_tcps(SOCK_TCPS, gDATABUF, 5000)) < 0) {
 8000a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a20:	4917      	ldr	r1, [pc, #92]	; (8000a80 <main+0x100>)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fe5e 	bl	80016e4 <loopback_tcps>
 8000a28:	6178      	str	r0, [r7, #20]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	da03      	bge.n	8000a38 <main+0xb8>
    printf("SOCKET ERROR : %ld\r\n", retr);
 8000a30:	6979      	ldr	r1, [r7, #20]
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <main+0x104>)
 8000a34:	f005 fba4 	bl	8006180 <iprintf>
  }

		if( (retr = loopback_udps(SOCK_UDPS, gDATABUF, 3000)) < 0) {
 8000a38:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <main+0x100>)
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f000 ff7a 	bl	8001938 <loopback_udps>
 8000a44:	6178      	str	r0, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dae7      	bge.n	8000a1c <main+0x9c>
			printf("SOCKET ERROR : %ld\r\n", retr);
 8000a4c:	6979      	ldr	r1, [r7, #20]
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <main+0x104>)
 8000a50:	f005 fb96 	bl	8006180 <iprintf>
		if( (retr = loopback_tcps(SOCK_TCPS, gDATABUF, 5000)) < 0) {
 8000a54:	e7e2      	b.n	8000a1c <main+0x9c>
 8000a56:	bf00      	nop
 8000a58:	080070e4 	.word	0x080070e4
 8000a5c:	080007d5 	.word	0x080007d5
 8000a60:	080007bd 	.word	0x080007bd
 8000a64:	08000857 	.word	0x08000857
 8000a68:	0800083d 	.word	0x0800083d
 8000a6c:	08000815 	.word	0x08000815
 8000a70:	080007ed 	.word	0x080007ed
 8000a74:	08007084 	.word	0x08007084
 8000a78:	080070a0 	.word	0x080070a0
 8000a7c:	080070bc 	.word	0x080070bc
 8000a80:	20000104 	.word	0x20000104
 8000a84:	080070cc 	.word	0x080070cc

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	; 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2230      	movs	r2, #48	; 0x30
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f005 fac0 	bl	800601c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SystemClock_Config+0xd0>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <SystemClock_Config+0xd4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xd4>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xd4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000afc:	2319      	movs	r3, #25
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b00:	23a8      	movs	r3, #168	; 0xa8
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 fd77 	bl	8004604 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b1c:	f000 f820 	bl	8000b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 ffd8 	bl	8004af4 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b4a:	f000 f809 	bl	8000b60 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi6_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <MX_SPI1_Init+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bb8:	220a      	movs	r2, #10
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_SPI1_Init+0x64>)
 8000bbe:	f004 f969 	bl	8004e94 <HAL_SPI_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bc8:	f7ff ffca 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000b7c 	.word	0x20000b7c
 8000bd4:	40013000 	.word	0x40013000

08000bd8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <MX_SPI2_Init+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_SPI2_Init+0x64>)
 8000c2a:	f004 f933 	bl	8004e94 <HAL_SPI_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c34:	f7ff ff94 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000904 	.word	0x20000904
 8000c40:	40003800 	.word	0x40003800

08000c44 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <MX_SPI3_Init+0x60>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c72:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_SPI3_Init+0x5c>)
 8000c8e:	f004 f901 	bl	8004e94 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8000c98:	f7ff ff62 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000acc 	.word	0x20000acc
 8000ca4:	40003c00 	.word	0x40003c00

08000ca8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <MX_SPI4_Init+0x60>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd6:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cec:	220a      	movs	r2, #10
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_SPI4_Init+0x5c>)
 8000cf2:	f004 f8cf 	bl	8004e94 <HAL_SPI_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_SPI4_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f7ff ff30 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000b24 	.word	0x20000b24
 8000d08:	40013400 	.word	0x40013400

08000d0c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <MX_SPI5_Init+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d1c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d40:	2218      	movs	r2, #24
 8000d42:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d58:	220a      	movs	r2, #10
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_SPI5_Init+0x64>)
 8000d5e:	f004 f899 	bl	8004e94 <HAL_SPI_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000d68:	f7ff fefa 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000095c 	.word	0x2000095c
 8000d74:	40015000 	.word	0x40015000

08000d78 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <MX_SPI6_Init+0x60>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da6:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_SPI6_Init+0x5c>)
 8000dc2:	f004 f867 	bl	8004e94 <HAL_SPI_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_SPI6_Init+0x58>
  {
    Error_Handler();
 8000dcc:	f7ff fec8 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000a74 	.word	0x20000a74
 8000dd8:	40015400 	.word	0x40015400

08000ddc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a9d      	ldr	r2, [pc, #628]	; (8001070 <HAL_SPI_MspInit+0x294>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d15a      	bne.n	8000eb4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e02:	4b9c      	ldr	r3, [pc, #624]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a9b      	ldr	r2, [pc, #620]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b99      	ldr	r3, [pc, #612]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1e:	4b95      	ldr	r3, [pc, #596]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a94      	ldr	r2, [pc, #592]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b92      	ldr	r3, [pc, #584]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
 8000e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e36:	23e0      	movs	r3, #224	; 0xe0
 8000e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e46:	2305      	movs	r3, #5
 8000e48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4889      	ldr	r0, [pc, #548]	; (8001078 <HAL_SPI_MspInit+0x29c>)
 8000e52:	f003 fa11 	bl	8004278 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000e56:	4b89      	ldr	r3, [pc, #548]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e58:	4a89      	ldr	r2, [pc, #548]	; (8001080 <HAL_SPI_MspInit+0x2a4>)
 8000e5a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000e5c:	4b87      	ldr	r3, [pc, #540]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e5e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e62:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e64:	4b85      	ldr	r3, [pc, #532]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6a:	4b84      	ldr	r3, [pc, #528]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e70:	4b82      	ldr	r3, [pc, #520]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e76:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e78:	4b80      	ldr	r3, [pc, #512]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7e:	4b7f      	ldr	r3, [pc, #508]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000e84:	4b7d      	ldr	r3, [pc, #500]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b7c      	ldr	r3, [pc, #496]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e90:	4b7a      	ldr	r3, [pc, #488]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000e96:	4879      	ldr	r0, [pc, #484]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000e98:	f002 ff04 	bl	8003ca4 <HAL_DMA_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000ea2:	f7ff fe5d 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a74      	ldr	r2, [pc, #464]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000eaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8000eac:	4a73      	ldr	r2, [pc, #460]	; (800107c <HAL_SPI_MspInit+0x2a0>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8000eb2:	e218      	b.n	80012e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a72      	ldr	r2, [pc, #456]	; (8001084 <HAL_SPI_MspInit+0x2a8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d178      	bne.n	8000fb0 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ec2:	4b6c      	ldr	r3, [pc, #432]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a6b      	ldr	r2, [pc, #428]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b69      	ldr	r3, [pc, #420]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ede:	4b65      	ldr	r3, [pc, #404]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a64      	ldr	r2, [pc, #400]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b62      	ldr	r3, [pc, #392]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000efa:	4b5e      	ldr	r3, [pc, #376]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a5d      	ldr	r2, [pc, #372]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b5b      	ldr	r3, [pc, #364]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f12:	230c      	movs	r3, #12
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f22:	2305      	movs	r3, #5
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4856      	ldr	r0, [pc, #344]	; (8001088 <HAL_SPI_MspInit+0x2ac>)
 8000f2e:	f003 f9a3 	bl	8004278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f44:	2305      	movs	r3, #5
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	484f      	ldr	r0, [pc, #316]	; (800108c <HAL_SPI_MspInit+0x2b0>)
 8000f50:	f003 f992 	bl	8004278 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000f54:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f56:	4a4f      	ldr	r2, [pc, #316]	; (8001094 <HAL_SPI_MspInit+0x2b8>)
 8000f58:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000f5a:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f60:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f66:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6c:	4b48      	ldr	r3, [pc, #288]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f72:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7a:	4b45      	ldr	r3, [pc, #276]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f86:	4b42      	ldr	r3, [pc, #264]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f92:	483f      	ldr	r0, [pc, #252]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000f94:	f002 fe86 	bl	8003ca4 <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 8000f9e:	f7ff fddf 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a3a      	ldr	r2, [pc, #232]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000fa6:	649a      	str	r2, [r3, #72]	; 0x48
 8000fa8:	4a39      	ldr	r2, [pc, #228]	; (8001090 <HAL_SPI_MspInit+0x2b4>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fae:	e19a      	b.n	80012e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a38      	ldr	r2, [pc, #224]	; (8001098 <HAL_SPI_MspInit+0x2bc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d174      	bne.n	80010a4 <HAL_SPI_MspInit+0x2c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a2c      	ldr	r2, [pc, #176]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a25      	ldr	r2, [pc, #148]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <HAL_SPI_MspInit+0x298>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ff2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001004:	2306      	movs	r3, #6
 8001006:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800100c:	4619      	mov	r1, r3
 800100e:	481e      	ldr	r0, [pc, #120]	; (8001088 <HAL_SPI_MspInit+0x2ac>)
 8001010:	f003 f932 	bl	8004278 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001016:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <HAL_SPI_MspInit+0x2c4>)
 8001018:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 800102e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001032:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001052:	4812      	ldr	r0, [pc, #72]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001054:	f002 fe26 	bl	8003ca4 <HAL_DMA_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_SPI_MspInit+0x286>
      Error_Handler();
 800105e:	f7ff fd7f 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 8001066:	64da      	str	r2, [r3, #76]	; 0x4c
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_SPI_MspInit+0x2c0>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800106e:	e13a      	b.n	80012e6 <HAL_SPI_MspInit+0x50a>
 8001070:	40013000 	.word	0x40013000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000
 800107c:	20000bd4 	.word	0x20000bd4
 8001080:	40026410 	.word	0x40026410
 8001084:	40003800 	.word	0x40003800
 8001088:	40020800 	.word	0x40020800
 800108c:	40020400 	.word	0x40020400
 8001090:	20000c94 	.word	0x20000c94
 8001094:	40026070 	.word	0x40026070
 8001098:	40003c00 	.word	0x40003c00
 800109c:	20000cf4 	.word	0x20000cf4
 80010a0:	40026010 	.word	0x40026010
  else if(spiHandle->Instance==SPI4)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a91      	ldr	r2, [pc, #580]	; (80012f0 <HAL_SPI_MspInit+0x514>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d15a      	bne.n	8001164 <HAL_SPI_MspInit+0x388>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	4b90      	ldr	r3, [pc, #576]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a8f      	ldr	r2, [pc, #572]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 80010b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b8d      	ldr	r3, [pc, #564]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	4b89      	ldr	r3, [pc, #548]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a88      	ldr	r2, [pc, #544]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80010f6:	2305      	movs	r3, #5
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010fe:	4619      	mov	r1, r3
 8001100:	487d      	ldr	r0, [pc, #500]	; (80012f8 <HAL_SPI_MspInit+0x51c>)
 8001102:	f003 f8b9 	bl	8004278 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001106:	4b7d      	ldr	r3, [pc, #500]	; (80012fc <HAL_SPI_MspInit+0x520>)
 8001108:	4a7d      	ldr	r2, [pc, #500]	; (8001300 <HAL_SPI_MspInit+0x524>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800110c:	4b7b      	ldr	r3, [pc, #492]	; (80012fc <HAL_SPI_MspInit+0x520>)
 800110e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001112:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001114:	4b79      	ldr	r3, [pc, #484]	; (80012fc <HAL_SPI_MspInit+0x520>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111a:	4b78      	ldr	r3, [pc, #480]	; (80012fc <HAL_SPI_MspInit+0x520>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001120:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_SPI_MspInit+0x520>)
 8001122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001126:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001128:	4b74      	ldr	r3, [pc, #464]	; (80012fc <HAL_SPI_MspInit+0x520>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112e:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_SPI_MspInit+0x520>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001134:	4b71      	ldr	r3, [pc, #452]	; (80012fc <HAL_SPI_MspInit+0x520>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_SPI_MspInit+0x520>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001140:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <HAL_SPI_MspInit+0x520>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001146:	486d      	ldr	r0, [pc, #436]	; (80012fc <HAL_SPI_MspInit+0x520>)
 8001148:	f002 fdac 	bl	8003ca4 <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_SPI_MspInit+0x37a>
      Error_Handler();
 8001152:	f7ff fd05 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a68      	ldr	r2, [pc, #416]	; (80012fc <HAL_SPI_MspInit+0x520>)
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
 800115c:	4a67      	ldr	r2, [pc, #412]	; (80012fc <HAL_SPI_MspInit+0x520>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001162:	e0c0      	b.n	80012e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI5)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a66      	ldr	r2, [pc, #408]	; (8001304 <HAL_SPI_MspInit+0x528>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d15b      	bne.n	8001226 <HAL_SPI_MspInit+0x44a>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a5f      	ldr	r2, [pc, #380]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b5d      	ldr	r3, [pc, #372]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b56      	ldr	r3, [pc, #344]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011b8:	2305      	movs	r3, #5
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c0:	4619      	mov	r1, r3
 80011c2:	4851      	ldr	r0, [pc, #324]	; (8001308 <HAL_SPI_MspInit+0x52c>)
 80011c4:	f003 f858 	bl	8004278 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream5;
 80011c8:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011ca:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_SPI_MspInit+0x534>)
 80011cc:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_7;
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011d4:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e2:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e8:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ea:	4b48      	ldr	r3, [pc, #288]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f0:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <HAL_SPI_MspInit+0x530>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_SPI_MspInit+0x530>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8001208:	4840      	ldr	r0, [pc, #256]	; (800130c <HAL_SPI_MspInit+0x530>)
 800120a:	f002 fd4b 	bl	8003ca4 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_SPI_MspInit+0x43c>
      Error_Handler();
 8001214:	f7ff fca4 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3c      	ldr	r2, [pc, #240]	; (800130c <HAL_SPI_MspInit+0x530>)
 800121c:	64da      	str	r2, [r3, #76]	; 0x4c
 800121e:	4a3b      	ldr	r2, [pc, #236]	; (800130c <HAL_SPI_MspInit+0x530>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001224:	e05f      	b.n	80012e6 <HAL_SPI_MspInit+0x50a>
  else if(spiHandle->Instance==SPI6)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a3a      	ldr	r2, [pc, #232]	; (8001314 <HAL_SPI_MspInit+0x538>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d15a      	bne.n	80012e6 <HAL_SPI_MspInit+0x50a>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 800123a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123e:	6453      	str	r3, [r2, #68]	; 0x44
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 8001256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_SPI_MspInit+0x518>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001268:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800126c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800127a:	2305      	movs	r3, #5
 800127c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001282:	4619      	mov	r1, r3
 8001284:	4824      	ldr	r0, [pc, #144]	; (8001318 <HAL_SPI_MspInit+0x53c>)
 8001286:	f002 fff7 	bl	8004278 <HAL_GPIO_Init>
    hdma_spi6_rx.Instance = DMA2_Stream6;
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_SPI_MspInit+0x540>)
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <HAL_SPI_MspInit+0x544>)
 800128e:	601a      	str	r2, [r3, #0]
    hdma_spi6_rx.Init.Channel = DMA_CHANNEL_1;
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_SPI_MspInit+0x540>)
 8001292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001296:	605a      	str	r2, [r3, #4]
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_SPI_MspInit+0x540>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_spi6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
    hdma_spi6_rx.Init.Mode = DMA_NORMAL;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
    hdma_spi6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
 80012ca:	4814      	ldr	r0, [pc, #80]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012cc:	f002 fcea 	bl	8003ca4 <HAL_DMA_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_SPI_MspInit+0x4fe>
      Error_Handler();
 80012d6:	f7ff fc43 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012de:	64da      	str	r2, [r3, #76]	; 0x4c
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_SPI_MspInit+0x540>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	; 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40013400 	.word	0x40013400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40021000 	.word	0x40021000
 80012fc:	20000a14 	.word	0x20000a14
 8001300:	40026458 	.word	0x40026458
 8001304:	40015000 	.word	0x40015000
 8001308:	40021400 	.word	0x40021400
 800130c:	200009b4 	.word	0x200009b4
 8001310:	40026488 	.word	0x40026488
 8001314:	40015400 	.word	0x40015400
 8001318:	40021800 	.word	0x40021800
 800131c:	20000c34 	.word	0x20000c34
 8001320:	400264a0 	.word	0x400264a0

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <HAL_MspInit+0x4c>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x4c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f002 fb3e 	bl	8003a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <DMA1_Stream0_IRQHandler+0x10>)
 80013ce:	f002 fd17 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000cf4 	.word	0x20000cf4

080013dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <DMA1_Stream4_IRQHandler+0x10>)
 80013e2:	f002 fd0d 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000c94 	.word	0x20000c94

080013f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <DMA2_Stream0_IRQHandler+0x10>)
 80013f6:	f002 fd03 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000bd4 	.word	0x20000bd4

08001404 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA2_Stream3_IRQHandler+0x10>)
 800140a:	f002 fcf9 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000a14 	.word	0x20000a14

08001418 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA2_Stream5_IRQHandler+0x10>)
 800141e:	f002 fcef 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200009b4 	.word	0x200009b4

0800142c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA2_Stream6_IRQHandler+0x10>)
 8001432:	f002 fce5 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000c34 	.word	0x20000c34

08001440 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e00a      	b.n	8001468 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001452:	f3af 8000 	nop.w
 8001456:	4601      	mov	r1, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	60ba      	str	r2, [r7, #8]
 800145e:	b2ca      	uxtb	r2, r1
 8001460:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf0      	blt.n	8001452 <_read+0x12>
	}

return len;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e009      	b.n	80014a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f97f 	bl	8000798 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf1      	blt.n	800148c <_write+0x12>
	}
	return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_close>:

int _close(int file)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	return -1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014da:	605a      	str	r2, [r3, #4]
	return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_isatty>:

int _isatty(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	return 1;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f004 fd3c 	bl	8005fc8 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20030000 	.word	0x20030000
 800157c:	00000400 	.word	0x00000400
 8001580:	200000d4 	.word	0x200000d4
 8001584:	20000db0 	.word	0x20000db0

08001588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SystemInit+0x20>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <SystemInit+0x20>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_UART4_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_UART4_Init+0x4c>)
 80015e4:	f004 f9fe 	bl	80059e4 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80015ee:	f7ff fab7 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000d54 	.word	0x20000d54
 80015fc:	40004c00 	.word	0x40004c00

08001600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_UART_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x88>)
 800162c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_UART_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800165a:	2303      	movs	r3, #3
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800166a:	2308      	movs	r3, #8
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0x8c>)
 8001676:	f002 fdff 	bl	8004278 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40004c00 	.word	0x40004c00
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	; (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ff65 	bl	8001588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f004 fc89 	bl	8005fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff f95d 	bl	8000980 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80016d4:	080072d0 	.word	0x080072d0
  ldr r2, =_sbss
 80016d8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80016dc:	20000dac 	.word	0x20000dac

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <loopback_tcps>:
#include "wizchip_conf.h"
#include "socket.h"
#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	82fb      	strh	r3, [r7, #22]
 80016f8:	2300      	movs	r3, #0
 80016fa:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	3301      	adds	r3, #1
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f99f 	bl	8001a4c <WIZCHIP_READ>
 800170e:	4603      	mov	r3, r0
 8001710:	2b1c      	cmp	r3, #28
 8001712:	f200 80fe 	bhi.w	8001912 <loopback_tcps+0x22e>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <loopback_tcps+0x38>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	080018f7 	.word	0x080018f7
 8001720:	08001913 	.word	0x08001913
 8001724:	08001913 	.word	0x08001913
 8001728:	08001913 	.word	0x08001913
 800172c:	08001913 	.word	0x08001913
 8001730:	08001913 	.word	0x08001913
 8001734:	08001913 	.word	0x08001913
 8001738:	08001913 	.word	0x08001913
 800173c:	08001913 	.word	0x08001913
 8001740:	08001913 	.word	0x08001913
 8001744:	08001913 	.word	0x08001913
 8001748:	08001913 	.word	0x08001913
 800174c:	08001913 	.word	0x08001913
 8001750:	08001913 	.word	0x08001913
 8001754:	08001913 	.word	0x08001913
 8001758:	08001913 	.word	0x08001913
 800175c:	08001913 	.word	0x08001913
 8001760:	08001913 	.word	0x08001913
 8001764:	08001913 	.word	0x08001913
 8001768:	080018d5 	.word	0x080018d5
 800176c:	08001913 	.word	0x08001913
 8001770:	08001913 	.word	0x08001913
 8001774:	08001913 	.word	0x08001913
 8001778:	08001791 	.word	0x08001791
 800177c:	08001913 	.word	0x08001913
 8001780:	08001913 	.word	0x08001913
 8001784:	08001913 	.word	0x08001913
 8001788:	08001913 	.word	0x08001913
 800178c:	080018b3 	.word	0x080018b3
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	3301      	adds	r3, #1
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f955 	bl	8001a4c <WIZCHIP_READ>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d042      	beq.n	8001832 <loopback_tcps+0x14e>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	3301      	adds	r3, #1
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80017b8:	4618      	mov	r0, r3
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	2204      	movs	r2, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	f000 f9dd 	bl	8001b80 <WIZCHIP_READ_BUF>
			destport = getSn_DPORT(sn);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	3301      	adds	r3, #1
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f93a 	bl	8001a4c <WIZCHIP_READ>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29b      	uxth	r3, r3
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b29c      	uxth	r4, r3
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	3301      	adds	r3, #1
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f92d 	bl	8001a4c <WIZCHIP_READ>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4423      	add	r3, r4
 80017f8:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 80017fa:	79f9      	ldrb	r1, [r7, #7]
 80017fc:	7a3b      	ldrb	r3, [r7, #8]
 80017fe:	461c      	mov	r4, r3
 8001800:	7a7b      	ldrb	r3, [r7, #9]
 8001802:	461d      	mov	r5, r3
 8001804:	7abb      	ldrb	r3, [r7, #10]
 8001806:	461a      	mov	r2, r3
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	4618      	mov	r0, r3
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	9001      	str	r0, [sp, #4]
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	462b      	mov	r3, r5
 8001816:	4622      	mov	r2, r4
 8001818:	4844      	ldr	r0, [pc, #272]	; (800192c <loopback_tcps+0x248>)
 800181a:	f004 fcb1 	bl	8006180 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	3301      	adds	r3, #1
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f959 	bl	8001ae4 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 faae 	bl	8001d96 <getSn_RX_RSR>
 800183a:	4603      	mov	r3, r0
 800183c:	82fb      	strh	r3, [r7, #22]
 800183e:	8afb      	ldrh	r3, [r7, #22]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d068      	beq.n	8001916 <loopback_tcps+0x232>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8001844:	8afb      	ldrh	r3, [r7, #22]
 8001846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800184a:	d902      	bls.n	8001852 <loopback_tcps+0x16e>
 800184c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001850:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 8001852:	8afa      	ldrh	r2, [r7, #22]
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 ff35 	bl	80026c8 <recv>
 800185e:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	dc01      	bgt.n	800186a <loopback_tcps+0x186>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	e05b      	b.n	8001922 <loopback_tcps+0x23e>
			size = (uint16_t) ret;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 8001872:	e019      	b.n	80018a8 <loopback_tcps+0x1c4>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 8001874:	8abb      	ldrh	r3, [r7, #20]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	18d1      	adds	r1, r2, r3
 800187a:	8afa      	ldrh	r2, [r7, #22]
 800187c:	8abb      	ldrh	r3, [r7, #20]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b29a      	uxth	r2, r3
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fe25 	bl	80024d4 <send>
 800188a:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	da05      	bge.n	800189e <loopback_tcps+0x1ba>
				{
					close(sn);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fcdf 	bl	8002258 <close>
					return ret;
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	e041      	b.n	8001922 <loopback_tcps+0x23e>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	8abb      	ldrh	r3, [r7, #20]
 80018a4:	4413      	add	r3, r2
 80018a6:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 80018a8:	8afa      	ldrh	r2, [r7, #22]
 80018aa:	8abb      	ldrh	r3, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1e1      	bne.n	8001874 <loopback_tcps+0x190>
			}
         }
         break;
 80018b0:	e031      	b.n	8001916 <loopback_tcps+0x232>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fd97 	bl	80023e8 <disconnect>
 80018ba:	4603      	mov	r3, r0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d001      	beq.n	80018c8 <loopback_tcps+0x1e4>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	e02c      	b.n	8001922 <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <loopback_tcps+0x24c>)
 80018ce:	f004 fc57 	bl	8006180 <iprintf>
#endif
         break;
 80018d2:	e025      	b.n	8001920 <loopback_tcps+0x23c>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	88ba      	ldrh	r2, [r7, #4]
 80018d8:	4619      	mov	r1, r3
 80018da:	4816      	ldr	r0, [pc, #88]	; (8001934 <loopback_tcps+0x250>)
 80018dc:	f004 fc50 	bl	8006180 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fd26 	bl	8002334 <listen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d013      	beq.n	800191a <loopback_tcps+0x236>
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	e015      	b.n	8001922 <loopback_tcps+0x23e>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 80018f6:	88ba      	ldrh	r2, [r7, #4]
 80018f8:	79f8      	ldrb	r0, [r7, #7]
 80018fa:	2300      	movs	r3, #0
 80018fc:	2101      	movs	r1, #1
 80018fe:	f000 fb95 	bl	800202c <socket>
 8001902:	4603      	mov	r3, r0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	429a      	cmp	r2, r3
 800190c:	d007      	beq.n	800191e <loopback_tcps+0x23a>
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	e007      	b.n	8001922 <loopback_tcps+0x23e>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8001912:	bf00      	nop
 8001914:	e004      	b.n	8001920 <loopback_tcps+0x23c>
         break;
 8001916:	bf00      	nop
 8001918:	e002      	b.n	8001920 <loopback_tcps+0x23c>
         break;
 800191a:	bf00      	nop
 800191c:	e000      	b.n	8001920 <loopback_tcps+0x23c>
         break;
 800191e:	bf00      	nop
   }
   return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bdb0      	pop	{r4, r5, r7, pc}
 800192a:	bf00      	nop
 800192c:	080070f4 	.word	0x080070f4
 8001930:	08007118 	.word	0x08007118
 8001934:	0800712c 	.word	0x0800712c

08001938 <loopback_udps>:
   return 1;
}


int32_t loopback_udps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af02      	add	r7, sp, #8
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	4613      	mov	r3, r2
 8001946:	80bb      	strh	r3, [r7, #4]
   int32_t  ret;
   uint16_t size, sentsize;
   uint8_t  destip[4];
   uint16_t destport;

   switch(getSn_SR(sn))
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	3301      	adds	r3, #1
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f879 	bl	8001a4c <WIZCHIP_READ>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d052      	beq.n	8001a06 <loopback_udps+0xce>
 8001960:	2b22      	cmp	r3, #34	; 0x22
 8001962:	d165      	bne.n	8001a30 <loopback_udps+0xf8>
   {
      case SOCK_UDP :
         if((size = getSn_RX_RSR(sn)) > 0)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fa15 	bl	8001d96 <getSn_RX_RSR>
 800196c:	4603      	mov	r3, r0
 800196e:	82fb      	strh	r3, [r7, #22]
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d05e      	beq.n	8001a34 <loopback_udps+0xfc>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8001976:	8afb      	ldrh	r3, [r7, #22]
 8001978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800197c:	d902      	bls.n	8001984 <loopback_udps+0x4c>
 800197e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001982:	82fb      	strh	r3, [r7, #22]
            ret = recvfrom(sn, buf, size, destip, (uint16_t*)&destport);
 8001984:	f107 010c 	add.w	r1, r7, #12
 8001988:	8afa      	ldrh	r2, [r7, #22]
 800198a:	79f8      	ldrb	r0, [r7, #7]
 800198c:	f107 030a 	add.w	r3, r7, #10
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	460b      	mov	r3, r1
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	f001 f883 	bl	8002aa0 <recvfrom>
 800199a:	6138      	str	r0, [r7, #16]
            if(ret <= 0)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dc07      	bgt.n	80019b2 <loopback_udps+0x7a>
            {
#ifdef _LOOPBACK_DEBUG_
               printf("%d: recvfrom error. %ld\r\n",sn,ret);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4825      	ldr	r0, [pc, #148]	; (8001a40 <loopback_udps+0x108>)
 80019aa:	f004 fbe9 	bl	8006180 <iprintf>
#endif
               return ret;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	e042      	b.n	8001a38 <loopback_udps+0x100>
            }
            size = (uint16_t) ret;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	82fb      	strh	r3, [r7, #22]
            sentsize = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 80019ba:	e01f      	b.n	80019fc <loopback_udps+0xc4>
            {
               ret = sendto(sn, buf+sentsize, size-sentsize, destip, destport);
 80019bc:	8abb      	ldrh	r3, [r7, #20]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	18d1      	adds	r1, r2, r3
 80019c2:	8afa      	ldrh	r2, [r7, #22]
 80019c4:	8abb      	ldrh	r3, [r7, #20]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	f107 040c 	add.w	r4, r7, #12
 80019d0:	79f8      	ldrb	r0, [r7, #7]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4623      	mov	r3, r4
 80019d6:	f000 ff2d 	bl	8002834 <sendto>
 80019da:	6138      	str	r0, [r7, #16]
               if(ret < 0)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da07      	bge.n	80019f2 <loopback_udps+0xba>
               {
#ifdef _LOOPBACK_DEBUG_
                  printf("%d: sendto error. %ld\r\n",sn,ret);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4816      	ldr	r0, [pc, #88]	; (8001a44 <loopback_udps+0x10c>)
 80019ea:	f004 fbc9 	bl	8006180 <iprintf>
#endif
                  return ret;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	e022      	b.n	8001a38 <loopback_udps+0x100>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	8abb      	ldrh	r3, [r7, #20]
 80019f8:	4413      	add	r3, r2
 80019fa:	82bb      	strh	r3, [r7, #20]
            while(sentsize != size)
 80019fc:	8aba      	ldrh	r2, [r7, #20]
 80019fe:	8afb      	ldrh	r3, [r7, #22]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1db      	bne.n	80019bc <loopback_udps+0x84>
            }
         }
         break;
 8001a04:	e016      	b.n	8001a34 <loopback_udps+0xfc>
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:UDP loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_UDP, port, 0x00)) != sn)
 8001a06:	88ba      	ldrh	r2, [r7, #4]
 8001a08:	79f8      	ldrb	r0, [r7, #7]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	f000 fb0d 	bl	800202c <socket>
 8001a12:	4603      	mov	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <loopback_udps+0xea>
            return ret;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	e00a      	b.n	8001a38 <loopback_udps+0x100>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Opened, UDP loopback, port [%d]\r\n", sn, port);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	88ba      	ldrh	r2, [r7, #4]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <loopback_udps+0x110>)
 8001a2a:	f004 fba9 	bl	8006180 <iprintf>
#endif
         break;
 8001a2e:	e002      	b.n	8001a36 <loopback_udps+0xfe>
      default :
         break;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <loopback_udps+0xfe>
         break;
 8001a34:	bf00      	nop
   }
   return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	080071ac 	.word	0x080071ac
 8001a44:	080071c8 	.word	0x080071c8
 8001a48:	080071e0 	.word	0x080071e0

08001a4c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <WIZCHIP_READ+0x24>
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d114      	bne.n	8001a9a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	0c12      	lsrs	r2, r2, #16
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	0a12      	lsrs	r2, r2, #8
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	4610      	mov	r0, r2
 8001a96:	4798      	blx	r3
 8001a98:	e011      	b.n	8001abe <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f107 020c 	add.w	r2, r7, #12
 8001ab8:	2103      	movs	r1, #3
 8001aba:	4610      	mov	r0, r2
 8001abc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4798      	blx	r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <WIZCHIP_READ+0x94>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	4798      	blx	r3
   return ret;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000020 	.word	0x20000020

08001ae4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d119      	bne.n	8001b40 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	0c12      	lsrs	r2, r2, #16
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	4610      	mov	r0, r2
 8001b18:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	0a12      	lsrs	r2, r2, #8
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	4610      	mov	r0, r2
 8001b26:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	4610      	mov	r0, r2
 8001b32:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4798      	blx	r3
 8001b3e:	e013      	b.n	8001b68 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f107 020c 	add.w	r2, r7, #12
 8001b62:	2104      	movs	r1, #4
 8001b64:	4610      	mov	r0, r2
 8001b66:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001b6e:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <WIZCHIP_WRITE+0x98>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	4798      	blx	r3
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000020 	.word	0x20000020

08001b80 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <WIZCHIP_READ_BUF+0x2a>
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d126      	bne.n	8001bf8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	0c12      	lsrs	r2, r2, #16
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	0a12      	lsrs	r2, r2, #8
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	82fb      	strh	r3, [r7, #22]
 8001bd6:	e00a      	b.n	8001bee <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	8afa      	ldrh	r2, [r7, #22]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	188c      	adds	r4, r1, r2
 8001be2:	4798      	blx	r3
 8001be4:	4603      	mov	r3, r0
 8001be6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001be8:	8afb      	ldrh	r3, [r7, #22]
 8001bea:	3301      	adds	r3, #1
 8001bec:	82fb      	strh	r3, [r7, #22]
 8001bee:	8afa      	ldrh	r2, [r7, #22]
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3f0      	bcc.n	8001bd8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001bf6:	e017      	b.n	8001c28 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f107 0210 	add.w	r2, r7, #16
 8001c16:	2103      	movs	r1, #3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	4611      	mov	r1, r2
 8001c24:	68b8      	ldr	r0, [r7, #8]
 8001c26:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c2e:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <WIZCHIP_READ_BUF+0xbc>)
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	4798      	blx	r3
}
 8001c34:	bf00      	nop
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	20000020 	.word	0x20000020

08001c40 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d126      	bne.n	8001cb8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	0c12      	lsrs	r2, r2, #16
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	4610      	mov	r0, r2
 8001c76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	0a12      	lsrs	r2, r2, #8
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4610      	mov	r0, r2
 8001c84:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	82fb      	strh	r3, [r7, #22]
 8001c96:	e00a      	b.n	8001cae <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	8afa      	ldrh	r2, [r7, #22]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	440a      	add	r2, r1
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001ca8:	8afb      	ldrh	r3, [r7, #22]
 8001caa:	3301      	adds	r3, #1
 8001cac:	82fb      	strh	r3, [r7, #22]
 8001cae:	8afa      	ldrh	r2, [r7, #22]
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d3f0      	bcc.n	8001c98 <WIZCHIP_WRITE_BUF+0x58>
 8001cb6:	e017      	b.n	8001ce8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	0c1b      	lsrs	r3, r3, #16
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	f107 0210 	add.w	r2, r7, #16
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	68b8      	ldr	r0, [r7, #8]
 8001ce6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001cee:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <WIZCHIP_WRITE_BUF+0xbc>)
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	4798      	blx	r3
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000020 	.word	0x20000020

08001d00 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	81fb      	strh	r3, [r7, #14]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	3301      	adds	r3, #1
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fe94 	bl	8001a4c <WIZCHIP_READ>
 8001d24:	4603      	mov	r3, r0
 8001d26:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d28:	89bb      	ldrh	r3, [r7, #12]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	b29c      	uxth	r4, r3
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	3301      	adds	r3, #1
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe86 	bl	8001a4c <WIZCHIP_READ>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4423      	add	r3, r4
 8001d46:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001d48:	89bb      	ldrh	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01a      	beq.n	8001d84 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	3301      	adds	r3, #1
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fe76 	bl	8001a4c <WIZCHIP_READ>
 8001d60:	4603      	mov	r3, r0
 8001d62:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b29c      	uxth	r4, r3
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3301      	adds	r3, #1
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fe68 	bl	8001a4c <WIZCHIP_READ>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4423      	add	r3, r4
 8001d82:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001d84:	89fa      	ldrh	r2, [r7, #14]
 8001d86:	89bb      	ldrh	r3, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1c2      	bne.n	8001d12 <getSn_TX_FSR+0x12>
   return val;
 8001d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}

08001d96 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001d96:	b590      	push	{r4, r7, lr}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	81fb      	strh	r3, [r7, #14]
 8001da4:	2300      	movs	r3, #0
 8001da6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3301      	adds	r3, #1
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fe49 	bl	8001a4c <WIZCHIP_READ>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001dbe:	89bb      	ldrh	r3, [r7, #12]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b29c      	uxth	r4, r3
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3301      	adds	r3, #1
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fe3b 	bl	8001a4c <WIZCHIP_READ>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	4423      	add	r3, r4
 8001ddc:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001dde:	89bb      	ldrh	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01a      	beq.n	8001e1a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3301      	adds	r3, #1
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fe2b 	bl	8001a4c <WIZCHIP_READ>
 8001df6:	4603      	mov	r3, r0
 8001df8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b29c      	uxth	r4, r3
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	3301      	adds	r3, #1
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe1d 	bl	8001a4c <WIZCHIP_READ>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4423      	add	r3, r4
 8001e18:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001e1a:	89fa      	ldrh	r2, [r7, #14]
 8001e1c:	89bb      	ldrh	r3, [r7, #12]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d1c2      	bne.n	8001da8 <getSn_RX_RSR+0x12>
   return val;
 8001e22:	89fb      	ldrh	r3, [r7, #14]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}

08001e2c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001e44:	88bb      	ldrh	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d048      	beq.n	8001edc <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3301      	adds	r3, #1
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fdf8 	bl	8001a4c <WIZCHIP_READ>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	b29c      	uxth	r4, r3
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	3301      	adds	r3, #1
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fdeb 	bl	8001a4c <WIZCHIP_READ>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4423      	add	r3, r4
 8001e7c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001e7e:	89fb      	ldrh	r3, [r7, #14]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	79fa      	ldrb	r2, [r7, #7]
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	3202      	adds	r2, #2
 8001e88:	00d2      	lsls	r2, r2, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001e8e:	88bb      	ldrh	r3, [r7, #4]
 8001e90:	461a      	mov	r2, r3
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	68b8      	ldr	r0, [r7, #8]
 8001e96:	f7ff fed3 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001e9a:	89fa      	ldrh	r2, [r7, #14]
 8001e9c:	88bb      	ldrh	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001eae:	461a      	mov	r2, r3
 8001eb0:	89fb      	ldrh	r3, [r7, #14]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f7ff fe12 	bl	8001ae4 <WIZCHIP_WRITE>
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f7ff fe05 	bl	8001ae4 <WIZCHIP_WRITE>
 8001eda:	e000      	b.n	8001ede <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001edc:	bf00      	nop
}
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}

08001ee4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001efc:	88bb      	ldrh	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d048      	beq.n	8001f94 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	3301      	adds	r3, #1
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fd9c 	bl	8001a4c <WIZCHIP_READ>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b29c      	uxth	r4, r3
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3301      	adds	r3, #1
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fd8f 	bl	8001a4c <WIZCHIP_READ>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4423      	add	r3, r4
 8001f34:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	3203      	adds	r2, #3
 8001f40:	00d2      	lsls	r2, r2, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6839      	ldr	r1, [r7, #0]
 8001f4c:	68b8      	ldr	r0, [r7, #8]
 8001f4e:	f7ff fe17 	bl	8001b80 <WIZCHIP_READ_BUF>
   ptr += len;
 8001f52:	89fa      	ldrh	r2, [r7, #14]
 8001f54:	88bb      	ldrh	r3, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	3301      	adds	r3, #1
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001f66:	461a      	mov	r2, r3
 8001f68:	89fb      	ldrh	r3, [r7, #14]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f7ff fdb6 	bl	8001ae4 <WIZCHIP_WRITE>
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001f84:	461a      	mov	r2, r3
 8001f86:	89fb      	ldrh	r3, [r7, #14]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7ff fda9 	bl	8001ae4 <WIZCHIP_WRITE>
 8001f92:	e000      	b.n	8001f96 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001f94:	bf00      	nop
}
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd90      	pop	{r4, r7, pc}

08001f9c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fd45 	bl	8001a4c <WIZCHIP_READ>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b29c      	uxth	r4, r3
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3301      	adds	r3, #1
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fd38 	bl	8001a4c <WIZCHIP_READ>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4423      	add	r3, r4
 8001fe2:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8001fe4:	89fa      	ldrh	r2, [r7, #14]
 8001fe6:	88bb      	ldrh	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f7ff fd6d 	bl	8001ae4 <WIZCHIP_WRITE>
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	3301      	adds	r3, #1
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002016:	461a      	mov	r2, r3
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7ff fd60 	bl	8001ae4 <WIZCHIP_WRITE>
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}

0800202c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	4611      	mov	r1, r2
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	4603      	mov	r3, r0
 8002040:	71bb      	strb	r3, [r7, #6]
 8002042:	460b      	mov	r3, r1
 8002044:	80bb      	strh	r3, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d902      	bls.n	8002056 <socket+0x2a>
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
 8002054:	e0f2      	b.n	800223c <socket+0x210>
	switch(protocol)
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <socket+0x3c>
 800205c:	2b00      	cmp	r3, #0
 800205e:	dd11      	ble.n	8002084 <socket+0x58>
 8002060:	3b02      	subs	r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d80e      	bhi.n	8002084 <socket+0x58>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002066:	e010      	b.n	800208a <socket+0x5e>
            getSIPR((uint8_t*)&taddr);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2204      	movs	r2, #4
 800206e:	4619      	mov	r1, r3
 8002070:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002074:	f7ff fd84 	bl	8001b80 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <socket+0x5e>
 800207e:	f06f 0302 	mvn.w	r3, #2
 8002082:	e0db      	b.n	800223c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002084:	f06f 0304 	mvn.w	r3, #4
 8002088:	e0d8      	b.n	800223c <socket+0x210>
         break;
 800208a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <socket+0x70>
 8002096:	f06f 0305 	mvn.w	r3, #5
 800209a:	e0cf      	b.n	800223c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d025      	beq.n	80020ee <socket+0xc2>
	{
   	switch(protocol)
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d002      	beq.n	80020ae <socket+0x82>
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d008      	beq.n	80020be <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80020ac:	e024      	b.n	80020f8 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11c      	bne.n	80020f2 <socket+0xc6>
 80020b8:	f06f 0305 	mvn.w	r3, #5
 80020bc:	e0be      	b.n	800223c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80020c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db02      	blt.n	80020d6 <socket+0xaa>
 80020d0:	f06f 0305 	mvn.w	r3, #5
 80020d4:	e0b2      	b.n	800223c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80020e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db06      	blt.n	80020f6 <socket+0xca>
 80020e8:	f06f 0305 	mvn.w	r3, #5
 80020ec:	e0a6      	b.n	800223c <socket+0x210>
   	}
   }
 80020ee:	bf00      	nop
 80020f0:	e002      	b.n	80020f8 <socket+0xcc>
   	      break;
 80020f2:	bf00      	nop
 80020f4:	e000      	b.n	80020f8 <socket+0xcc>
   	      break;
 80020f6:	bf00      	nop
	close(sn);
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f8ac 	bl	8002258 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	3301      	adds	r3, #1
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4618      	mov	r0, r3
 800210a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210e:	f023 030f 	bic.w	r3, r3, #15
 8002112:	b25a      	sxtb	r2, r3
 8002114:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002118:	4313      	orrs	r3, r2
 800211a:	b25b      	sxtb	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4619      	mov	r1, r3
 8002120:	f7ff fce0 	bl	8001ae4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d110      	bne.n	800214c <socket+0x120>
	{
	   port = sock_any_port++;
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <socket+0x218>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	b291      	uxth	r1, r2
 8002132:	4a44      	ldr	r2, [pc, #272]	; (8002244 <socket+0x218>)
 8002134:	8011      	strh	r1, [r2, #0]
 8002136:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <socket+0x218>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <socket+0x120>
 8002144:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <socket+0x218>)
 8002146:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800214a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3301      	adds	r3, #1
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002158:	461a      	mov	r2, r3
 800215a:	88bb      	ldrh	r3, [r7, #4]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29b      	uxth	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7ff fcbd 	bl	8001ae4 <WIZCHIP_WRITE>
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3301      	adds	r3, #1
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f7ff fcb0 	bl	8001ae4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3301      	adds	r3, #1
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fca6 	bl	8001ae4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002198:	bf00      	nop
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	3301      	adds	r3, #1
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fc50 	bl	8001a4c <WIZCHIP_READ>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f3      	bne.n	800219a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2201      	movs	r2, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	b21a      	sxth	r2, r3
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <socket+0x21c>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	4013      	ands	r3, r2
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <socket+0x21c>)
 80021ce:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	b21a      	sxth	r2, r3
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <socket+0x21c>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <socket+0x21c>)
 80021ec:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	2201      	movs	r2, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <socket+0x220>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4013      	ands	r3, r2
 8002204:	b21b      	sxth	r3, r3
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <socket+0x220>)
 800220a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <socket+0x224>)
 8002210:	2100      	movs	r1, #0
 8002212:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <socket+0x228>)
 800221a:	2100      	movs	r1, #0
 800221c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800221e:	bf00      	nop
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3301      	adds	r3, #1
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fc0d 	bl	8001a4c <WIZCHIP_READ>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f3      	beq.n	8002220 <socket+0x1f4>
   return (int8_t)sn;
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	2000001c 	.word	0x2000001c
 8002248:	200000d8 	.word	0x200000d8
 800224c:	200000da 	.word	0x200000da
 8002250:	200000dc 	.word	0x200000dc
 8002254:	200000ec 	.word	0x200000ec

08002258 <close>:

int8_t close(uint8_t sn)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d902      	bls.n	800226e <close+0x16>
 8002268:	f04f 33ff 	mov.w	r3, #4294967295
 800226c:	e055      	b.n	800231a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };
#endif
	setSn_CR(sn,Sn_CR_CLOSE);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	3301      	adds	r3, #1
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800227a:	2110      	movs	r1, #16
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc31 	bl	8001ae4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002282:	bf00      	nop
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	3301      	adds	r3, #1
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbdb 	bl	8001a4c <WIZCHIP_READ>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f3      	bne.n	8002284 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	3301      	adds	r3, #1
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022a8:	211f      	movs	r1, #31
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fc1a 	bl	8001ae4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2201      	movs	r2, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	b21a      	sxth	r2, r3
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <close+0xcc>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	4013      	ands	r3, r2
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <close+0xcc>)
 80022cc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <close+0xd0>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4013      	ands	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <close+0xd0>)
 80022ea:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4a0f      	ldr	r2, [pc, #60]	; (800232c <close+0xd4>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <close+0xd8>)
 80022fa:	2100      	movs	r1, #0
 80022fc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80022fe:	bf00      	nop
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	3301      	adds	r3, #1
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fb9d 	bl	8001a4c <WIZCHIP_READ>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f3      	bne.n	8002300 <close+0xa8>
	return SOCK_OK;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200000d8 	.word	0x200000d8
 8002328:	200000da 	.word	0x200000da
 800232c:	200000dc 	.word	0x200000dc
 8002330:	200000ec 	.word	0x200000ec

08002334 <listen>:

int8_t listen(uint8_t sn)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b08      	cmp	r3, #8
 8002342:	d902      	bls.n	800234a <listen+0x16>
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	e049      	b.n	80023de <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3301      	adds	r3, #1
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fb7a 	bl	8001a4c <WIZCHIP_READ>
 8002358:	4603      	mov	r3, r0
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	2b01      	cmp	r3, #1
 8002360:	d002      	beq.n	8002368 <listen+0x34>
 8002362:	f06f 0304 	mvn.w	r3, #4
 8002366:	e03a      	b.n	80023de <listen+0xaa>
	CHECK_SOCKINIT();
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3301      	adds	r3, #1
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fb69 	bl	8001a4c <WIZCHIP_READ>
 800237a:	4603      	mov	r3, r0
 800237c:	2b13      	cmp	r3, #19
 800237e:	d002      	beq.n	8002386 <listen+0x52>
 8002380:	f06f 0302 	mvn.w	r3, #2
 8002384:	e02b      	b.n	80023de <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	3301      	adds	r3, #1
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fba5 	bl	8001ae4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800239a:	bf00      	nop
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3301      	adds	r3, #1
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fb4f 	bl	8001a4c <WIZCHIP_READ>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f3      	bne.n	800239c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80023b4:	e006      	b.n	80023c4 <listen+0x90>
   {
         close(sn);
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff4d 	bl	8002258 <close>
         return SOCKERR_SOCKCLOSED;
 80023be:	f06f 0303 	mvn.w	r3, #3
 80023c2:	e00c      	b.n	80023de <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	3301      	adds	r3, #1
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fb3b 	bl	8001a4c <WIZCHIP_READ>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b14      	cmp	r3, #20
 80023da:	d1ec      	bne.n	80023b6 <listen+0x82>
   }
   return SOCK_OK;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <disconnect>:

   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d902      	bls.n	80023fe <disconnect+0x16>
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	e062      	b.n	80024c4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	3301      	adds	r3, #1
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fb20 	bl	8001a4c <WIZCHIP_READ>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	2b01      	cmp	r3, #1
 8002414:	d002      	beq.n	800241c <disconnect+0x34>
 8002416:	f06f 0304 	mvn.w	r3, #4
 800241a:	e053      	b.n	80024c4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	3301      	adds	r3, #1
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002428:	2108      	movs	r1, #8
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fb5a 	bl	8001ae4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002430:	bf00      	nop
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	3301      	adds	r3, #1
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb04 	bl	8001a4c <WIZCHIP_READ>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f3      	bne.n	8002432 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2201      	movs	r2, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	b21b      	sxth	r3, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	b21a      	sxth	r2, r3
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <disconnect+0xe4>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4013      	ands	r3, r2
 8002460:	b21b      	sxth	r3, r3
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <disconnect+0xe4>)
 8002466:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <disconnect+0xe8>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	fa42 f303 	asr.w	r3, r2, r3
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d016      	beq.n	80024aa <disconnect+0xc2>
 800247c:	2300      	movs	r3, #0
 800247e:	e021      	b.n	80024c4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	3301      	adds	r3, #1
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fadd 	bl	8001a4c <WIZCHIP_READ>
 8002492:	4603      	mov	r3, r0
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <disconnect+0xc2>
	   {
	      close(sn);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff feda 	bl	8002258 <close>
	      return SOCKERR_TIMEOUT;
 80024a4:	f06f 030c 	mvn.w	r3, #12
 80024a8:	e00c      	b.n	80024c4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3301      	adds	r3, #1
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fac8 	bl	8001a4c <WIZCHIP_READ>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1de      	bne.n	8002480 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200000da 	.word	0x200000da
 80024d0:	200000d8 	.word	0x200000d8

080024d4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	81bb      	strh	r3, [r7, #12]

   CHECK_SOCKNUM();
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d902      	bls.n	80024f8 <send+0x24>
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e0de      	b.n	80026b6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	3301      	adds	r3, #1
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff faa3 	bl	8001a4c <WIZCHIP_READ>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2b01      	cmp	r3, #1
 800250e:	d002      	beq.n	8002516 <send+0x42>
 8002510:	f06f 0304 	mvn.w	r3, #4
 8002514:	e0cf      	b.n	80026b6 <send+0x1e2>
   CHECK_SOCKDATA();
 8002516:	88bb      	ldrh	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <send+0x4e>
 800251c:	f06f 030d 	mvn.w	r3, #13
 8002520:	e0c9      	b.n	80026b6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	3301      	adds	r3, #1
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fa8c 	bl	8001a4c <WIZCHIP_READ>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b17      	cmp	r3, #23
 800253c:	d005      	beq.n	800254a <send+0x76>
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b1c      	cmp	r3, #28
 8002542:	d002      	beq.n	800254a <send+0x76>
 8002544:	f06f 0306 	mvn.w	r3, #6
 8002548:	e0b5      	b.n	80026b6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <send+0x1ec>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	fa42 f303 	asr.w	r3, r2, r3
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d039      	beq.n	80025d2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3301      	adds	r3, #1
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fa6e 	bl	8001a4c <WIZCHIP_READ>
 8002570:	4603      	mov	r3, r0
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d019      	beq.n	80025b6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	3301      	adds	r3, #1
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800258e:	2110      	movs	r1, #16
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff faa7 	bl	8001ae4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2201      	movs	r2, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	b21b      	sxth	r3, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <send+0x1ec>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4013      	ands	r3, r2
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <send+0x1ec>)
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	e00d      	b.n	80025d2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <send+0xfa>
      {
         close(sn);
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fe48 	bl	8002258 <close>
         return SOCKERR_TIMEOUT;
 80025c8:	f06f 030c 	mvn.w	r3, #12
 80025cc:	e073      	b.n	80026b6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e071      	b.n	80026b6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	3301      	adds	r3, #1
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fa34 	bl	8001a4c <WIZCHIP_READ>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80025ec:	88ba      	ldrh	r2, [r7, #4]
 80025ee:	89bb      	ldrh	r3, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d901      	bls.n	80025f8 <send+0x124>
 80025f4:	89bb      	ldrh	r3, [r7, #12]
 80025f6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fb80 	bl	8001d00 <getSn_TX_FSR>
 8002600:	4603      	mov	r3, r0
 8002602:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	3301      	adds	r3, #1
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fa1b 	bl	8001a4c <WIZCHIP_READ>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b17      	cmp	r3, #23
 800261e:	d009      	beq.n	8002634 <send+0x160>
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b1c      	cmp	r3, #28
 8002624:	d006      	beq.n	8002634 <send+0x160>
      {
         close(sn);
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fe15 	bl	8002258 <close>
         return SOCKERR_SOCKSTATUS;
 800262e:	f06f 0306 	mvn.w	r3, #6
 8002632:	e040      	b.n	80026b6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <send+0x1f0>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	fa42 f303 	asr.w	r3, r2, r3
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <send+0x180>
 8002648:	88ba      	ldrh	r2, [r7, #4]
 800264a:	89bb      	ldrh	r3, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d901      	bls.n	8002654 <send+0x180>
 8002650:	2300      	movs	r3, #0
 8002652:	e030      	b.n	80026b6 <send+0x1e2>
      if(len <= freesize) break;
 8002654:	88ba      	ldrh	r2, [r7, #4]
 8002656:	89bb      	ldrh	r3, [r7, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	d900      	bls.n	800265e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800265c:	e7cc      	b.n	80025f8 <send+0x124>
      if(len <= freesize) break;
 800265e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002660:	88ba      	ldrh	r2, [r7, #4]
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fbe0 	bl	8001e2c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif

   setSn_CR(sn,Sn_CR_SEND);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3301      	adds	r3, #1
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002678:	2120      	movs	r1, #32
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fa32 	bl	8001ae4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002680:	bf00      	nop
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3301      	adds	r3, #1
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f9dc 	bl	8001a4c <WIZCHIP_READ>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f3      	bne.n	8002682 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2201      	movs	r2, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <send+0x1ec>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	4313      	orrs	r3, r2
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <send+0x1ec>)
 80026b2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80026b4:	88bb      	ldrh	r3, [r7, #4]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200000da 	.word	0x200000da
 80026c4:	200000d8 	.word	0x200000d8

080026c8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	4613      	mov	r3, r2
 80026d6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d902      	bls.n	80026ec <recv+0x24>
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	e09c      	b.n	8002826 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	3301      	adds	r3, #1
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f9a9 	bl	8001a4c <WIZCHIP_READ>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	2b01      	cmp	r3, #1
 8002702:	d002      	beq.n	800270a <recv+0x42>
 8002704:	f06f 0304 	mvn.w	r3, #4
 8002708:	e08d      	b.n	8002826 <recv+0x15e>
   CHECK_SOCKDATA();
 800270a:	88bb      	ldrh	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <recv+0x4e>
 8002710:	f06f 030d 	mvn.w	r3, #13
 8002714:	e087      	b.n	8002826 <recv+0x15e>

   recvsize = getSn_RxMAX(sn);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	3301      	adds	r3, #1
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f992 	bl	8001a4c <WIZCHIP_READ>
 8002728:	4603      	mov	r3, r0
 800272a:	b29b      	uxth	r3, r3
 800272c:	029b      	lsls	r3, r3, #10
 800272e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002730:	89ba      	ldrh	r2, [r7, #12]
 8002732:	88bb      	ldrh	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	d201      	bcs.n	800273c <recv+0x74>
 8002738:	89bb      	ldrh	r3, [r7, #12]
 800273a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fb29 	bl	8001d96 <getSn_RX_RSR>
 8002744:	4603      	mov	r3, r0
 8002746:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	3301      	adds	r3, #1
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f979 	bl	8001a4c <WIZCHIP_READ>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b17      	cmp	r3, #23
 8002762:	d026      	beq.n	80027b2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b1c      	cmp	r3, #28
 8002768:	d11c      	bne.n	80027a4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800276a:	89bb      	ldrh	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d133      	bne.n	80027d8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fac4 	bl	8001d00 <getSn_TX_FSR>
 8002778:	4603      	mov	r3, r0
 800277a:	461c      	mov	r4, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	3301      	adds	r3, #1
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f95f 	bl	8001a4c <WIZCHIP_READ>
 800278e:	4603      	mov	r3, r0
 8002790:	029b      	lsls	r3, r3, #10
 8002792:	429c      	cmp	r4, r3
 8002794:	d10d      	bne.n	80027b2 <recv+0xea>
               {
                  close(sn);
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fd5d 	bl	8002258 <close>
                  return SOCKERR_SOCKSTATUS;
 800279e:	f06f 0306 	mvn.w	r3, #6
 80027a2:	e040      	b.n	8002826 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fd56 	bl	8002258 <close>
               return SOCKERR_SOCKSTATUS;
 80027ac:	f06f 0306 	mvn.w	r3, #6
 80027b0:	e039      	b.n	8002826 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <recv+0x168>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	fa42 f303 	asr.w	r3, r2, r3
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <recv+0x108>
 80027c6:	89bb      	ldrh	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <recv+0x108>
 80027cc:	2300      	movs	r3, #0
 80027ce:	e02a      	b.n	8002826 <recv+0x15e>
         if(recvsize != 0) break;
 80027d0:	89bb      	ldrh	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80027d6:	e7b1      	b.n	800273c <recv+0x74>
               if(recvsize != 0) break;
 80027d8:	bf00      	nop
 80027da:	e000      	b.n	80027de <recv+0x116>
         if(recvsize != 0) break;
 80027dc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else
   if(recvsize < len) len = recvsize;
 80027de:	89ba      	ldrh	r2, [r7, #12]
 80027e0:	88bb      	ldrh	r3, [r7, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d201      	bcs.n	80027ea <recv+0x122>
 80027e6:	89bb      	ldrh	r3, [r7, #12]
 80027e8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80027ea:	88ba      	ldrh	r2, [r7, #4]
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fb77 	bl	8001ee4 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	3301      	adds	r3, #1
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f96d 	bl	8001ae4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800280a:	bf00      	nop
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3301      	adds	r3, #1
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f917 	bl	8001a4c <WIZCHIP_READ>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f3      	bne.n	800280c <recv+0x144>
#endif

   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002824:	88bb      	ldrh	r3, [r7, #4]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	bf00      	nop
 8002830:	200000d8 	.word	0x200000d8

08002834 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	4613      	mov	r3, r2
 8002844:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d902      	bls.n	800285a <sendto+0x26>
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
 8002858:	e11b      	b.n	8002a92 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3301      	adds	r3, #1
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f8f2 	bl	8001a4c <WIZCHIP_READ>
 8002868:	4603      	mov	r3, r0
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b02      	subs	r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d902      	bls.n	800287a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002874:	f06f 0304 	mvn.w	r3, #4
 8002878:	e10b      	b.n	8002a92 <sendto+0x25e>
         break;
 800287a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <sendto+0x54>
 8002882:	f06f 030d 	mvn.w	r3, #13
 8002886:	e104      	b.n	8002a92 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	3201      	adds	r2, #1
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	4413      	add	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	3202      	adds	r2, #2
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	3203      	adds	r2, #3
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10e      	bne.n	80028dc <sendto+0xa8>
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	3301      	adds	r3, #1
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f8c0 	bl	8001a4c <WIZCHIP_READ>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d002      	beq.n	80028dc <sendto+0xa8>
 80028d6:	f06f 030b 	mvn.w	r3, #11
 80028da:	e0da      	b.n	8002a92 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80028dc:	8c3b      	ldrh	r3, [r7, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <sendto+0xcc>
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3301      	adds	r3, #1
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f8ae 	bl	8001a4c <WIZCHIP_READ>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d002      	beq.n	8002900 <sendto+0xcc>
 80028fa:	f06f 030a 	mvn.w	r3, #10
 80028fe:	e0c8      	b.n	8002a92 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3301      	adds	r3, #1
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f89d 	bl	8001a4c <WIZCHIP_READ>
 8002912:	4603      	mov	r3, r0
 8002914:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002916:	7dfb      	ldrb	r3, [r7, #23]
 8002918:	2b42      	cmp	r3, #66	; 0x42
 800291a:	d008      	beq.n	800292e <sendto+0xfa>
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b22      	cmp	r3, #34	; 0x22
 8002920:	d005      	beq.n	800292e <sendto+0xfa>
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b32      	cmp	r3, #50	; 0x32
 8002926:	d002      	beq.n	800292e <sendto+0xfa>
 8002928:	f06f 0306 	mvn.w	r3, #6
 800292c:	e0b1      	b.n	8002a92 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif

   setSn_DIPR(sn,addr);
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	3301      	adds	r3, #1
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800293a:	2204      	movs	r2, #4
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f97e 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	3301      	adds	r3, #1
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002950:	461a      	mov	r2, r3
 8002952:	8c3b      	ldrh	r3, [r7, #32]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	b29b      	uxth	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f7ff f8c1 	bl	8001ae4 <WIZCHIP_WRITE>
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3301      	adds	r3, #1
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800296e:	461a      	mov	r2, r3
 8002970:	8c3b      	ldrh	r3, [r7, #32]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f7ff f8b4 	bl	8001ae4 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3301      	adds	r3, #1
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f85f 	bl	8001a4c <WIZCHIP_READ>
 800298e:	4603      	mov	r3, r0
 8002990:	b29b      	uxth	r3, r3
 8002992:	029b      	lsls	r3, r3, #10
 8002994:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002996:	89ba      	ldrh	r2, [r7, #12]
 8002998:	8abb      	ldrh	r3, [r7, #20]
 800299a:	429a      	cmp	r2, r3
 800299c:	d901      	bls.n	80029a2 <sendto+0x16e>
 800299e:	8abb      	ldrh	r3, [r7, #20]
 80029a0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f9ab 	bl	8001d00 <getSn_TX_FSR>
 80029aa:	4603      	mov	r3, r0
 80029ac:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3301      	adds	r3, #1
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f846 	bl	8001a4c <WIZCHIP_READ>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <sendto+0x198>
 80029c6:	f06f 0303 	mvn.w	r3, #3
 80029ca:	e062      	b.n	8002a92 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80029cc:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <sendto+0x268>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	fa42 f303 	asr.w	r3, r2, r3
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <sendto+0x1b8>
 80029e0:	89ba      	ldrh	r2, [r7, #12]
 80029e2:	8abb      	ldrh	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d901      	bls.n	80029ec <sendto+0x1b8>
 80029e8:	2300      	movs	r3, #0
 80029ea:	e052      	b.n	8002a92 <sendto+0x25e>
      if(len <= freesize) break;
 80029ec:	89ba      	ldrh	r2, [r7, #12]
 80029ee:	8abb      	ldrh	r3, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d900      	bls.n	80029f6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80029f4:	e7d5      	b.n	80029a2 <sendto+0x16e>
      if(len <= freesize) break;
 80029f6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80029f8:	89ba      	ldrh	r2, [r7, #12]
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fa14 	bl	8001e2c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//
	setSn_CR(sn,Sn_CR_SEND);
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	3301      	adds	r3, #1
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a10:	2120      	movs	r1, #32
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f866 	bl	8001ae4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002a18:	bf00      	nop
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	3301      	adds	r3, #1
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f810 	bl	8001a4c <WIZCHIP_READ>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f3      	bne.n	8002a1a <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3301      	adds	r3, #1
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f804 	bl	8001a4c <WIZCHIP_READ>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a62:	2110      	movs	r1, #16
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f83d 	bl	8001ae4 <WIZCHIP_WRITE>
         break;
 8002a6a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002a6c:	89bb      	ldrh	r3, [r7, #12]
 8002a6e:	e010      	b.n	8002a92 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0db      	beq.n	8002a32 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	3301      	adds	r3, #1
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a86:	2108      	movs	r1, #8
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f82b 	bl	8001ae4 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002a8e:	f06f 030c 	mvn.w	r3, #12
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200000d8 	.word	0x200000d8

08002aa0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	81bb      	strh	r3, [r7, #12]
#else
   uint8_t  mr;
#endif
//
   uint8_t  head[8];
	uint16_t pack_len=0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d902      	bls.n	8002ac2 <recvfrom+0x22>
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	e1d4      	b.n	8002e6c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe ffbe 	bl	8001a4c <WIZCHIP_READ>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	777b      	strb	r3, [r7, #29]
 8002ad4:	7f7b      	ldrb	r3, [r7, #29]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3b02      	subs	r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d902      	bls.n	8002ae6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002ae0:	f06f 0304 	mvn.w	r3, #4
 8002ae4:	e1c2      	b.n	8002e6c <recvfrom+0x3cc>
         break;
 8002ae6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002ae8:	89bb      	ldrh	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <recvfrom+0x54>
 8002aee:	f06f 030d 	mvn.w	r3, #13
 8002af2:	e1bb      	b.n	8002e6c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	4a88      	ldr	r2, [pc, #544]	; (8002d18 <recvfrom+0x278>)
 8002af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d128      	bne.n	8002b52 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f947 	bl	8001d96 <getSn_RX_RSR>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	3301      	adds	r3, #1
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe ff97 	bl	8001a4c <WIZCHIP_READ>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <recvfrom+0x8a>
 8002b24:	f06f 0303 	mvn.w	r3, #3
 8002b28:	e1a0      	b.n	8002e6c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002b2a:	4b7c      	ldr	r3, [pc, #496]	; (8002d1c <recvfrom+0x27c>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	fa42 f303 	asr.w	r3, r2, r3
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <recvfrom+0xa8>
 8002b3e:	8bfb      	ldrh	r3, [r7, #30]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <recvfrom+0xa8>
 8002b44:	2300      	movs	r3, #0
 8002b46:	e191      	b.n	8002e6c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8002b48:	8bfb      	ldrh	r3, [r7, #30]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d100      	bne.n	8002b50 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8002b4e:	e7d7      	b.n	8002b00 <recvfrom+0x60>
         if(pack_len != 0) break;
 8002b50:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002b52:	7f7b      	ldrb	r3, [r7, #29]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d079      	beq.n	8002c50 <recvfrom+0x1b0>
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	f300 8142 	bgt.w	8002de6 <recvfrom+0x346>
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d003      	beq.n	8002b6e <recvfrom+0xce>
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	f000 80dc 	beq.w	8002d24 <recvfrom+0x284>
 8002b6c:	e13b      	b.n	8002de6 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	4a69      	ldr	r2, [pc, #420]	; (8002d18 <recvfrom+0x278>)
 8002b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d152      	bne.n	8002c20 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8002b7a:	f107 0114 	add.w	r1, r7, #20
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2208      	movs	r2, #8
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f9ae 	bl	8001ee4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b94:	2140      	movs	r1, #64	; 0x40
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe ffa4 	bl	8001ae4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002b9c:	bf00      	nop
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe ff4e 	bl	8001a4c <WIZCHIP_READ>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f3      	bne.n	8002b9e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8002bb6:	7d3a      	ldrb	r2, [r7, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	7d7a      	ldrb	r2, [r7, #21]
 8002bc2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	7dba      	ldrb	r2, [r7, #22]
 8002bca:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3303      	adds	r3, #3
 8002bd0:	7dfa      	ldrb	r2, [r7, #23]
 8002bd2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8002bd4:	7e3b      	ldrb	r3, [r7, #24]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	7e7b      	ldrb	r3, [r7, #25]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002bf0:	7eba      	ldrb	r2, [r7, #26]
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	b291      	uxth	r1, r2
 8002bf6:	4a48      	ldr	r2, [pc, #288]	; (8002d18 <recvfrom+0x278>)
 8002bf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <recvfrom+0x278>)
 8002c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	b299      	uxth	r1, r3
 8002c08:	7efb      	ldrb	r3, [r7, #27]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	440a      	add	r2, r1
 8002c10:	b291      	uxth	r1, r2
 8002c12:	4a41      	ldr	r2, [pc, #260]	; (8002d18 <recvfrom+0x278>)
 8002c14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	4a41      	ldr	r2, [pc, #260]	; (8002d20 <recvfrom+0x280>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <recvfrom+0x278>)
 8002c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c28:	89ba      	ldrh	r2, [r7, #12]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d202      	bcs.n	8002c34 <recvfrom+0x194>
 8002c2e:	89bb      	ldrh	r3, [r7, #12]
 8002c30:	83fb      	strh	r3, [r7, #30]
 8002c32:	e004      	b.n	8002c3e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <recvfrom+0x278>)
 8002c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c3c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8002c3e:	8bfb      	ldrh	r3, [r7, #30]
 8002c40:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002c42:	8bfa      	ldrh	r2, [r7, #30]
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f94b 	bl	8001ee4 <wiz_recv_data>
			break;
 8002c4e:	e0d6      	b.n	8002dfe <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <recvfrom+0x278>)
 8002c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d146      	bne.n	8002cea <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8002c5c:	f107 0114 	add.w	r1, r7, #20
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2202      	movs	r2, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f93d 	bl	8001ee4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	3301      	adds	r3, #1
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe ff33 	bl	8001ae4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002c7e:	bf00      	nop
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3301      	adds	r3, #1
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fedd 	bl	8001a4c <WIZCHIP_READ>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f3      	bne.n	8002c80 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8002c98:	7d3a      	ldrb	r2, [r7, #20]
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	b291      	uxth	r1, r2
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <recvfrom+0x278>)
 8002ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <recvfrom+0x278>)
 8002ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	7d7b      	ldrb	r3, [r7, #21]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	3a02      	subs	r2, #2
 8002cbc:	b291      	uxth	r1, r2
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <recvfrom+0x278>)
 8002cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <recvfrom+0x278>)
 8002cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ccc:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d906      	bls.n	8002ce2 <recvfrom+0x242>
   			{
   			   close(sn);
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fabe 	bl	8002258 <close>
   			   return SOCKFATAL_PACKLEN;
 8002cdc:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8002ce0:	e0c4      	b.n	8002e6c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <recvfrom+0x280>)
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <recvfrom+0x278>)
 8002cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf2:	89ba      	ldrh	r2, [r7, #12]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d202      	bcs.n	8002cfe <recvfrom+0x25e>
 8002cf8:	89bb      	ldrh	r3, [r7, #12]
 8002cfa:	83fb      	strh	r3, [r7, #30]
 8002cfc:	e004      	b.n	8002d08 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <recvfrom+0x278>)
 8002d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d06:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8002d08:	8bfa      	ldrh	r2, [r7, #30]
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f8e8 	bl	8001ee4 <wiz_recv_data>
		   break;
 8002d14:	e073      	b.n	8002dfe <recvfrom+0x35e>
 8002d16:	bf00      	nop
 8002d18:	200000dc 	.word	0x200000dc
 8002d1c:	200000d8 	.word	0x200000d8
 8002d20:	200000ec 	.word	0x200000ec
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	4a53      	ldr	r2, [pc, #332]	; (8002e74 <recvfrom+0x3d4>)
 8002d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d144      	bne.n	8002dba <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8002d30:	f107 0114 	add.w	r1, r7, #20
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2206      	movs	r2, #6
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f8d3 	bl	8001ee4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3301      	adds	r3, #1
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fec9 	bl	8001ae4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002d52:	bf00      	nop
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3301      	adds	r3, #1
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fe73 	bl	8001a4c <WIZCHIP_READ>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f3      	bne.n	8002d54 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8002d6c:	7d3a      	ldrb	r2, [r7, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3301      	adds	r3, #1
 8002d76:	7d7a      	ldrb	r2, [r7, #21]
 8002d78:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	7dba      	ldrb	r2, [r7, #22]
 8002d80:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3303      	adds	r3, #3
 8002d86:	7dfa      	ldrb	r2, [r7, #23]
 8002d88:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8002d8a:	7e3a      	ldrb	r2, [r7, #24]
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	b291      	uxth	r1, r2
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <recvfrom+0x3d4>)
 8002d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <recvfrom+0x3d4>)
 8002d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	b299      	uxth	r1, r3
 8002da2:	7e7b      	ldrb	r3, [r7, #25]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	440a      	add	r2, r1
 8002daa:	b291      	uxth	r1, r2
 8002dac:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <recvfrom+0x3d4>)
 8002dae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	4a30      	ldr	r2, [pc, #192]	; (8002e78 <recvfrom+0x3d8>)
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	4a2d      	ldr	r2, [pc, #180]	; (8002e74 <recvfrom+0x3d4>)
 8002dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dc2:	89ba      	ldrh	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d202      	bcs.n	8002dce <recvfrom+0x32e>
 8002dc8:	89bb      	ldrh	r3, [r7, #12]
 8002dca:	83fb      	strh	r3, [r7, #30]
 8002dcc:	e004      	b.n	8002dd8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <recvfrom+0x3d4>)
 8002dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dd6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002dd8:	8bfa      	ldrh	r2, [r7, #30]
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f880 	bl	8001ee4 <wiz_recv_data>
			break;
 8002de4:	e00b      	b.n	8002dfe <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8002de6:	8bfa      	ldrh	r2, [r7, #30]
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff f8d5 	bl	8001f9c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	491f      	ldr	r1, [pc, #124]	; (8002e74 <recvfrom+0x3d4>)
 8002df6:	8bfa      	ldrh	r2, [r7, #30]
 8002df8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002dfc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	3301      	adds	r3, #1
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e0a:	2140      	movs	r1, #64	; 0x40
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe fe69 	bl	8001ae4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002e12:	bf00      	nop
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	3301      	adds	r3, #1
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe fe13 	bl	8001a4c <WIZCHIP_READ>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f3      	bne.n	8002e14 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <recvfrom+0x3d4>)
 8002e30:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	8bfa      	ldrh	r2, [r7, #30]
 8002e38:	1a8a      	subs	r2, r1, r2
 8002e3a:	b291      	uxth	r1, r2
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <recvfrom+0x3d4>)
 8002e3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 :
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <recvfrom+0x3d4>)
 8002e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <recvfrom+0x3d8>)
 8002e52:	5cd2      	ldrb	r2, [r2, r3]
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	b2d1      	uxtb	r1, r2
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <recvfrom+0x3d8>)
 8002e5e:	54d1      	strb	r1, [r2, r3]
 8002e60:	e003      	b.n	8002e6a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <recvfrom+0x3d8>)
 8002e66:	2100      	movs	r1, #0
 8002e68:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8002e6a:	8bfb      	ldrh	r3, [r7, #30]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	200000dc 	.word	0x200000dc
 8002e78:	200000ec 	.word	0x200000ec

08002e7c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	70fb      	strb	r3, [r7, #3]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	807b      	strh	r3, [r7, #2]
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	807b      	strh	r3, [r7, #2]
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <reg_wizchip_cs_cbfunc+0x16>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <reg_wizchip_cs_cbfunc+0x40>)
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <reg_wizchip_cs_cbfunc+0x44>)
 8002f5e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <reg_wizchip_cs_cbfunc+0x40>)
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <reg_wizchip_cs_cbfunc+0x48>)
 8002f64:	619a      	str	r2, [r3, #24]
 8002f66:	e006      	b.n	8002f76 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <reg_wizchip_cs_cbfunc+0x40>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <reg_wizchip_cs_cbfunc+0x40>)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6193      	str	r3, [r2, #24]
   }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000020 	.word	0x20000020
 8002f88:	08002e99 	.word	0x08002e99
 8002f8c:	08002ea7 	.word	0x08002ea7

08002f90 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f9a:	bf00      	nop
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <reg_wizchip_spi_cbfunc+0x4c>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f9      	beq.n	8002f9c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <reg_wizchip_spi_cbfunc+0x24>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <reg_wizchip_spi_cbfunc+0x4c>)
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <reg_wizchip_spi_cbfunc+0x50>)
 8002fb8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <reg_wizchip_spi_cbfunc+0x4c>)
 8002fbc:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <reg_wizchip_spi_cbfunc+0x54>)
 8002fbe:	621a      	str	r2, [r3, #32]
 8002fc0:	e006      	b.n	8002fd0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002fc2:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <reg_wizchip_spi_cbfunc+0x4c>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <reg_wizchip_spi_cbfunc+0x4c>)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6213      	str	r3, [r2, #32]
   }
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	20000020 	.word	0x20000020
 8002fe0:	08002eed 	.word	0x08002eed
 8002fe4:	08002efd 	.word	0x08002efd

08002fe8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002ff2:	bf00      	nop
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f9      	beq.n	8002ff4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <reg_wizchip_spiburst_cbfunc+0x24>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003014:	4a09      	ldr	r2, [pc, #36]	; (800303c <reg_wizchip_spiburst_cbfunc+0x54>)
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
 8003018:	e006      	b.n	8003028 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800301a:	4a06      	ldr	r2, [pc, #24]	; (8003034 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000020 	.word	0x20000020
 8003038:	08002f13 	.word	0x08002f13
 800303c:	08002f2b 	.word	0x08002f2b

08003040 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	f200 80c2 	bhi.w	80031e4 <ctlwizchip+0x1a4>
 8003060:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <ctlwizchip+0x28>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	080030a9 	.word	0x080030a9
 800306c:	080030af 	.word	0x080030af
 8003070:	080030db 	.word	0x080030db
 8003074:	080030cf 	.word	0x080030cf
 8003078:	080030e9 	.word	0x080030e9
 800307c:	080030f5 	.word	0x080030f5
 8003080:	08003103 	.word	0x08003103
 8003084:	08003129 	.word	0x08003129
 8003088:	0800314f 	.word	0x0800314f
 800308c:	08003189 	.word	0x08003189
 8003090:	0800318f 	.word	0x0800318f
 8003094:	08003197 	.word	0x08003197
 8003098:	080031eb 	.word	0x080031eb
 800309c:	0800319f 	.word	0x0800319f
 80030a0:	080031ad 	.word	0x080031ad
 80030a4:	080031c9 	.word	0x080031c9
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80030a8:	f000 f8e6 	bl	8003278 <wizchip_sw_reset>
         break;
 80030ac:	e09e      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3308      	adds	r3, #8
 80030bc:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f923 	bl	8003310 <wizchip_init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	e08f      	b.n	80031ee <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f9a8 	bl	8003428 <wizchip_clrinterrupt>
         break;
 80030d8:	e088      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80030da:	f000 f9c3 	bl	8003464 <wizchip_getinterrupt>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	801a      	strh	r2, [r3, #0]
         break;
 80030e6:	e081      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f9de 	bl	80034ae <wizchip_setinterruptmask>
         break;         
 80030f2:	e07b      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80030f4:	f000 f9f6 	bl	80034e4 <wizchip_getinterruptmask>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	801a      	strh	r2, [r3, #0]
         break;
 8003100:	e074      	b.n	80031ec <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	b29b      	uxth	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003112:	f7fe fce7 	bl	8001ae4 <WIZCHIP_WRITE>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003122:	f7fe fcdf 	bl	8001ae4 <WIZCHIP_WRITE>
         break;
 8003126:	e061      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003128:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800312c:	f7fe fc8e 	bl	8001a4c <WIZCHIP_READ>
 8003130:	4603      	mov	r3, r0
 8003132:	b29b      	uxth	r3, r3
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	b29c      	uxth	r4, r3
 8003138:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800313c:	f7fe fc86 	bl	8001a4c <WIZCHIP_READ>
 8003140:	4603      	mov	r3, r0
 8003142:	b29b      	uxth	r3, r3
 8003144:	4423      	add	r3, r4
 8003146:	b29a      	uxth	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	801a      	strh	r2, [r3, #0]
         break;
 800314c:	e04e      	b.n	80031ec <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <ctlwizchip+0x1b8>)
 8003150:	789a      	ldrb	r2, [r3, #2]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <ctlwizchip+0x1b8>)
 800315c:	78d2      	ldrb	r2, [r2, #3]
 800315e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	3302      	adds	r3, #2
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <ctlwizchip+0x1b8>)
 8003166:	7912      	ldrb	r2, [r2, #4]
 8003168:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	3303      	adds	r3, #3
 800316e:	4a22      	ldr	r2, [pc, #136]	; (80031f8 <ctlwizchip+0x1b8>)
 8003170:	7952      	ldrb	r2, [r2, #5]
 8003172:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	3304      	adds	r3, #4
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <ctlwizchip+0x1b8>)
 800317a:	7992      	ldrb	r2, [r2, #6]
 800317c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	3305      	adds	r3, #5
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
         break;
 8003186:	e031      	b.n	80031ec <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003188:	f000 f9fe 	bl	8003588 <wizphy_reset>
         break;
 800318c:	e02e      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800318e:	6838      	ldr	r0, [r7, #0]
 8003190:	f000 fa21 	bl	80035d6 <wizphy_setphyconf>
         break;
 8003194:	e02a      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003196:	6838      	ldr	r0, [r7, #0]
 8003198:	f000 fa5f 	bl	800365a <wizphy_getphyconf>
         break;
 800319c:	e026      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fac2 	bl	800372c <wizphy_setphypmode>
 80031a8:	4603      	mov	r3, r0
 80031aa:	e020      	b.n	80031ee <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80031ac:	f000 f9d3 	bl	8003556 <wizphy_getphypmode>
 80031b0:	4603      	mov	r3, r0
 80031b2:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2bff      	cmp	r3, #255	; 0xff
 80031b8:	d102      	bne.n	80031c0 <ctlwizchip+0x180>
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	e016      	b.n	80031ee <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	7dfa      	ldrb	r2, [r7, #23]
 80031c4:	701a      	strb	r2, [r3, #0]
         break;
 80031c6:	e011      	b.n	80031ec <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80031c8:	f000 f9af 	bl	800352a <wizphy_getphylink>
 80031cc:	4603      	mov	r3, r0
 80031ce:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d102      	bne.n	80031dc <ctlwizchip+0x19c>
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e008      	b.n	80031ee <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	7dfa      	ldrb	r2, [r7, #23]
 80031e0:	701a      	strb	r2, [r3, #0]
         break;
 80031e2:	e003      	b.n	80031ec <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
 80031e8:	e001      	b.n	80031ee <ctlwizchip+0x1ae>
         break;
 80031ea:	bf00      	nop
   }
   return 0;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd90      	pop	{r4, r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000020 	.word	0x20000020

080031fc <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d82c      	bhi.n	8003268 <ctlnetwork+0x6c>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <ctlnetwork+0x18>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	0800322d 	.word	0x0800322d
 8003218:	08003235 	.word	0x08003235
 800321c:	0800323d 	.word	0x0800323d
 8003220:	0800324b 	.word	0x0800324b
 8003224:	08003259 	.word	0x08003259
 8003228:	08003261 	.word	0x08003261
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f000 fac7 	bl	80037c0 <wizchip_setnetinfo>
         break;
 8003232:	e01c      	b.n	800326e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003234:	6838      	ldr	r0, [r7, #0]
 8003236:	f000 fb03 	bl	8003840 <wizchip_getnetinfo>
         break;
 800323a:	e018      	b.n	800326e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fb3d 	bl	80038c0 <wizchip_setnetmode>
 8003246:	4603      	mov	r3, r0
 8003248:	e012      	b.n	8003270 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800324a:	f000 fb5b 	bl	8003904 <wizchip_getnetmode>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	701a      	strb	r2, [r3, #0]
         break;
 8003256:	e00a      	b.n	800326e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003258:	6838      	ldr	r0, [r7, #0]
 800325a:	f000 fb5b 	bl	8003914 <wizchip_settimeout>
         break;
 800325e:	e006      	b.n	800326e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	f000 fb78 	bl	8003956 <wizchip_gettimeout>
         break;
 8003266:	e002      	b.n	800326e <ctlnetwork+0x72>
      default:
         return -1;
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
 800326c:	e000      	b.n	8003270 <ctlnetwork+0x74>
   }
   return 0;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2206      	movs	r2, #6
 8003282:	4619      	mov	r1, r3
 8003284:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003288:	f7fe fc7a 	bl	8001b80 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	2204      	movs	r2, #4
 8003292:	4619      	mov	r1, r3
 8003294:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003298:	f7fe fc72 	bl	8001b80 <WIZCHIP_READ_BUF>
 800329c:	f107 0310 	add.w	r3, r7, #16
 80032a0:	2204      	movs	r2, #4
 80032a2:	4619      	mov	r1, r3
 80032a4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80032a8:	f7fe fc6a 	bl	8001b80 <WIZCHIP_READ_BUF>
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	2204      	movs	r2, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80032b8:	f7fe fc62 	bl	8001b80 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fe fc10 	bl	8001ae4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fe fbc1 	bl	8001a4c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	2206      	movs	r2, #6
 80032ce:	4619      	mov	r1, r3
 80032d0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80032d4:	f7fe fcb4 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	2204      	movs	r2, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032e4:	f7fe fcac 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80032e8:	f107 0310 	add.w	r3, r7, #16
 80032ec:	2204      	movs	r2, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80032f4:	f7fe fca4 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80032f8:	f107 030c 	add.w	r3, r7, #12
 80032fc:	2204      	movs	r2, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003304:	f7fe fc9c 	bl	8001c40 <WIZCHIP_WRITE_BUF>
}
 8003308:	bf00      	nop
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800331e:	f7ff ffab 	bl	8003278 <wizchip_sw_reset>
   if(txsize)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03b      	beq.n	80033a0 <wizchip_init+0x90>
   {
      tmp = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e015      	b.n	800335e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	7bbb      	ldrb	r3, [r7, #14]
 800333e:	4413      	add	r3, r2
 8003340:	b2db      	uxtb	r3, r3
 8003342:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003348:	2b10      	cmp	r3, #16
 800334a:	dd02      	ble.n	8003352 <wizchip_init+0x42>
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	e066      	b.n	8003420 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003362:	2b07      	cmp	r3, #7
 8003364:	dde5      	ble.n	8003332 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	e015      	b.n	8003398 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800336c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	3301      	adds	r3, #1
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800337a:	4618      	mov	r0, r3
 800337c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	4619      	mov	r1, r3
 8003388:	f7fe fbac 	bl	8001ae4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800338c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	3301      	adds	r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339c:	2b07      	cmp	r3, #7
 800339e:	dde5      	ble.n	800336c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03b      	beq.n	800341e <wizchip_init+0x10e>
   {
      tmp = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
 80033ae:	e015      	b.n	80033dc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80033b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	4413      	add	r3, r2
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	7bbb      	ldrb	r3, [r7, #14]
 80033bc:	4413      	add	r3, r2
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80033c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	dd02      	ble.n	80033d0 <wizchip_init+0xc0>
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	e027      	b.n	8003420 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e0:	2b07      	cmp	r3, #7
 80033e2:	dde5      	ble.n	80033b0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e015      	b.n	8003416 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80033ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	3301      	adds	r3, #1
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80033f8:	4618      	mov	r0, r3
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4413      	add	r3, r2
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	f7fe fb6d 	bl	8001ae4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341a:	2b07      	cmp	r3, #7
 800341c:	dde5      	ble.n	80033ea <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	b29b      	uxth	r3, r3
 800343c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	f023 030f 	bic.w	r3, r3, #15
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4619      	mov	r1, r3
 8003448:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800344c:	f7fe fb4a 	bl	8001ae4 <WIZCHIP_WRITE>
   setSIR(sir);
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	4619      	mov	r1, r3
 8003454:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003458:	f7fe fb44 	bl	8001ae4 <WIZCHIP_WRITE>
#endif   
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003476:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800347a:	f7fe fae7 	bl	8001a4c <WIZCHIP_READ>
 800347e:	4603      	mov	r3, r0
 8003480:	f023 030f 	bic.w	r3, r3, #15
 8003484:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003486:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800348a:	f7fe fadf 	bl	8001a4c <WIZCHIP_READ>
 800348e:	4603      	mov	r3, r0
 8003490:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003492:	79bb      	ldrb	r3, [r7, #6]
 8003494:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003496:	88bb      	ldrh	r3, [r7, #4]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	b29a      	uxth	r2, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80034a4:	88bb      	ldrh	r3, [r7, #4]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80034cc:	f7fe fb0a 	bl	8001ae4 <WIZCHIP_WRITE>
   setSIMR(simr);
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	4619      	mov	r1, r3
 80034d4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80034d8:	f7fe fb04 	bl	8001ae4 <WIZCHIP_WRITE>
#endif   
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80034f6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80034fa:	f7fe faa7 	bl	8001a4c <WIZCHIP_READ>
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003502:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003506:	f7fe faa1 	bl	8001a4c <WIZCHIP_READ>
 800350a:	4603      	mov	r3, r0
 800350c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800350e:	79bb      	ldrb	r3, [r7, #6]
 8003510:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003512:	88bb      	ldrh	r3, [r7, #4]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	b29a      	uxth	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	b29b      	uxth	r3, r3
 800351c:	4413      	add	r3, r2
 800351e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003520:	88bb      	ldrh	r3, [r7, #4]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003530:	2300      	movs	r3, #0
 8003532:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003534:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003538:	f7fe fa88 	bl	8001a4c <WIZCHIP_READ>
 800353c:	4603      	mov	r3, r0
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003546:	2301      	movs	r3, #1
 8003548:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003560:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003564:	f7fe fa72 	bl	8001a4c <WIZCHIP_READ>
 8003568:	4603      	mov	r3, r0
 800356a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800356e:	2b30      	cmp	r3, #48	; 0x30
 8003570:	d102      	bne.n	8003578 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003572:	2301      	movs	r3, #1
 8003574:	71fb      	strb	r3, [r7, #7]
 8003576:	e001      	b.n	800357c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003578:	2300      	movs	r3, #0
 800357a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800358e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003592:	f7fe fa5b 	bl	8001a4c <WIZCHIP_READ>
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035aa:	f7fe fa9b 	bl	8001ae4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80035ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035b2:	f7fe fa4b 	bl	8001a4c <WIZCHIP_READ>
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035c0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035ca:	f7fe fa8b 	bl	8001ae4 <WIZCHIP_WRITE>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d104      	bne.n	80035f4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	e003      	b.n	80035fc <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035fa:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d104      	bne.n	800360e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	e019      	b.n	8003642 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	78db      	ldrb	r3, [r3, #3]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d10d      	bne.n	8003632 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	789b      	ldrb	r3, [r3, #2]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d104      	bne.n	8003628 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	f043 0318 	orr.w	r3, r3, #24
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e00c      	b.n	8003642 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	f043 0308 	orr.w	r3, r3, #8
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e007      	b.n	8003642 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	789b      	ldrb	r3, [r3, #2]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d103      	bne.n	8003642 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	f043 0310 	orr.w	r3, r3, #16
 8003640:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	4619      	mov	r1, r3
 8003646:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800364a:	f7fe fa4b 	bl	8001ae4 <WIZCHIP_WRITE>
   wizphy_reset();
 800364e:	f7ff ff9b 	bl	8003588 <wizphy_reset>
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003666:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800366a:	f7fe f9ef 	bl	8001a4c <WIZCHIP_READ>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	119b      	asrs	r3, r3, #6
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003688:	2b20      	cmp	r3, #32
 800368a:	d001      	beq.n	8003690 <wizphy_getphyconf+0x36>
 800368c:	2b38      	cmp	r3, #56	; 0x38
 800368e:	d103      	bne.n	8003698 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	705a      	strb	r2, [r3, #1]
         break;
 8003696:	e003      	b.n	80036a0 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	705a      	strb	r2, [r3, #1]
         break;
 800369e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036a6:	3b10      	subs	r3, #16
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	bf8c      	ite	hi
 80036ac:	2201      	movhi	r2, #1
 80036ae:	2200      	movls	r2, #0
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d111      	bne.n	80036da <wizphy_getphyconf+0x80>
 80036b6:	2201      	movs	r2, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80036c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	709a      	strb	r2, [r3, #2]
         break;
 80036d8:	e003      	b.n	80036e2 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	709a      	strb	r2, [r3, #2]
         break;
 80036e0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e8:	3b08      	subs	r3, #8
 80036ea:	2b18      	cmp	r3, #24
 80036ec:	bf8c      	ite	hi
 80036ee:	2201      	movhi	r2, #1
 80036f0:	2200      	movls	r2, #0
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	2a00      	cmp	r2, #0
 80036f6:	d111      	bne.n	800371c <wizphy_getphyconf+0xc2>
 80036f8:	2201      	movs	r2, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	70da      	strb	r2, [r3, #3]
         break;
 800371a:	e003      	b.n	8003724 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	70da      	strb	r2, [r3, #3]
         break;
 8003722:	bf00      	nop
   }
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800373a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800373e:	f7fe f985 	bl	8001a4c <WIZCHIP_READ>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <wizphy_setphypmode+0x2a>
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e030      	b.n	80037b8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800375c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d104      	bne.n	800376e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e003      	b.n	8003776 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003774:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	4619      	mov	r1, r3
 800377a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800377e:	f7fe f9b1 	bl	8001ae4 <WIZCHIP_WRITE>
   wizphy_reset();
 8003782:	f7ff ff01 	bl	8003588 <wizphy_reset>
   tmp = getPHYCFGR();
 8003786:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800378a:	f7fe f95f 	bl	8001a4c <WIZCHIP_READ>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d106      	bne.n	80037a6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <wizphy_setphypmode+0x88>
 80037a2:	2300      	movs	r3, #0
 80037a4:	e008      	b.n	80037b8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <wizphy_setphypmode+0x88>
 80037b0:	2300      	movs	r3, #0
 80037b2:	e001      	b.n	80037b8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2206      	movs	r2, #6
 80037cc:	4619      	mov	r1, r3
 80037ce:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80037d2:	f7fe fa35 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	330e      	adds	r3, #14
 80037da:	2204      	movs	r2, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037e2:	f7fe fa2d 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	330a      	adds	r3, #10
 80037ea:	2204      	movs	r2, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80037f2:	f7fe fa25 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3306      	adds	r3, #6
 80037fa:	2204      	movs	r2, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003802:	f7fe fa1d 	bl	8001c40 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7c9a      	ldrb	r2, [r3, #18]
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <wizchip_setnetinfo+0x78>)
 800380c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7cda      	ldrb	r2, [r3, #19]
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <wizchip_setnetinfo+0x78>)
 8003814:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7d1a      	ldrb	r2, [r3, #20]
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <wizchip_setnetinfo+0x78>)
 800381c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7d5a      	ldrb	r2, [r3, #21]
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <wizchip_setnetinfo+0x78>)
 8003824:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7d9a      	ldrb	r2, [r3, #22]
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <wizchip_setnetinfo+0x7c>)
 800382c:	701a      	strb	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200000f4 	.word	0x200000f4
 800383c:	200000f8 	.word	0x200000f8

08003840 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2206      	movs	r2, #6
 800384c:	4619      	mov	r1, r3
 800384e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003852:	f7fe f995 	bl	8001b80 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	330e      	adds	r3, #14
 800385a:	2204      	movs	r2, #4
 800385c:	4619      	mov	r1, r3
 800385e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003862:	f7fe f98d 	bl	8001b80 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	330a      	adds	r3, #10
 800386a:	2204      	movs	r2, #4
 800386c:	4619      	mov	r1, r3
 800386e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003872:	f7fe f985 	bl	8001b80 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3306      	adds	r3, #6
 800387a:	2204      	movs	r2, #4
 800387c:	4619      	mov	r1, r3
 800387e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003882:	f7fe f97d 	bl	8001b80 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <wizchip_getnetinfo+0x78>)
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <wizchip_getnetinfo+0x78>)
 8003890:	785a      	ldrb	r2, [r3, #1]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <wizchip_getnetinfo+0x78>)
 8003898:	789a      	ldrb	r2, [r3, #2]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <wizchip_getnetinfo+0x78>)
 80038a0:	78da      	ldrb	r2, [r3, #3]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <wizchip_getnetinfo+0x7c>)
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	759a      	strb	r2, [r3, #22]
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200000f4 	.word	0x200000f4
 80038bc:	200000f8 	.word	0x200000f8

080038c0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <wizchip_setnetmode+0x1e>
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	e00e      	b.n	80038fc <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80038de:	2000      	movs	r0, #0
 80038e0:	f7fe f8b4 	bl	8001a4c <WIZCHIP_READ>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	4619      	mov	r1, r3
 80038f4:	2000      	movs	r0, #0
 80038f6:	f7fe f8f5 	bl	8001ae4 <WIZCHIP_WRITE>
   return 0;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003908:	2000      	movs	r0, #0
 800390a:	f7fe f89f 	bl	8001a4c <WIZCHIP_READ>
 800390e:	4603      	mov	r3, r0
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}

08003914 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4619      	mov	r1, r3
 8003922:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003926:	f7fe f8dd 	bl	8001ae4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	885b      	ldrh	r3, [r3, #2]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4619      	mov	r1, r3
 8003936:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800393a:	f7fe f8d3 	bl	8001ae4 <WIZCHIP_WRITE>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	885b      	ldrh	r3, [r3, #2]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800394a:	f7fe f8cb 	bl	8001ae4 <WIZCHIP_WRITE>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003956:	b590      	push	{r4, r7, lr}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800395e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003962:	f7fe f873 	bl	8001a4c <WIZCHIP_READ>
 8003966:	4603      	mov	r3, r0
 8003968:	461a      	mov	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800396e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003972:	f7fe f86b 	bl	8001a4c <WIZCHIP_READ>
 8003976:	4603      	mov	r3, r0
 8003978:	b29b      	uxth	r3, r3
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	b29c      	uxth	r4, r3
 800397e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003982:	f7fe f863 	bl	8001a4c <WIZCHIP_READ>
 8003986:	4603      	mov	r3, r0
 8003988:	b29b      	uxth	r3, r3
 800398a:	4423      	add	r3, r4
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	805a      	strh	r2, [r3, #2]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}
	...

0800399c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_Init+0x40>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_Init+0x40>)
 80039a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_Init+0x40>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_Init+0x40>)
 80039b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_Init+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a07      	ldr	r2, [pc, #28]	; (80039dc <HAL_Init+0x40>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c4:	2003      	movs	r0, #3
 80039c6:	f000 f92b 	bl	8003c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f000 f808 	bl	80039e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039d0:	f7fd fca8 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00

080039e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_InitTick+0x54>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_InitTick+0x58>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	4619      	mov	r1, r3
 80039f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f943 	bl	8003c8a <HAL_SYSTICK_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00e      	b.n	8003a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d80a      	bhi.n	8003a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a14:	2200      	movs	r2, #0
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f000 f90b 	bl	8003c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <HAL_InitTick+0x5c>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e000      	b.n	8003a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000018 	.word	0x20000018
 8003a38:	20000050 	.word	0x20000050
 8003a3c:	2000004c 	.word	0x2000004c

08003a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x20>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_IncTick+0x24>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_IncTick+0x24>)
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000050 	.word	0x20000050
 8003a64:	20000d98 	.word	0x20000d98

08003a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_GetTick+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000d98 	.word	0x20000d98

08003a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab2:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	60d3      	str	r3, [r2, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 0307 	and.w	r3, r3, #7
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	db0b      	blt.n	8003b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4907      	ldr	r1, [pc, #28]	; (8003b1c <__NVIC_EnableIRQ+0x38>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2001      	movs	r0, #1
 8003b06:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db0a      	blt.n	8003b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	490c      	ldr	r1, [pc, #48]	; (8003b6c <__NVIC_SetPriority+0x4c>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b48:	e00a      	b.n	8003b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4908      	ldr	r1, [pc, #32]	; (8003b70 <__NVIC_SetPriority+0x50>)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	3b04      	subs	r3, #4
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	761a      	strb	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000e100 	.word	0xe000e100
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f1c3 0307 	rsb	r3, r3, #7
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	bf28      	it	cs
 8003b92:	2304      	movcs	r3, #4
 8003b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d902      	bls.n	8003ba4 <NVIC_EncodePriority+0x30>
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3b03      	subs	r3, #3
 8003ba2:	e000      	b.n	8003ba6 <NVIC_EncodePriority+0x32>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	43d9      	mvns	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bcc:	4313      	orrs	r3, r2
         );
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bec:	d301      	bcc.n	8003bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e00f      	b.n	8003c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <SysTick_Config+0x40>)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bfa:	210f      	movs	r1, #15
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	f7ff ff8e 	bl	8003b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <SysTick_Config+0x40>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c0a:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <SysTick_Config+0x40>)
 8003c0c:	2207      	movs	r2, #7
 8003c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	e000e010 	.word	0xe000e010

08003c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff29 	bl	8003a80 <__NVIC_SetPriorityGrouping>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c48:	f7ff ff3e 	bl	8003ac8 <__NVIC_GetPriorityGrouping>
 8003c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f7ff ff8e 	bl	8003b74 <NVIC_EncodePriority>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff5d 	bl	8003b20 <__NVIC_SetPriority>
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff31 	bl	8003ae4 <__NVIC_EnableIRQ>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ffa2 	bl	8003bdc <SysTick_Config>
 8003c98:	4603      	mov	r3, r0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff feda 	bl	8003a68 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e099      	b.n	8003df4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce0:	e00f      	b.n	8003d02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce2:	f7ff fec1 	bl	8003a68 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d908      	bls.n	8003d02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e078      	b.n	8003df4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e8      	bne.n	8003ce2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_DMA_Init+0x158>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d107      	bne.n	8003d6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	4313      	orrs	r3, r2
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d117      	bne.n	8003dc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f9e9 	bl	8004180 <DMA_CheckFifoParam>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2240      	movs	r2, #64	; 0x40
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e016      	b.n	8003df4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9a0 	bl	8004114 <DMA_CalcBaseAndBitshift>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	223f      	movs	r2, #63	; 0x3f
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	f010803f 	.word	0xf010803f

08003e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e0c:	4b92      	ldr	r3, [pc, #584]	; (8004058 <HAL_DMA_IRQHandler+0x258>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a92      	ldr	r2, [pc, #584]	; (800405c <HAL_DMA_IRQHandler+0x25c>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01a      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	2208      	movs	r2, #8
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	2201      	movs	r2, #1
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d012      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	2201      	movs	r2, #1
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d012      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f043 0204 	orr.w	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	2210      	movs	r2, #16
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d043      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03c      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	2210      	movs	r2, #16
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d024      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	e01f      	b.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
 8003f40:	e016      	b.n	8003f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0208 	bic.w	r2, r2, #8
 8003f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	2220      	movs	r2, #32
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 808e 	beq.w	800409e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8086 	beq.w	800409e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	2220      	movs	r2, #32
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d136      	bne.n	8004018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0216 	bic.w	r2, r2, #22
 8003fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_DMA_IRQHandler+0x1da>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0208 	bic.w	r2, r2, #8
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	223f      	movs	r2, #63	; 0x3f
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400a:	2b00      	cmp	r3, #0
 800400c:	d07d      	beq.n	800410a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
        }
        return;
 8004016:	e078      	b.n	800410a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01c      	beq.n	8004060 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d108      	bne.n	8004046 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	2b00      	cmp	r3, #0
 800403a:	d030      	beq.n	800409e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	e02b      	b.n	800409e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d027      	beq.n	800409e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e022      	b.n	800409e <HAL_DMA_IRQHandler+0x29e>
 8004058:	20000018 	.word	0x20000018
 800405c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10f      	bne.n	800408e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0210 	bic.w	r2, r2, #16
 800407c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d032      	beq.n	800410c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d022      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2205      	movs	r2, #5
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d307      	bcc.n	80040e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f2      	bne.n	80040ca <HAL_DMA_IRQHandler+0x2ca>
 80040e4:	e000      	b.n	80040e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
 8004108:	e000      	b.n	800410c <HAL_DMA_IRQHandler+0x30c>
        return;
 800410a:	bf00      	nop
    }
  }
}
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop

08004114 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	3b10      	subs	r3, #16
 8004124:	4a14      	ldr	r2, [pc, #80]	; (8004178 <DMA_CalcBaseAndBitshift+0x64>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <DMA_CalcBaseAndBitshift+0x68>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d909      	bls.n	8004156 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	1d1a      	adds	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	659a      	str	r2, [r3, #88]	; 0x58
 8004154:	e007      	b.n	8004166 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	aaaaaaab 	.word	0xaaaaaaab
 800417c:	08007220 	.word	0x08007220

08004180 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11f      	bne.n	80041da <DMA_CheckFifoParam+0x5a>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d856      	bhi.n	800424e <DMA_CheckFifoParam+0xce>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <DMA_CheckFifoParam+0x28>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080041cb 	.word	0x080041cb
 80041b0:	080041b9 	.word	0x080041b9
 80041b4:	0800424f 	.word	0x0800424f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d046      	beq.n	8004252 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c8:	e043      	b.n	8004252 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041d2:	d140      	bne.n	8004256 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d8:	e03d      	b.n	8004256 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	d121      	bne.n	8004228 <DMA_CheckFifoParam+0xa8>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d837      	bhi.n	800425a <DMA_CheckFifoParam+0xda>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <DMA_CheckFifoParam+0x70>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004201 	.word	0x08004201
 80041f4:	08004207 	.word	0x08004207
 80041f8:	08004201 	.word	0x08004201
 80041fc:	08004219 	.word	0x08004219
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	e030      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d025      	beq.n	800425e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004216:	e022      	b.n	800425e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004220:	d11f      	bne.n	8004262 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004226:	e01c      	b.n	8004262 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d903      	bls.n	8004236 <DMA_CheckFifoParam+0xb6>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d003      	beq.n	800423c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004234:	e018      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
      break;
 800423a:	e015      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      break;
 800424c:	e00b      	b.n	8004266 <DMA_CheckFifoParam+0xe6>
      break;
 800424e:	bf00      	nop
 8004250:	e00a      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      break;
 8004252:	bf00      	nop
 8004254:	e008      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
 8004258:	e006      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      break;
 800425a:	bf00      	nop
 800425c:	e004      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      break;
 800425e:	bf00      	nop
 8004260:	e002      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      break;   
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <DMA_CheckFifoParam+0xe8>
      break;
 8004266:	bf00      	nop
    }
  } 
  
  return status; 
 8004268:	7bfb      	ldrb	r3, [r7, #15]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	e177      	b.n	8004584 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004294:	2201      	movs	r2, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	f040 8166 	bne.w	800457e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d005      	beq.n	80042ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d130      	bne.n	800432c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004300:	2201      	movs	r2, #1
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 0201 	and.w	r2, r3, #1
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b03      	cmp	r3, #3
 8004336:	d017      	beq.n	8004368 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	2203      	movs	r2, #3
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d123      	bne.n	80043bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	08da      	lsrs	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3208      	adds	r2, #8
 800437c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	220f      	movs	r2, #15
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	08da      	lsrs	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3208      	adds	r2, #8
 80043b6:	69b9      	ldr	r1, [r7, #24]
 80043b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0203 	and.w	r2, r3, #3
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80c0 	beq.w	800457e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	4b66      	ldr	r3, [pc, #408]	; (800459c <HAL_GPIO_Init+0x324>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	4a65      	ldr	r2, [pc, #404]	; (800459c <HAL_GPIO_Init+0x324>)
 8004408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440c:	6453      	str	r3, [r2, #68]	; 0x44
 800440e:	4b63      	ldr	r3, [pc, #396]	; (800459c <HAL_GPIO_Init+0x324>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800441a:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <HAL_GPIO_Init+0x328>)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	220f      	movs	r2, #15
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a58      	ldr	r2, [pc, #352]	; (80045a4 <HAL_GPIO_Init+0x32c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d037      	beq.n	80044b6 <HAL_GPIO_Init+0x23e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a57      	ldr	r2, [pc, #348]	; (80045a8 <HAL_GPIO_Init+0x330>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d031      	beq.n	80044b2 <HAL_GPIO_Init+0x23a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a56      	ldr	r2, [pc, #344]	; (80045ac <HAL_GPIO_Init+0x334>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02b      	beq.n	80044ae <HAL_GPIO_Init+0x236>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a55      	ldr	r2, [pc, #340]	; (80045b0 <HAL_GPIO_Init+0x338>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d025      	beq.n	80044aa <HAL_GPIO_Init+0x232>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a54      	ldr	r2, [pc, #336]	; (80045b4 <HAL_GPIO_Init+0x33c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01f      	beq.n	80044a6 <HAL_GPIO_Init+0x22e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a53      	ldr	r2, [pc, #332]	; (80045b8 <HAL_GPIO_Init+0x340>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d019      	beq.n	80044a2 <HAL_GPIO_Init+0x22a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a52      	ldr	r2, [pc, #328]	; (80045bc <HAL_GPIO_Init+0x344>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_GPIO_Init+0x226>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a51      	ldr	r2, [pc, #324]	; (80045c0 <HAL_GPIO_Init+0x348>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00d      	beq.n	800449a <HAL_GPIO_Init+0x222>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a50      	ldr	r2, [pc, #320]	; (80045c4 <HAL_GPIO_Init+0x34c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d007      	beq.n	8004496 <HAL_GPIO_Init+0x21e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a4f      	ldr	r2, [pc, #316]	; (80045c8 <HAL_GPIO_Init+0x350>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <HAL_GPIO_Init+0x21a>
 800448e:	2309      	movs	r3, #9
 8004490:	e012      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 8004492:	230a      	movs	r3, #10
 8004494:	e010      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 8004496:	2308      	movs	r3, #8
 8004498:	e00e      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 800449a:	2307      	movs	r3, #7
 800449c:	e00c      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 800449e:	2306      	movs	r3, #6
 80044a0:	e00a      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044a2:	2305      	movs	r3, #5
 80044a4:	e008      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044a6:	2304      	movs	r3, #4
 80044a8:	e006      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044aa:	2303      	movs	r3, #3
 80044ac:	e004      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e002      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044b6:	2300      	movs	r3, #0
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	f002 0203 	and.w	r2, r2, #3
 80044be:	0092      	lsls	r2, r2, #2
 80044c0:	4093      	lsls	r3, r2
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c8:	4935      	ldr	r1, [pc, #212]	; (80045a0 <HAL_GPIO_Init+0x328>)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_GPIO_Init+0x354>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044fa:	4a34      	ldr	r2, [pc, #208]	; (80045cc <HAL_GPIO_Init+0x354>)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004500:	4b32      	ldr	r3, [pc, #200]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800452a:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_GPIO_Init+0x354>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <HAL_GPIO_Init+0x354>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3301      	adds	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	f67f ae84 	bls.w	8004294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800
 80045a0:	40013800 	.word	0x40013800
 80045a4:	40020000 	.word	0x40020000
 80045a8:	40020400 	.word	0x40020400
 80045ac:	40020800 	.word	0x40020800
 80045b0:	40020c00 	.word	0x40020c00
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40021400 	.word	0x40021400
 80045bc:	40021800 	.word	0x40021800
 80045c0:	40021c00 	.word	0x40021c00
 80045c4:	40022000 	.word	0x40022000
 80045c8:	40022400 	.word	0x40022400
 80045cc:	40013c00 	.word	0x40013c00

080045d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	807b      	strh	r3, [r7, #2]
 80045dc:	4613      	mov	r3, r2
 80045de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045e0:	787b      	ldrb	r3, [r7, #1]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045ec:	e003      	b.n	80045f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	041a      	lsls	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	619a      	str	r2, [r3, #24]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e264      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d075      	beq.n	800470e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	4ba3      	ldr	r3, [pc, #652]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b04      	cmp	r3, #4
 800462c:	d00c      	beq.n	8004648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4ba0      	ldr	r3, [pc, #640]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004636:	2b08      	cmp	r3, #8
 8004638:	d112      	bne.n	8004660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463a:	4b9d      	ldr	r3, [pc, #628]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004646:	d10b      	bne.n	8004660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	4b99      	ldr	r3, [pc, #612]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05b      	beq.n	800470c <HAL_RCC_OscConfig+0x108>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d157      	bne.n	800470c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e23f      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x74>
 800466a:	4b91      	ldr	r3, [pc, #580]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a90      	ldr	r2, [pc, #576]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e01d      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x98>
 8004682:	4b8b      	ldr	r3, [pc, #556]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a8a      	ldr	r2, [pc, #552]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b88      	ldr	r3, [pc, #544]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a87      	ldr	r2, [pc, #540]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0xb0>
 800469c:	4b84      	ldr	r3, [pc, #528]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a83      	ldr	r2, [pc, #524]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 80046a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b81      	ldr	r3, [pc, #516]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a80      	ldr	r2, [pc, #512]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 80046ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7ff f9d4 	bl	8003a68 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c4:	f7ff f9d0 	bl	8003a68 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	; 0x64
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e204      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	4b76      	ldr	r3, [pc, #472]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0xc0>
 80046e2:	e014      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7ff f9c0 	bl	8003a68 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ec:	f7ff f9bc 	bl	8003a68 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1f0      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fe:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0xe8>
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d063      	beq.n	80047e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	4b65      	ldr	r3, [pc, #404]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b62      	ldr	r3, [pc, #392]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800472e:	2b08      	cmp	r3, #8
 8004730:	d11c      	bne.n	800476c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004732:	4b5f      	ldr	r3, [pc, #380]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d116      	bne.n	800476c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473e:	4b5c      	ldr	r3, [pc, #368]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_RCC_OscConfig+0x152>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d001      	beq.n	8004756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e1c4      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004756:	4b56      	ldr	r3, [pc, #344]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4952      	ldr	r1, [pc, #328]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476a:	e03a      	b.n	80047e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d020      	beq.n	80047b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004774:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <HAL_RCC_OscConfig+0x2b0>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7ff f975 	bl	8003a68 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004782:	f7ff f971 	bl	8003a68 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e1a5      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004794:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a0:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4940      	ldr	r1, [pc, #256]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	600b      	str	r3, [r1, #0]
 80047b4:	e015      	b.n	80047e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b6:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <HAL_RCC_OscConfig+0x2b0>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7ff f954 	bl	8003a68 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c4:	f7ff f950 	bl	8003a68 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e184      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d6:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d030      	beq.n	8004850 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <HAL_RCC_OscConfig+0x2b4>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7ff f934 	bl	8003a68 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004804:	f7ff f930 	bl	8003a68 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e164      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x200>
 8004822:	e015      	b.n	8004850 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004824:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <HAL_RCC_OscConfig+0x2b4>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482a:	f7ff f91d 	bl	8003a68 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004832:	f7ff f919 	bl	8003a68 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e14d      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a0 	beq.w	800499e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_OscConfig+0x2b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d121      	bne.n	80048de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <HAL_RCC_OscConfig+0x2b8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <HAL_RCC_OscConfig+0x2b8>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7ff f8df 	bl	8003a68 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e011      	b.n	80048d2 <HAL_RCC_OscConfig+0x2ce>
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800
 80048b4:	42470000 	.word	0x42470000
 80048b8:	42470e80 	.word	0x42470e80
 80048bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c0:	f7ff f8d2 	bl	8003a68 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e106      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d2:	4b85      	ldr	r3, [pc, #532]	; (8004ae8 <HAL_RCC_OscConfig+0x4e4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d106      	bne.n	80048f4 <HAL_RCC_OscConfig+0x2f0>
 80048e6:	4b81      	ldr	r3, [pc, #516]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	4a80      	ldr	r2, [pc, #512]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6713      	str	r3, [r2, #112]	; 0x70
 80048f2:	e01c      	b.n	800492e <HAL_RCC_OscConfig+0x32a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d10c      	bne.n	8004916 <HAL_RCC_OscConfig+0x312>
 80048fc:	4b7b      	ldr	r3, [pc, #492]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a7a      	ldr	r2, [pc, #488]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004902:	f043 0304 	orr.w	r3, r3, #4
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
 8004908:	4b78      	ldr	r3, [pc, #480]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a77      	ldr	r2, [pc, #476]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
 8004914:	e00b      	b.n	800492e <HAL_RCC_OscConfig+0x32a>
 8004916:	4b75      	ldr	r3, [pc, #468]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4a74      	ldr	r2, [pc, #464]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	6713      	str	r3, [r2, #112]	; 0x70
 8004922:	4b72      	ldr	r3, [pc, #456]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a71      	ldr	r2, [pc, #452]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004928:	f023 0304 	bic.w	r3, r3, #4
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d015      	beq.n	8004962 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7ff f897 	bl	8003a68 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7ff f893 	bl	8003a68 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	4293      	cmp	r3, r2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e0c5      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	4b65      	ldr	r3, [pc, #404]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ee      	beq.n	800493e <HAL_RCC_OscConfig+0x33a>
 8004960:	e014      	b.n	800498c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004962:	f7ff f881 	bl	8003a68 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004968:	e00a      	b.n	8004980 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7ff f87d 	bl	8003a68 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0af      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004980:	4b5a      	ldr	r3, [pc, #360]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ee      	bne.n	800496a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d105      	bne.n	800499e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004992:	4b56      	ldr	r3, [pc, #344]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	4a55      	ldr	r2, [pc, #340]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 809b 	beq.w	8004ade <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d05c      	beq.n	8004a6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d141      	bne.n	8004a40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049bc:	4b4c      	ldr	r3, [pc, #304]	; (8004af0 <HAL_RCC_OscConfig+0x4ec>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c2:	f7ff f851 	bl	8003a68 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ca:	f7ff f84d 	bl	8003a68 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e081      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049dc:	4b43      	ldr	r3, [pc, #268]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f0      	bne.n	80049ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	019b      	lsls	r3, r3, #6
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	3b01      	subs	r3, #1
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	4937      	ldr	r1, [pc, #220]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a12:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCC_OscConfig+0x4ec>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7ff f826 	bl	8003a68 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a20:	f7ff f822 	bl	8003a68 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e056      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x41c>
 8004a3e:	e04e      	b.n	8004ade <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <HAL_RCC_OscConfig+0x4ec>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a46:	f7ff f80f 	bl	8003a68 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4e:	f7ff f80b 	bl	8003a68 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e03f      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a60:	4b22      	ldr	r3, [pc, #136]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <HAL_RCC_OscConfig+0x44a>
 8004a6c:	e037      	b.n	8004ade <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e032      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d028      	beq.n	8004ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d121      	bne.n	8004ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d11a      	bne.n	8004ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aaa:	4013      	ands	r3, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ab0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d111      	bne.n	8004ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d107      	bne.n	8004ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d001      	beq.n	8004ade <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	40023800 	.word	0x40023800
 8004af0:	42470060 	.word	0x42470060

08004af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0cc      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b68      	ldr	r3, [pc, #416]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d90c      	bls.n	8004b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b65      	ldr	r3, [pc, #404]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b63      	ldr	r3, [pc, #396]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0b8      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d020      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b48:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a58      	ldr	r2, [pc, #352]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b60:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a52      	ldr	r2, [pc, #328]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	494d      	ldr	r1, [pc, #308]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d044      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	4b47      	ldr	r3, [pc, #284]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d119      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e07f      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d003      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e06f      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e067      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd2:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4934      	ldr	r1, [pc, #208]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be4:	f7fe ff40 	bl	8003a68 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bec:	f7fe ff3c 	bl	8003a68 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e04f      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 020c 	and.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d1eb      	bne.n	8004bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d20c      	bcs.n	8004c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b22      	ldr	r3, [pc, #136]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e032      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4916      	ldr	r1, [pc, #88]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	490e      	ldr	r1, [pc, #56]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c7a:	f000 f821 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	490a      	ldr	r1, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	5ccb      	ldrb	r3, [r1, r3]
 8004c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fea0 	bl	80039e0 <HAL_InitTick>

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023c00 	.word	0x40023c00
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	08007208 	.word	0x08007208
 8004cb8:	20000018 	.word	0x20000018
 8004cbc:	2000004c 	.word	0x2000004c

08004cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	6079      	str	r1, [r7, #4]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	60f9      	str	r1, [r7, #12]
 8004cce:	2100      	movs	r1, #0
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd6:	4952      	ldr	r1, [pc, #328]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cd8:	6889      	ldr	r1, [r1, #8]
 8004cda:	f001 010c 	and.w	r1, r1, #12
 8004cde:	2908      	cmp	r1, #8
 8004ce0:	d00d      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0x3e>
 8004ce2:	2908      	cmp	r1, #8
 8004ce4:	f200 8094 	bhi.w	8004e10 <HAL_RCC_GetSysClockFreq+0x150>
 8004ce8:	2900      	cmp	r1, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8004cec:	2904      	cmp	r1, #4
 8004cee:	d003      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8004cf0:	e08e      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cf2:	4b4c      	ldr	r3, [pc, #304]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x164>)
 8004cf4:	60bb      	str	r3, [r7, #8]
       break;
 8004cf6:	e08e      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf8:	4b4b      	ldr	r3, [pc, #300]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x168>)
 8004cfa:	60bb      	str	r3, [r7, #8]
      break;
 8004cfc:	e08b      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cfe:	4948      	ldr	r1, [pc, #288]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d00:	6849      	ldr	r1, [r1, #4]
 8004d02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004d06:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d08:	4945      	ldr	r1, [pc, #276]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d0a:	6849      	ldr	r1, [r1, #4]
 8004d0c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004d10:	2900      	cmp	r1, #0
 8004d12:	d024      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d14:	4942      	ldr	r1, [pc, #264]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d16:	6849      	ldr	r1, [r1, #4]
 8004d18:	0989      	lsrs	r1, r1, #6
 8004d1a:	4608      	mov	r0, r1
 8004d1c:	f04f 0100 	mov.w	r1, #0
 8004d20:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d24:	f04f 0500 	mov.w	r5, #0
 8004d28:	ea00 0204 	and.w	r2, r0, r4
 8004d2c:	ea01 0305 	and.w	r3, r1, r5
 8004d30:	493d      	ldr	r1, [pc, #244]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d32:	fb01 f003 	mul.w	r0, r1, r3
 8004d36:	2100      	movs	r1, #0
 8004d38:	fb01 f102 	mul.w	r1, r1, r2
 8004d3c:	1844      	adds	r4, r0, r1
 8004d3e:	493a      	ldr	r1, [pc, #232]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d40:	fba2 0101 	umull	r0, r1, r2, r1
 8004d44:	1863      	adds	r3, r4, r1
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f7fb fa9e 	bl	8000290 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e04a      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	ea02 0400 	and.w	r4, r2, r0
 8004d76:	ea03 0501 	and.w	r5, r3, r1
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	014b      	lsls	r3, r1, #5
 8004d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d8c:	0142      	lsls	r2, r0, #5
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	1b00      	subs	r0, r0, r4
 8004d94:	eb61 0105 	sbc.w	r1, r1, r5
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	018b      	lsls	r3, r1, #6
 8004da2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da6:	0182      	lsls	r2, r0, #6
 8004da8:	1a12      	subs	r2, r2, r0
 8004daa:	eb63 0301 	sbc.w	r3, r3, r1
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	00d9      	lsls	r1, r3, #3
 8004db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dbc:	00d0      	lsls	r0, r2, #3
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	1912      	adds	r2, r2, r4
 8004dc4:	eb45 0303 	adc.w	r3, r5, r3
 8004dc8:	f04f 0000 	mov.w	r0, #0
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	0299      	lsls	r1, r3, #10
 8004dd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dd6:	0290      	lsls	r0, r2, #10
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	f7fb fa52 	bl	8000290 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x164>)
 8004e12:	60bb      	str	r3, [r7, #8]
      break;
 8004e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e16:	68bb      	ldr	r3, [r7, #8]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	017d7840 	.word	0x017d7840

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000018 	.word	0x20000018

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	08007218 	.word	0x08007218

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	08007218 	.word	0x08007218

08004e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07b      	b.n	8004f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d108      	bne.n	8004ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb6:	d009      	beq.n	8004ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
 8004ebe:	e005      	b.n	8004ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fb ff78 	bl	8000ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	ea42 0103 	orr.w	r1, r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0104 	and.w	r1, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f003 0210 	and.w	r2, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b088      	sub	sp, #32
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_SPI_Transmit+0x22>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e126      	b.n	8005216 <HAL_SPI_Transmit+0x270>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd0:	f7fe fd4a 	bl	8003a68 <HAL_GetTick>
 8004fd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fea:	e10b      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_SPI_Transmit+0x52>
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ffc:	e102      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2203      	movs	r2, #3
 8005002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005044:	d10f      	bne.n	8005066 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d007      	beq.n	8005084 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508c:	d14b      	bne.n	8005126 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0xf6>
 8005096:	8afb      	ldrh	r3, [r7, #22]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d13e      	bne.n	800511a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	881a      	ldrh	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050c0:	e02b      	b.n	800511a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d112      	bne.n	80050f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80050f4:	e011      	b.n	800511a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f6:	f7fe fcb7 	bl	8003a68 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d803      	bhi.n	800510e <HAL_SPI_Transmit+0x168>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d102      	bne.n	8005114 <HAL_SPI_Transmit+0x16e>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005118:	e074      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ce      	bne.n	80050c2 <HAL_SPI_Transmit+0x11c>
 8005124:	e04c      	b.n	80051c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_SPI_Transmit+0x18e>
 800512e:	8afb      	ldrh	r3, [r7, #22]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d140      	bne.n	80051b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	7812      	ldrb	r2, [r2, #0]
 8005140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800515a:	e02c      	b.n	80051b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d113      	bne.n	8005192 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005190:	e011      	b.n	80051b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005192:	f7fe fc69 	bl	8003a68 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d803      	bhi.n	80051aa <HAL_SPI_Transmit+0x204>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d102      	bne.n	80051b0 <HAL_SPI_Transmit+0x20a>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051b4:	e026      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1cd      	bne.n	800515c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fbcb 	bl	8005960 <SPI_EndRxTxTransaction>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e000      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005214:	7ffb      	ldrb	r3, [r7, #31]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b088      	sub	sp, #32
 8005222:	af02      	add	r7, sp, #8
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523a:	d112      	bne.n	8005262 <HAL_SPI_Receive+0x44>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10e      	bne.n	8005262 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2204      	movs	r2, #4
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f8f1 	bl	8005440 <HAL_SPI_TransmitReceive>
 800525e:	4603      	mov	r3, r0
 8005260:	e0ea      	b.n	8005438 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_SPI_Receive+0x52>
 800526c:	2302      	movs	r3, #2
 800526e:	e0e3      	b.n	8005438 <HAL_SPI_Receive+0x21a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005278:	f7fe fbf6 	bl	8003a68 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d002      	beq.n	8005290 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800528a:	2302      	movs	r3, #2
 800528c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800528e:	e0ca      	b.n	8005426 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_SPI_Receive+0x7e>
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052a0:	e0c1      	b.n	8005426 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2204      	movs	r2, #4
 80052a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	88fa      	ldrh	r2, [r7, #6]
 80052ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e8:	d10f      	bne.n	800530a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d007      	beq.n	8005328 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005326:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d162      	bne.n	80053f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005330:	e02e      	b.n	8005390 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d115      	bne.n	800536c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f103 020c 	add.w	r2, r3, #12
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800536a:	e011      	b.n	8005390 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800536c:	f7fe fb7c 	bl	8003a68 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d803      	bhi.n	8005384 <HAL_SPI_Receive+0x166>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d102      	bne.n	800538a <HAL_SPI_Receive+0x16c>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800538e:	e04a      	b.n	8005426 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1cb      	bne.n	8005332 <HAL_SPI_Receive+0x114>
 800539a:	e031      	b.n	8005400 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d113      	bne.n	80053d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	b292      	uxth	r2, r2
 80053b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d0:	e011      	b.n	80053f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d2:	f7fe fb49 	bl	8003a68 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d803      	bhi.n	80053ea <HAL_SPI_Receive+0x1cc>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Receive+0x1d2>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053f4:	e017      	b.n	8005426 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1cd      	bne.n	800539c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fa45 	bl	8005894 <SPI_EndRxTransaction>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e000      	b.n	8005426 <HAL_SPI_Receive+0x208>
  }

error :
 8005424:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	; 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800544e:	2301      	movs	r3, #1
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x26>
 8005462:	2302      	movs	r3, #2
 8005464:	e18a      	b.n	800577c <HAL_SPI_TransmitReceive+0x33c>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546e:	f7fe fafb 	bl	8003a68 <HAL_GetTick>
 8005472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800548c:	2b01      	cmp	r3, #1
 800548e:	d00f      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x70>
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d107      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x68>
 80054a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d003      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054ae:	e15b      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x82>
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054c8:	e14e      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d003      	beq.n	80054de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2205      	movs	r2, #5
 80054da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	887a      	ldrh	r2, [r7, #2]
 80054ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	887a      	ldrh	r2, [r7, #2]
 80054f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	887a      	ldrh	r2, [r7, #2]
 8005506:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d007      	beq.n	8005532 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005530:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553a:	d178      	bne.n	800562e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_SPI_TransmitReceive+0x10a>
 8005544:	8b7b      	ldrh	r3, [r7, #26]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d166      	bne.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	1c9a      	adds	r2, r3, #2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800556e:	e053      	b.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d11b      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x176>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d016      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x176>
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d113      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	881a      	ldrh	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	1c9a      	adds	r2, r3, #2
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d119      	bne.n	80055f8 <HAL_SPI_TransmitReceive+0x1b8>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d014      	beq.n	80055f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	b292      	uxth	r2, r2
 80055da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055f4:	2301      	movs	r3, #1
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055f8:	f7fe fa36 	bl	8003a68 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005604:	429a      	cmp	r2, r3
 8005606:	d807      	bhi.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d003      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005616:	e0a7      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1a6      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x130>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1a1      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x130>
 800562c:	e07c      	b.n	8005728 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_SPI_TransmitReceive+0x1fc>
 8005636:	8b7b      	ldrh	r3, [r7, #26]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d16b      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	7812      	ldrb	r2, [r2, #0]
 8005648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005662:	e057      	b.n	8005714 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d11c      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x26c>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d017      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x26c>
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d114      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d119      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x2ae>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d014      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ea:	2301      	movs	r3, #1
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056ee:	f7fe f9bb 	bl	8003a68 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d803      	bhi.n	8005706 <HAL_SPI_TransmitReceive+0x2c6>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d102      	bne.n	800570c <HAL_SPI_TransmitReceive+0x2cc>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005712:	e029      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1a2      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x224>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d19d      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f917 	bl	8005960 <SPI_EndRxTxTransaction>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d006      	beq.n	8005746 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005744:	e010      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	e000      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005766:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800577c:	4618      	mov	r0, r3
 800577e:	3730      	adds	r7, #48	; 0x30
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005794:	f7fe f968 	bl	8003a68 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	4413      	add	r3, r2
 80057a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057a4:	f7fe f960 	bl	8003a68 <HAL_GetTick>
 80057a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057aa:	4b39      	ldr	r3, [pc, #228]	; (8005890 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	015b      	lsls	r3, r3, #5
 80057b0:	0d1b      	lsrs	r3, r3, #20
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ba:	e054      	b.n	8005866 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d050      	beq.n	8005866 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057c4:	f7fe f950 	bl	8003a68 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d902      	bls.n	80057da <SPI_WaitFlagStateUntilTimeout+0x56>
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d13d      	bne.n	8005856 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f2:	d111      	bne.n	8005818 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fc:	d004      	beq.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d107      	bne.n	8005818 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005816:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005820:	d10f      	bne.n	8005842 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005840:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e017      	b.n	8005886 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	3b01      	subs	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d19b      	bne.n	80057bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000018 	.word	0x20000018

08005894 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a8:	d111      	bne.n	80058ce <SPI_EndRxTransaction+0x3a>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b2:	d004      	beq.n	80058be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d107      	bne.n	80058ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d6:	d12a      	bne.n	800592e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e0:	d012      	beq.n	8005908 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2180      	movs	r1, #128	; 0x80
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff ff49 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02d      	beq.n	8005954 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e026      	b.n	8005956 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	2101      	movs	r1, #1
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff ff36 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01a      	beq.n	8005954 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e013      	b.n	8005956 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2200      	movs	r2, #0
 8005936:	2101      	movs	r1, #1
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff ff23 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e000      	b.n	8005956 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <SPI_EndRxTxTransaction+0x7c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <SPI_EndRxTxTransaction+0x80>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	0d5b      	lsrs	r3, r3, #21
 8005978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598a:	d112      	bne.n	80059b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fef4 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e00f      	b.n	80059d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d0f2      	beq.n	80059b2 <SPI_EndRxTxTransaction+0x52>
 80059cc:	e000      	b.n	80059d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80059ce:	bf00      	nop
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000018 	.word	0x20000018
 80059e0:	165e9f81 	.word	0x165e9f81

080059e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e03f      	b.n	8005a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fb fdf8 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f905 	bl	8005c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b08a      	sub	sp, #40	; 0x28
 8005a82:	af02      	add	r7, sp, #8
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d17c      	bne.n	8005b98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_UART_Transmit+0x2c>
 8005aa4:	88fb      	ldrh	r3, [r7, #6]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e075      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Transmit+0x3e>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e06e      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2221      	movs	r2, #33	; 0x21
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad2:	f7fd ffc9 	bl	8003a68 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aec:	d108      	bne.n	8005b00 <HAL_UART_Transmit+0x82>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e003      	b.n	8005b08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b10:	e02a      	b.n	8005b68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2180      	movs	r1, #128	; 0x80
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f840 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e036      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	3302      	adds	r3, #2
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e007      	b.n	8005b5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1cf      	bne.n	8005b12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2140      	movs	r1, #64	; 0x40
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f810 	bl	8005ba2 <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e006      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e000      	b.n	8005b9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b98:	2302      	movs	r3, #2
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb2:	e02c      	b.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d028      	beq.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d007      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bc2:	f7fd ff51 	bl	8003a68 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d21d      	bcs.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005be0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e00f      	b.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d0c3      	beq.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	b09f      	sub	sp, #124	; 0x7c
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4e:	68d9      	ldr	r1, [r3, #12]
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	ea40 0301 	orr.w	r3, r0, r1
 8005c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c7c:	f021 010c 	bic.w	r1, r1, #12
 8005c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c86:	430b      	orrs	r3, r1
 8005c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c96:	6999      	ldr	r1, [r3, #24]
 8005c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	ea40 0301 	orr.w	r3, r0, r1
 8005ca0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4bc5      	ldr	r3, [pc, #788]	; (8005fbc <UART_SetConfig+0x384>)
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d004      	beq.n	8005cb6 <UART_SetConfig+0x7e>
 8005cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4bc3      	ldr	r3, [pc, #780]	; (8005fc0 <UART_SetConfig+0x388>)
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d103      	bne.n	8005cbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cb6:	f7ff f8d9 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8005cba:	6778      	str	r0, [r7, #116]	; 0x74
 8005cbc:	e002      	b.n	8005cc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cbe:	f7ff f8c1 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8005cc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ccc:	f040 80b6 	bne.w	8005e3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	f04f 0500 	mov.w	r5, #0
 8005cd8:	4622      	mov	r2, r4
 8005cda:	462b      	mov	r3, r5
 8005cdc:	1891      	adds	r1, r2, r2
 8005cde:	6439      	str	r1, [r7, #64]	; 0x40
 8005ce0:	415b      	adcs	r3, r3
 8005ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ce8:	1912      	adds	r2, r2, r4
 8005cea:	eb45 0303 	adc.w	r3, r5, r3
 8005cee:	f04f 0000 	mov.w	r0, #0
 8005cf2:	f04f 0100 	mov.w	r1, #0
 8005cf6:	00d9      	lsls	r1, r3, #3
 8005cf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cfc:	00d0      	lsls	r0, r2, #3
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	1911      	adds	r1, r2, r4
 8005d04:	6639      	str	r1, [r7, #96]	; 0x60
 8005d06:	416b      	adcs	r3, r5
 8005d08:	667b      	str	r3, [r7, #100]	; 0x64
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	1891      	adds	r1, r2, r2
 8005d16:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d18:	415b      	adcs	r3, r3
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d24:	f7fa fab4 	bl	8000290 <__aeabi_uldivmod>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4ba5      	ldr	r3, [pc, #660]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	011e      	lsls	r6, r3, #4
 8005d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d38:	461c      	mov	r4, r3
 8005d3a:	f04f 0500 	mov.w	r5, #0
 8005d3e:	4622      	mov	r2, r4
 8005d40:	462b      	mov	r3, r5
 8005d42:	1891      	adds	r1, r2, r2
 8005d44:	6339      	str	r1, [r7, #48]	; 0x30
 8005d46:	415b      	adcs	r3, r3
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d4e:	1912      	adds	r2, r2, r4
 8005d50:	eb45 0303 	adc.w	r3, r5, r3
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f04f 0100 	mov.w	r1, #0
 8005d5c:	00d9      	lsls	r1, r3, #3
 8005d5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d62:	00d0      	lsls	r0, r2, #3
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	1911      	adds	r1, r2, r4
 8005d6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d6c:	416b      	adcs	r3, r5
 8005d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f04f 0300 	mov.w	r3, #0
 8005d7a:	1891      	adds	r1, r2, r2
 8005d7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d7e:	415b      	adcs	r3, r3
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d8a:	f7fa fa81 	bl	8000290 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4b8c      	ldr	r3, [pc, #560]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005d94:	fba3 1302 	umull	r1, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	2164      	movs	r1, #100	; 0x64
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	3332      	adds	r3, #50	; 0x32
 8005da6:	4a87      	ldr	r2, [pc, #540]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005da8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005db4:	441e      	add	r6, r3
 8005db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db8:	4618      	mov	r0, r3
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	1894      	adds	r4, r2, r2
 8005dc4:	623c      	str	r4, [r7, #32]
 8005dc6:	415b      	adcs	r3, r3
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dce:	1812      	adds	r2, r2, r0
 8005dd0:	eb41 0303 	adc.w	r3, r1, r3
 8005dd4:	f04f 0400 	mov.w	r4, #0
 8005dd8:	f04f 0500 	mov.w	r5, #0
 8005ddc:	00dd      	lsls	r5, r3, #3
 8005dde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005de2:	00d4      	lsls	r4, r2, #3
 8005de4:	4622      	mov	r2, r4
 8005de6:	462b      	mov	r3, r5
 8005de8:	1814      	adds	r4, r2, r0
 8005dea:	653c      	str	r4, [r7, #80]	; 0x50
 8005dec:	414b      	adcs	r3, r1
 8005dee:	657b      	str	r3, [r7, #84]	; 0x54
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	461a      	mov	r2, r3
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	1891      	adds	r1, r2, r2
 8005dfc:	61b9      	str	r1, [r7, #24]
 8005dfe:	415b      	adcs	r3, r3
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e0a:	f7fa fa41 	bl	8000290 <__aeabi_uldivmod>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4b6c      	ldr	r3, [pc, #432]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005e14:	fba3 1302 	umull	r1, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	2164      	movs	r1, #100	; 0x64
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	3332      	adds	r3, #50	; 0x32
 8005e26:	4a67      	ldr	r2, [pc, #412]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005e28:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f003 0207 	and.w	r2, r3, #7
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4432      	add	r2, r6
 8005e38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e3a:	e0b9      	b.n	8005fb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e3e:	461c      	mov	r4, r3
 8005e40:	f04f 0500 	mov.w	r5, #0
 8005e44:	4622      	mov	r2, r4
 8005e46:	462b      	mov	r3, r5
 8005e48:	1891      	adds	r1, r2, r2
 8005e4a:	6139      	str	r1, [r7, #16]
 8005e4c:	415b      	adcs	r3, r3
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e54:	1912      	adds	r2, r2, r4
 8005e56:	eb45 0303 	adc.w	r3, r5, r3
 8005e5a:	f04f 0000 	mov.w	r0, #0
 8005e5e:	f04f 0100 	mov.w	r1, #0
 8005e62:	00d9      	lsls	r1, r3, #3
 8005e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e68:	00d0      	lsls	r0, r2, #3
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	eb12 0804 	adds.w	r8, r2, r4
 8005e72:	eb43 0905 	adc.w	r9, r3, r5
 8005e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f04f 0100 	mov.w	r1, #0
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	008b      	lsls	r3, r1, #2
 8005e8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e8e:	0082      	lsls	r2, r0, #2
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa f9fc 	bl	8000290 <__aeabi_uldivmod>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4b49      	ldr	r3, [pc, #292]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	011e      	lsls	r6, r3, #4
 8005ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f04f 0100 	mov.w	r1, #0
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	1894      	adds	r4, r2, r2
 8005eb4:	60bc      	str	r4, [r7, #8]
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ebe:	1812      	adds	r2, r2, r0
 8005ec0:	eb41 0303 	adc.w	r3, r1, r3
 8005ec4:	f04f 0400 	mov.w	r4, #0
 8005ec8:	f04f 0500 	mov.w	r5, #0
 8005ecc:	00dd      	lsls	r5, r3, #3
 8005ece:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ed2:	00d4      	lsls	r4, r2, #3
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	462b      	mov	r3, r5
 8005ed8:	1814      	adds	r4, r2, r0
 8005eda:	64bc      	str	r4, [r7, #72]	; 0x48
 8005edc:	414b      	adcs	r3, r1
 8005ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	008b      	lsls	r3, r1, #2
 8005ef4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ef8:	0082      	lsls	r2, r0, #2
 8005efa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005efe:	f7fa f9c7 	bl	8000290 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4b2f      	ldr	r3, [pc, #188]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005f08:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2164      	movs	r1, #100	; 0x64
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	3332      	adds	r3, #50	; 0x32
 8005f1a:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f26:	441e      	add	r6, r3
 8005f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f04f 0100 	mov.w	r1, #0
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	1894      	adds	r4, r2, r2
 8005f36:	603c      	str	r4, [r7, #0]
 8005f38:	415b      	adcs	r3, r3
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f40:	1812      	adds	r2, r2, r0
 8005f42:	eb41 0303 	adc.w	r3, r1, r3
 8005f46:	f04f 0400 	mov.w	r4, #0
 8005f4a:	f04f 0500 	mov.w	r5, #0
 8005f4e:	00dd      	lsls	r5, r3, #3
 8005f50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f54:	00d4      	lsls	r4, r2, #3
 8005f56:	4622      	mov	r2, r4
 8005f58:	462b      	mov	r3, r5
 8005f5a:	eb12 0a00 	adds.w	sl, r2, r0
 8005f5e:	eb43 0b01 	adc.w	fp, r3, r1
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	008b      	lsls	r3, r1, #2
 8005f76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f7a:	0082      	lsls	r2, r0, #2
 8005f7c:	4650      	mov	r0, sl
 8005f7e:	4659      	mov	r1, fp
 8005f80:	f7fa f986 	bl	8000290 <__aeabi_uldivmod>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2164      	movs	r1, #100	; 0x64
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	3332      	adds	r3, #50	; 0x32
 8005f9c:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <UART_SetConfig+0x38c>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4432      	add	r2, r6
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	377c      	adds	r7, #124	; 0x7c
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	40011000 	.word	0x40011000
 8005fc0:	40011400 	.word	0x40011400
 8005fc4:	51eb851f 	.word	0x51eb851f

08005fc8 <__errno>:
 8005fc8:	4b01      	ldr	r3, [pc, #4]	; (8005fd0 <__errno+0x8>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000054 	.word	0x20000054

08005fd4 <__libc_init_array>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	4d0d      	ldr	r5, [pc, #52]	; (800600c <__libc_init_array+0x38>)
 8005fd8:	4c0d      	ldr	r4, [pc, #52]	; (8006010 <__libc_init_array+0x3c>)
 8005fda:	1b64      	subs	r4, r4, r5
 8005fdc:	10a4      	asrs	r4, r4, #2
 8005fde:	2600      	movs	r6, #0
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	d109      	bne.n	8005ff8 <__libc_init_array+0x24>
 8005fe4:	4d0b      	ldr	r5, [pc, #44]	; (8006014 <__libc_init_array+0x40>)
 8005fe6:	4c0c      	ldr	r4, [pc, #48]	; (8006018 <__libc_init_array+0x44>)
 8005fe8:	f000 ffec 	bl	8006fc4 <_init>
 8005fec:	1b64      	subs	r4, r4, r5
 8005fee:	10a4      	asrs	r4, r4, #2
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	42a6      	cmp	r6, r4
 8005ff4:	d105      	bne.n	8006002 <__libc_init_array+0x2e>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffc:	4798      	blx	r3
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7ee      	b.n	8005fe0 <__libc_init_array+0xc>
 8006002:	f855 3b04 	ldr.w	r3, [r5], #4
 8006006:	4798      	blx	r3
 8006008:	3601      	adds	r6, #1
 800600a:	e7f2      	b.n	8005ff2 <__libc_init_array+0x1e>
 800600c:	080072c8 	.word	0x080072c8
 8006010:	080072c8 	.word	0x080072c8
 8006014:	080072c8 	.word	0x080072c8
 8006018:	080072cc 	.word	0x080072cc

0800601c <memset>:
 800601c:	4402      	add	r2, r0
 800601e:	4603      	mov	r3, r0
 8006020:	4293      	cmp	r3, r2
 8006022:	d100      	bne.n	8006026 <memset+0xa>
 8006024:	4770      	bx	lr
 8006026:	f803 1b01 	strb.w	r1, [r3], #1
 800602a:	e7f9      	b.n	8006020 <memset+0x4>

0800602c <_free_r>:
 800602c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800602e:	2900      	cmp	r1, #0
 8006030:	d048      	beq.n	80060c4 <_free_r+0x98>
 8006032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006036:	9001      	str	r0, [sp, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f1a1 0404 	sub.w	r4, r1, #4
 800603e:	bfb8      	it	lt
 8006040:	18e4      	addlt	r4, r4, r3
 8006042:	f000 fc91 	bl	8006968 <__malloc_lock>
 8006046:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <_free_r+0x9c>)
 8006048:	9801      	ldr	r0, [sp, #4]
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	4615      	mov	r5, r2
 800604e:	b933      	cbnz	r3, 800605e <_free_r+0x32>
 8006050:	6063      	str	r3, [r4, #4]
 8006052:	6014      	str	r4, [r2, #0]
 8006054:	b003      	add	sp, #12
 8006056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800605a:	f000 bc8b 	b.w	8006974 <__malloc_unlock>
 800605e:	42a3      	cmp	r3, r4
 8006060:	d90b      	bls.n	800607a <_free_r+0x4e>
 8006062:	6821      	ldr	r1, [r4, #0]
 8006064:	1862      	adds	r2, r4, r1
 8006066:	4293      	cmp	r3, r2
 8006068:	bf04      	itt	eq
 800606a:	681a      	ldreq	r2, [r3, #0]
 800606c:	685b      	ldreq	r3, [r3, #4]
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	bf04      	itt	eq
 8006072:	1852      	addeq	r2, r2, r1
 8006074:	6022      	streq	r2, [r4, #0]
 8006076:	602c      	str	r4, [r5, #0]
 8006078:	e7ec      	b.n	8006054 <_free_r+0x28>
 800607a:	461a      	mov	r2, r3
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	b10b      	cbz	r3, 8006084 <_free_r+0x58>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d9fa      	bls.n	800607a <_free_r+0x4e>
 8006084:	6811      	ldr	r1, [r2, #0]
 8006086:	1855      	adds	r5, r2, r1
 8006088:	42a5      	cmp	r5, r4
 800608a:	d10b      	bne.n	80060a4 <_free_r+0x78>
 800608c:	6824      	ldr	r4, [r4, #0]
 800608e:	4421      	add	r1, r4
 8006090:	1854      	adds	r4, r2, r1
 8006092:	42a3      	cmp	r3, r4
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	d1dd      	bne.n	8006054 <_free_r+0x28>
 8006098:	681c      	ldr	r4, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	6053      	str	r3, [r2, #4]
 800609e:	4421      	add	r1, r4
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	e7d7      	b.n	8006054 <_free_r+0x28>
 80060a4:	d902      	bls.n	80060ac <_free_r+0x80>
 80060a6:	230c      	movs	r3, #12
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	e7d3      	b.n	8006054 <_free_r+0x28>
 80060ac:	6825      	ldr	r5, [r4, #0]
 80060ae:	1961      	adds	r1, r4, r5
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf04      	itt	eq
 80060b4:	6819      	ldreq	r1, [r3, #0]
 80060b6:	685b      	ldreq	r3, [r3, #4]
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	bf04      	itt	eq
 80060bc:	1949      	addeq	r1, r1, r5
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	6054      	str	r4, [r2, #4]
 80060c2:	e7c7      	b.n	8006054 <_free_r+0x28>
 80060c4:	b003      	add	sp, #12
 80060c6:	bd30      	pop	{r4, r5, pc}
 80060c8:	200000fc 	.word	0x200000fc

080060cc <_malloc_r>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	1ccd      	adds	r5, r1, #3
 80060d0:	f025 0503 	bic.w	r5, r5, #3
 80060d4:	3508      	adds	r5, #8
 80060d6:	2d0c      	cmp	r5, #12
 80060d8:	bf38      	it	cc
 80060da:	250c      	movcc	r5, #12
 80060dc:	2d00      	cmp	r5, #0
 80060de:	4606      	mov	r6, r0
 80060e0:	db01      	blt.n	80060e6 <_malloc_r+0x1a>
 80060e2:	42a9      	cmp	r1, r5
 80060e4:	d903      	bls.n	80060ee <_malloc_r+0x22>
 80060e6:	230c      	movs	r3, #12
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	2000      	movs	r0, #0
 80060ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ee:	f000 fc3b 	bl	8006968 <__malloc_lock>
 80060f2:	4921      	ldr	r1, [pc, #132]	; (8006178 <_malloc_r+0xac>)
 80060f4:	680a      	ldr	r2, [r1, #0]
 80060f6:	4614      	mov	r4, r2
 80060f8:	b99c      	cbnz	r4, 8006122 <_malloc_r+0x56>
 80060fa:	4f20      	ldr	r7, [pc, #128]	; (800617c <_malloc_r+0xb0>)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	b923      	cbnz	r3, 800610a <_malloc_r+0x3e>
 8006100:	4621      	mov	r1, r4
 8006102:	4630      	mov	r0, r6
 8006104:	f000 f8ca 	bl	800629c <_sbrk_r>
 8006108:	6038      	str	r0, [r7, #0]
 800610a:	4629      	mov	r1, r5
 800610c:	4630      	mov	r0, r6
 800610e:	f000 f8c5 	bl	800629c <_sbrk_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	d123      	bne.n	800615e <_malloc_r+0x92>
 8006116:	230c      	movs	r3, #12
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	4630      	mov	r0, r6
 800611c:	f000 fc2a 	bl	8006974 <__malloc_unlock>
 8006120:	e7e3      	b.n	80060ea <_malloc_r+0x1e>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	1b5b      	subs	r3, r3, r5
 8006126:	d417      	bmi.n	8006158 <_malloc_r+0x8c>
 8006128:	2b0b      	cmp	r3, #11
 800612a:	d903      	bls.n	8006134 <_malloc_r+0x68>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	441c      	add	r4, r3
 8006130:	6025      	str	r5, [r4, #0]
 8006132:	e004      	b.n	800613e <_malloc_r+0x72>
 8006134:	6863      	ldr	r3, [r4, #4]
 8006136:	42a2      	cmp	r2, r4
 8006138:	bf0c      	ite	eq
 800613a:	600b      	streq	r3, [r1, #0]
 800613c:	6053      	strne	r3, [r2, #4]
 800613e:	4630      	mov	r0, r6
 8006140:	f000 fc18 	bl	8006974 <__malloc_unlock>
 8006144:	f104 000b 	add.w	r0, r4, #11
 8006148:	1d23      	adds	r3, r4, #4
 800614a:	f020 0007 	bic.w	r0, r0, #7
 800614e:	1ac2      	subs	r2, r0, r3
 8006150:	d0cc      	beq.n	80060ec <_malloc_r+0x20>
 8006152:	1a1b      	subs	r3, r3, r0
 8006154:	50a3      	str	r3, [r4, r2]
 8006156:	e7c9      	b.n	80060ec <_malloc_r+0x20>
 8006158:	4622      	mov	r2, r4
 800615a:	6864      	ldr	r4, [r4, #4]
 800615c:	e7cc      	b.n	80060f8 <_malloc_r+0x2c>
 800615e:	1cc4      	adds	r4, r0, #3
 8006160:	f024 0403 	bic.w	r4, r4, #3
 8006164:	42a0      	cmp	r0, r4
 8006166:	d0e3      	beq.n	8006130 <_malloc_r+0x64>
 8006168:	1a21      	subs	r1, r4, r0
 800616a:	4630      	mov	r0, r6
 800616c:	f000 f896 	bl	800629c <_sbrk_r>
 8006170:	3001      	adds	r0, #1
 8006172:	d1dd      	bne.n	8006130 <_malloc_r+0x64>
 8006174:	e7cf      	b.n	8006116 <_malloc_r+0x4a>
 8006176:	bf00      	nop
 8006178:	200000fc 	.word	0x200000fc
 800617c:	20000100 	.word	0x20000100

08006180 <iprintf>:
 8006180:	b40f      	push	{r0, r1, r2, r3}
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <iprintf+0x2c>)
 8006184:	b513      	push	{r0, r1, r4, lr}
 8006186:	681c      	ldr	r4, [r3, #0]
 8006188:	b124      	cbz	r4, 8006194 <iprintf+0x14>
 800618a:	69a3      	ldr	r3, [r4, #24]
 800618c:	b913      	cbnz	r3, 8006194 <iprintf+0x14>
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fad4 	bl	800673c <__sinit>
 8006194:	ab05      	add	r3, sp, #20
 8006196:	9a04      	ldr	r2, [sp, #16]
 8006198:	68a1      	ldr	r1, [r4, #8]
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fc19 	bl	80069d4 <_vfiprintf_r>
 80061a2:	b002      	add	sp, #8
 80061a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a8:	b004      	add	sp, #16
 80061aa:	4770      	bx	lr
 80061ac:	20000054 	.word	0x20000054

080061b0 <_puts_r>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	460e      	mov	r6, r1
 80061b4:	4605      	mov	r5, r0
 80061b6:	b118      	cbz	r0, 80061c0 <_puts_r+0x10>
 80061b8:	6983      	ldr	r3, [r0, #24]
 80061ba:	b90b      	cbnz	r3, 80061c0 <_puts_r+0x10>
 80061bc:	f000 fabe 	bl	800673c <__sinit>
 80061c0:	69ab      	ldr	r3, [r5, #24]
 80061c2:	68ac      	ldr	r4, [r5, #8]
 80061c4:	b913      	cbnz	r3, 80061cc <_puts_r+0x1c>
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 fab8 	bl	800673c <__sinit>
 80061cc:	4b2c      	ldr	r3, [pc, #176]	; (8006280 <_puts_r+0xd0>)
 80061ce:	429c      	cmp	r4, r3
 80061d0:	d120      	bne.n	8006214 <_puts_r+0x64>
 80061d2:	686c      	ldr	r4, [r5, #4]
 80061d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d6:	07db      	lsls	r3, r3, #31
 80061d8:	d405      	bmi.n	80061e6 <_puts_r+0x36>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	0598      	lsls	r0, r3, #22
 80061de:	d402      	bmi.n	80061e6 <_puts_r+0x36>
 80061e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e2:	f000 fb49 	bl	8006878 <__retarget_lock_acquire_recursive>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	0719      	lsls	r1, r3, #28
 80061ea:	d51d      	bpl.n	8006228 <_puts_r+0x78>
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	b1db      	cbz	r3, 8006228 <_puts_r+0x78>
 80061f0:	3e01      	subs	r6, #1
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061f8:	3b01      	subs	r3, #1
 80061fa:	60a3      	str	r3, [r4, #8]
 80061fc:	bb39      	cbnz	r1, 800624e <_puts_r+0x9e>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da38      	bge.n	8006274 <_puts_r+0xc4>
 8006202:	4622      	mov	r2, r4
 8006204:	210a      	movs	r1, #10
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f89c 	bl	8006344 <__swbuf_r>
 800620c:	3001      	adds	r0, #1
 800620e:	d011      	beq.n	8006234 <_puts_r+0x84>
 8006210:	250a      	movs	r5, #10
 8006212:	e011      	b.n	8006238 <_puts_r+0x88>
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <_puts_r+0xd4>)
 8006216:	429c      	cmp	r4, r3
 8006218:	d101      	bne.n	800621e <_puts_r+0x6e>
 800621a:	68ac      	ldr	r4, [r5, #8]
 800621c:	e7da      	b.n	80061d4 <_puts_r+0x24>
 800621e:	4b1a      	ldr	r3, [pc, #104]	; (8006288 <_puts_r+0xd8>)
 8006220:	429c      	cmp	r4, r3
 8006222:	bf08      	it	eq
 8006224:	68ec      	ldreq	r4, [r5, #12]
 8006226:	e7d5      	b.n	80061d4 <_puts_r+0x24>
 8006228:	4621      	mov	r1, r4
 800622a:	4628      	mov	r0, r5
 800622c:	f000 f8ee 	bl	800640c <__swsetup_r>
 8006230:	2800      	cmp	r0, #0
 8006232:	d0dd      	beq.n	80061f0 <_puts_r+0x40>
 8006234:	f04f 35ff 	mov.w	r5, #4294967295
 8006238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800623a:	07da      	lsls	r2, r3, #31
 800623c:	d405      	bmi.n	800624a <_puts_r+0x9a>
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	059b      	lsls	r3, r3, #22
 8006242:	d402      	bmi.n	800624a <_puts_r+0x9a>
 8006244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006246:	f000 fb18 	bl	800687a <__retarget_lock_release_recursive>
 800624a:	4628      	mov	r0, r5
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	2b00      	cmp	r3, #0
 8006250:	da04      	bge.n	800625c <_puts_r+0xac>
 8006252:	69a2      	ldr	r2, [r4, #24]
 8006254:	429a      	cmp	r2, r3
 8006256:	dc06      	bgt.n	8006266 <_puts_r+0xb6>
 8006258:	290a      	cmp	r1, #10
 800625a:	d004      	beq.n	8006266 <_puts_r+0xb6>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	6022      	str	r2, [r4, #0]
 8006262:	7019      	strb	r1, [r3, #0]
 8006264:	e7c5      	b.n	80061f2 <_puts_r+0x42>
 8006266:	4622      	mov	r2, r4
 8006268:	4628      	mov	r0, r5
 800626a:	f000 f86b 	bl	8006344 <__swbuf_r>
 800626e:	3001      	adds	r0, #1
 8006270:	d1bf      	bne.n	80061f2 <_puts_r+0x42>
 8006272:	e7df      	b.n	8006234 <_puts_r+0x84>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	250a      	movs	r5, #10
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	701d      	strb	r5, [r3, #0]
 800627e:	e7db      	b.n	8006238 <_puts_r+0x88>
 8006280:	0800724c 	.word	0x0800724c
 8006284:	0800726c 	.word	0x0800726c
 8006288:	0800722c 	.word	0x0800722c

0800628c <puts>:
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <puts+0xc>)
 800628e:	4601      	mov	r1, r0
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	f7ff bf8d 	b.w	80061b0 <_puts_r>
 8006296:	bf00      	nop
 8006298:	20000054 	.word	0x20000054

0800629c <_sbrk_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d06      	ldr	r5, [pc, #24]	; (80062b8 <_sbrk_r+0x1c>)
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	f7fb f938 	bl	800151c <_sbrk>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_sbrk_r+0x1a>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_sbrk_r+0x1a>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	20000da8 	.word	0x20000da8

080062bc <__sread>:
 80062bc:	b510      	push	{r4, lr}
 80062be:	460c      	mov	r4, r1
 80062c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c4:	f000 fe4a 	bl	8006f5c <_read_r>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	bfab      	itete	ge
 80062cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062ce:	89a3      	ldrhlt	r3, [r4, #12]
 80062d0:	181b      	addge	r3, r3, r0
 80062d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062d6:	bfac      	ite	ge
 80062d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80062da:	81a3      	strhlt	r3, [r4, #12]
 80062dc:	bd10      	pop	{r4, pc}

080062de <__swrite>:
 80062de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e2:	461f      	mov	r7, r3
 80062e4:	898b      	ldrh	r3, [r1, #12]
 80062e6:	05db      	lsls	r3, r3, #23
 80062e8:	4605      	mov	r5, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	4616      	mov	r6, r2
 80062ee:	d505      	bpl.n	80062fc <__swrite+0x1e>
 80062f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f4:	2302      	movs	r3, #2
 80062f6:	2200      	movs	r2, #0
 80062f8:	f000 fac0 	bl	800687c <_lseek_r>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	4632      	mov	r2, r6
 800630a:	463b      	mov	r3, r7
 800630c:	4628      	mov	r0, r5
 800630e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006312:	f000 b869 	b.w	80063e8 <_write_r>

08006316 <__sseek>:
 8006316:	b510      	push	{r4, lr}
 8006318:	460c      	mov	r4, r1
 800631a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631e:	f000 faad 	bl	800687c <_lseek_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	bf15      	itete	ne
 8006328:	6560      	strne	r0, [r4, #84]	; 0x54
 800632a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800632e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006332:	81a3      	strheq	r3, [r4, #12]
 8006334:	bf18      	it	ne
 8006336:	81a3      	strhne	r3, [r4, #12]
 8006338:	bd10      	pop	{r4, pc}

0800633a <__sclose>:
 800633a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800633e:	f000 b8d3 	b.w	80064e8 <_close_r>
	...

08006344 <__swbuf_r>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	460e      	mov	r6, r1
 8006348:	4614      	mov	r4, r2
 800634a:	4605      	mov	r5, r0
 800634c:	b118      	cbz	r0, 8006356 <__swbuf_r+0x12>
 800634e:	6983      	ldr	r3, [r0, #24]
 8006350:	b90b      	cbnz	r3, 8006356 <__swbuf_r+0x12>
 8006352:	f000 f9f3 	bl	800673c <__sinit>
 8006356:	4b21      	ldr	r3, [pc, #132]	; (80063dc <__swbuf_r+0x98>)
 8006358:	429c      	cmp	r4, r3
 800635a:	d12b      	bne.n	80063b4 <__swbuf_r+0x70>
 800635c:	686c      	ldr	r4, [r5, #4]
 800635e:	69a3      	ldr	r3, [r4, #24]
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	071a      	lsls	r2, r3, #28
 8006366:	d52f      	bpl.n	80063c8 <__swbuf_r+0x84>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	b36b      	cbz	r3, 80063c8 <__swbuf_r+0x84>
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	1ac0      	subs	r0, r0, r3
 8006372:	6963      	ldr	r3, [r4, #20]
 8006374:	b2f6      	uxtb	r6, r6
 8006376:	4283      	cmp	r3, r0
 8006378:	4637      	mov	r7, r6
 800637a:	dc04      	bgt.n	8006386 <__swbuf_r+0x42>
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f948 	bl	8006614 <_fflush_r>
 8006384:	bb30      	cbnz	r0, 80063d4 <__swbuf_r+0x90>
 8006386:	68a3      	ldr	r3, [r4, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	701e      	strb	r6, [r3, #0]
 8006394:	6963      	ldr	r3, [r4, #20]
 8006396:	3001      	adds	r0, #1
 8006398:	4283      	cmp	r3, r0
 800639a:	d004      	beq.n	80063a6 <__swbuf_r+0x62>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	07db      	lsls	r3, r3, #31
 80063a0:	d506      	bpl.n	80063b0 <__swbuf_r+0x6c>
 80063a2:	2e0a      	cmp	r6, #10
 80063a4:	d104      	bne.n	80063b0 <__swbuf_r+0x6c>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 f933 	bl	8006614 <_fflush_r>
 80063ae:	b988      	cbnz	r0, 80063d4 <__swbuf_r+0x90>
 80063b0:	4638      	mov	r0, r7
 80063b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b4:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <__swbuf_r+0x9c>)
 80063b6:	429c      	cmp	r4, r3
 80063b8:	d101      	bne.n	80063be <__swbuf_r+0x7a>
 80063ba:	68ac      	ldr	r4, [r5, #8]
 80063bc:	e7cf      	b.n	800635e <__swbuf_r+0x1a>
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <__swbuf_r+0xa0>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	bf08      	it	eq
 80063c4:	68ec      	ldreq	r4, [r5, #12]
 80063c6:	e7ca      	b.n	800635e <__swbuf_r+0x1a>
 80063c8:	4621      	mov	r1, r4
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f81e 	bl	800640c <__swsetup_r>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d0cb      	beq.n	800636c <__swbuf_r+0x28>
 80063d4:	f04f 37ff 	mov.w	r7, #4294967295
 80063d8:	e7ea      	b.n	80063b0 <__swbuf_r+0x6c>
 80063da:	bf00      	nop
 80063dc:	0800724c 	.word	0x0800724c
 80063e0:	0800726c 	.word	0x0800726c
 80063e4:	0800722c 	.word	0x0800722c

080063e8 <_write_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d07      	ldr	r5, [pc, #28]	; (8006408 <_write_r+0x20>)
 80063ec:	4604      	mov	r4, r0
 80063ee:	4608      	mov	r0, r1
 80063f0:	4611      	mov	r1, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fb f83f 	bl	800147a <_write>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_write_r+0x1e>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_write_r+0x1e>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20000da8 	.word	0x20000da8

0800640c <__swsetup_r>:
 800640c:	4b32      	ldr	r3, [pc, #200]	; (80064d8 <__swsetup_r+0xcc>)
 800640e:	b570      	push	{r4, r5, r6, lr}
 8006410:	681d      	ldr	r5, [r3, #0]
 8006412:	4606      	mov	r6, r0
 8006414:	460c      	mov	r4, r1
 8006416:	b125      	cbz	r5, 8006422 <__swsetup_r+0x16>
 8006418:	69ab      	ldr	r3, [r5, #24]
 800641a:	b913      	cbnz	r3, 8006422 <__swsetup_r+0x16>
 800641c:	4628      	mov	r0, r5
 800641e:	f000 f98d 	bl	800673c <__sinit>
 8006422:	4b2e      	ldr	r3, [pc, #184]	; (80064dc <__swsetup_r+0xd0>)
 8006424:	429c      	cmp	r4, r3
 8006426:	d10f      	bne.n	8006448 <__swsetup_r+0x3c>
 8006428:	686c      	ldr	r4, [r5, #4]
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006430:	0719      	lsls	r1, r3, #28
 8006432:	d42c      	bmi.n	800648e <__swsetup_r+0x82>
 8006434:	06dd      	lsls	r5, r3, #27
 8006436:	d411      	bmi.n	800645c <__swsetup_r+0x50>
 8006438:	2309      	movs	r3, #9
 800643a:	6033      	str	r3, [r6, #0]
 800643c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	f04f 30ff 	mov.w	r0, #4294967295
 8006446:	e03e      	b.n	80064c6 <__swsetup_r+0xba>
 8006448:	4b25      	ldr	r3, [pc, #148]	; (80064e0 <__swsetup_r+0xd4>)
 800644a:	429c      	cmp	r4, r3
 800644c:	d101      	bne.n	8006452 <__swsetup_r+0x46>
 800644e:	68ac      	ldr	r4, [r5, #8]
 8006450:	e7eb      	b.n	800642a <__swsetup_r+0x1e>
 8006452:	4b24      	ldr	r3, [pc, #144]	; (80064e4 <__swsetup_r+0xd8>)
 8006454:	429c      	cmp	r4, r3
 8006456:	bf08      	it	eq
 8006458:	68ec      	ldreq	r4, [r5, #12]
 800645a:	e7e6      	b.n	800642a <__swsetup_r+0x1e>
 800645c:	0758      	lsls	r0, r3, #29
 800645e:	d512      	bpl.n	8006486 <__swsetup_r+0x7a>
 8006460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006462:	b141      	cbz	r1, 8006476 <__swsetup_r+0x6a>
 8006464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006468:	4299      	cmp	r1, r3
 800646a:	d002      	beq.n	8006472 <__swsetup_r+0x66>
 800646c:	4630      	mov	r0, r6
 800646e:	f7ff fddd 	bl	800602c <_free_r>
 8006472:	2300      	movs	r3, #0
 8006474:	6363      	str	r3, [r4, #52]	; 0x34
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	2300      	movs	r3, #0
 8006480:	6063      	str	r3, [r4, #4]
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f043 0308 	orr.w	r3, r3, #8
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	6923      	ldr	r3, [r4, #16]
 8006490:	b94b      	cbnz	r3, 80064a6 <__swsetup_r+0x9a>
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800649c:	d003      	beq.n	80064a6 <__swsetup_r+0x9a>
 800649e:	4621      	mov	r1, r4
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 fa21 	bl	80068e8 <__smakebuf_r>
 80064a6:	89a0      	ldrh	r0, [r4, #12]
 80064a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064ac:	f010 0301 	ands.w	r3, r0, #1
 80064b0:	d00a      	beq.n	80064c8 <__swsetup_r+0xbc>
 80064b2:	2300      	movs	r3, #0
 80064b4:	60a3      	str	r3, [r4, #8]
 80064b6:	6963      	ldr	r3, [r4, #20]
 80064b8:	425b      	negs	r3, r3
 80064ba:	61a3      	str	r3, [r4, #24]
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	b943      	cbnz	r3, 80064d2 <__swsetup_r+0xc6>
 80064c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064c4:	d1ba      	bne.n	800643c <__swsetup_r+0x30>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	0781      	lsls	r1, r0, #30
 80064ca:	bf58      	it	pl
 80064cc:	6963      	ldrpl	r3, [r4, #20]
 80064ce:	60a3      	str	r3, [r4, #8]
 80064d0:	e7f4      	b.n	80064bc <__swsetup_r+0xb0>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e7f7      	b.n	80064c6 <__swsetup_r+0xba>
 80064d6:	bf00      	nop
 80064d8:	20000054 	.word	0x20000054
 80064dc:	0800724c 	.word	0x0800724c
 80064e0:	0800726c 	.word	0x0800726c
 80064e4:	0800722c 	.word	0x0800722c

080064e8 <_close_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	4d06      	ldr	r5, [pc, #24]	; (8006504 <_close_r+0x1c>)
 80064ec:	2300      	movs	r3, #0
 80064ee:	4604      	mov	r4, r0
 80064f0:	4608      	mov	r0, r1
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	f7fa ffdd 	bl	80014b2 <_close>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_close_r+0x1a>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_close_r+0x1a>
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000da8 	.word	0x20000da8

08006508 <__sflush_r>:
 8006508:	898a      	ldrh	r2, [r1, #12]
 800650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650e:	4605      	mov	r5, r0
 8006510:	0710      	lsls	r0, r2, #28
 8006512:	460c      	mov	r4, r1
 8006514:	d458      	bmi.n	80065c8 <__sflush_r+0xc0>
 8006516:	684b      	ldr	r3, [r1, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dc05      	bgt.n	8006528 <__sflush_r+0x20>
 800651c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	dc02      	bgt.n	8006528 <__sflush_r+0x20>
 8006522:	2000      	movs	r0, #0
 8006524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800652a:	2e00      	cmp	r6, #0
 800652c:	d0f9      	beq.n	8006522 <__sflush_r+0x1a>
 800652e:	2300      	movs	r3, #0
 8006530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006534:	682f      	ldr	r7, [r5, #0]
 8006536:	602b      	str	r3, [r5, #0]
 8006538:	d032      	beq.n	80065a0 <__sflush_r+0x98>
 800653a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	075a      	lsls	r2, r3, #29
 8006540:	d505      	bpl.n	800654e <__sflush_r+0x46>
 8006542:	6863      	ldr	r3, [r4, #4]
 8006544:	1ac0      	subs	r0, r0, r3
 8006546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006548:	b10b      	cbz	r3, 800654e <__sflush_r+0x46>
 800654a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800654c:	1ac0      	subs	r0, r0, r3
 800654e:	2300      	movs	r3, #0
 8006550:	4602      	mov	r2, r0
 8006552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006554:	6a21      	ldr	r1, [r4, #32]
 8006556:	4628      	mov	r0, r5
 8006558:	47b0      	blx	r6
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	d106      	bne.n	800656e <__sflush_r+0x66>
 8006560:	6829      	ldr	r1, [r5, #0]
 8006562:	291d      	cmp	r1, #29
 8006564:	d82c      	bhi.n	80065c0 <__sflush_r+0xb8>
 8006566:	4a2a      	ldr	r2, [pc, #168]	; (8006610 <__sflush_r+0x108>)
 8006568:	40ca      	lsrs	r2, r1
 800656a:	07d6      	lsls	r6, r2, #31
 800656c:	d528      	bpl.n	80065c0 <__sflush_r+0xb8>
 800656e:	2200      	movs	r2, #0
 8006570:	6062      	str	r2, [r4, #4]
 8006572:	04d9      	lsls	r1, r3, #19
 8006574:	6922      	ldr	r2, [r4, #16]
 8006576:	6022      	str	r2, [r4, #0]
 8006578:	d504      	bpl.n	8006584 <__sflush_r+0x7c>
 800657a:	1c42      	adds	r2, r0, #1
 800657c:	d101      	bne.n	8006582 <__sflush_r+0x7a>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	b903      	cbnz	r3, 8006584 <__sflush_r+0x7c>
 8006582:	6560      	str	r0, [r4, #84]	; 0x54
 8006584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006586:	602f      	str	r7, [r5, #0]
 8006588:	2900      	cmp	r1, #0
 800658a:	d0ca      	beq.n	8006522 <__sflush_r+0x1a>
 800658c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006590:	4299      	cmp	r1, r3
 8006592:	d002      	beq.n	800659a <__sflush_r+0x92>
 8006594:	4628      	mov	r0, r5
 8006596:	f7ff fd49 	bl	800602c <_free_r>
 800659a:	2000      	movs	r0, #0
 800659c:	6360      	str	r0, [r4, #52]	; 0x34
 800659e:	e7c1      	b.n	8006524 <__sflush_r+0x1c>
 80065a0:	6a21      	ldr	r1, [r4, #32]
 80065a2:	2301      	movs	r3, #1
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b0      	blx	r6
 80065a8:	1c41      	adds	r1, r0, #1
 80065aa:	d1c7      	bne.n	800653c <__sflush_r+0x34>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0c4      	beq.n	800653c <__sflush_r+0x34>
 80065b2:	2b1d      	cmp	r3, #29
 80065b4:	d001      	beq.n	80065ba <__sflush_r+0xb2>
 80065b6:	2b16      	cmp	r3, #22
 80065b8:	d101      	bne.n	80065be <__sflush_r+0xb6>
 80065ba:	602f      	str	r7, [r5, #0]
 80065bc:	e7b1      	b.n	8006522 <__sflush_r+0x1a>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c4:	81a3      	strh	r3, [r4, #12]
 80065c6:	e7ad      	b.n	8006524 <__sflush_r+0x1c>
 80065c8:	690f      	ldr	r7, [r1, #16]
 80065ca:	2f00      	cmp	r7, #0
 80065cc:	d0a9      	beq.n	8006522 <__sflush_r+0x1a>
 80065ce:	0793      	lsls	r3, r2, #30
 80065d0:	680e      	ldr	r6, [r1, #0]
 80065d2:	bf08      	it	eq
 80065d4:	694b      	ldreq	r3, [r1, #20]
 80065d6:	600f      	str	r7, [r1, #0]
 80065d8:	bf18      	it	ne
 80065da:	2300      	movne	r3, #0
 80065dc:	eba6 0807 	sub.w	r8, r6, r7
 80065e0:	608b      	str	r3, [r1, #8]
 80065e2:	f1b8 0f00 	cmp.w	r8, #0
 80065e6:	dd9c      	ble.n	8006522 <__sflush_r+0x1a>
 80065e8:	6a21      	ldr	r1, [r4, #32]
 80065ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065ec:	4643      	mov	r3, r8
 80065ee:	463a      	mov	r2, r7
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b0      	blx	r6
 80065f4:	2800      	cmp	r0, #0
 80065f6:	dc06      	bgt.n	8006606 <__sflush_r+0xfe>
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e78e      	b.n	8006524 <__sflush_r+0x1c>
 8006606:	4407      	add	r7, r0
 8006608:	eba8 0800 	sub.w	r8, r8, r0
 800660c:	e7e9      	b.n	80065e2 <__sflush_r+0xda>
 800660e:	bf00      	nop
 8006610:	20400001 	.word	0x20400001

08006614 <_fflush_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	690b      	ldr	r3, [r1, #16]
 8006618:	4605      	mov	r5, r0
 800661a:	460c      	mov	r4, r1
 800661c:	b913      	cbnz	r3, 8006624 <_fflush_r+0x10>
 800661e:	2500      	movs	r5, #0
 8006620:	4628      	mov	r0, r5
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	b118      	cbz	r0, 800662e <_fflush_r+0x1a>
 8006626:	6983      	ldr	r3, [r0, #24]
 8006628:	b90b      	cbnz	r3, 800662e <_fflush_r+0x1a>
 800662a:	f000 f887 	bl	800673c <__sinit>
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <_fflush_r+0x6c>)
 8006630:	429c      	cmp	r4, r3
 8006632:	d11b      	bne.n	800666c <_fflush_r+0x58>
 8006634:	686c      	ldr	r4, [r5, #4]
 8006636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0ef      	beq.n	800661e <_fflush_r+0xa>
 800663e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006640:	07d0      	lsls	r0, r2, #31
 8006642:	d404      	bmi.n	800664e <_fflush_r+0x3a>
 8006644:	0599      	lsls	r1, r3, #22
 8006646:	d402      	bmi.n	800664e <_fflush_r+0x3a>
 8006648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800664a:	f000 f915 	bl	8006878 <__retarget_lock_acquire_recursive>
 800664e:	4628      	mov	r0, r5
 8006650:	4621      	mov	r1, r4
 8006652:	f7ff ff59 	bl	8006508 <__sflush_r>
 8006656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006658:	07da      	lsls	r2, r3, #31
 800665a:	4605      	mov	r5, r0
 800665c:	d4e0      	bmi.n	8006620 <_fflush_r+0xc>
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	059b      	lsls	r3, r3, #22
 8006662:	d4dd      	bmi.n	8006620 <_fflush_r+0xc>
 8006664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006666:	f000 f908 	bl	800687a <__retarget_lock_release_recursive>
 800666a:	e7d9      	b.n	8006620 <_fflush_r+0xc>
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <_fflush_r+0x70>)
 800666e:	429c      	cmp	r4, r3
 8006670:	d101      	bne.n	8006676 <_fflush_r+0x62>
 8006672:	68ac      	ldr	r4, [r5, #8]
 8006674:	e7df      	b.n	8006636 <_fflush_r+0x22>
 8006676:	4b04      	ldr	r3, [pc, #16]	; (8006688 <_fflush_r+0x74>)
 8006678:	429c      	cmp	r4, r3
 800667a:	bf08      	it	eq
 800667c:	68ec      	ldreq	r4, [r5, #12]
 800667e:	e7da      	b.n	8006636 <_fflush_r+0x22>
 8006680:	0800724c 	.word	0x0800724c
 8006684:	0800726c 	.word	0x0800726c
 8006688:	0800722c 	.word	0x0800722c

0800668c <std>:
 800668c:	2300      	movs	r3, #0
 800668e:	b510      	push	{r4, lr}
 8006690:	4604      	mov	r4, r0
 8006692:	e9c0 3300 	strd	r3, r3, [r0]
 8006696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800669a:	6083      	str	r3, [r0, #8]
 800669c:	8181      	strh	r1, [r0, #12]
 800669e:	6643      	str	r3, [r0, #100]	; 0x64
 80066a0:	81c2      	strh	r2, [r0, #14]
 80066a2:	6183      	str	r3, [r0, #24]
 80066a4:	4619      	mov	r1, r3
 80066a6:	2208      	movs	r2, #8
 80066a8:	305c      	adds	r0, #92	; 0x5c
 80066aa:	f7ff fcb7 	bl	800601c <memset>
 80066ae:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <std+0x38>)
 80066b0:	6263      	str	r3, [r4, #36]	; 0x24
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <std+0x3c>)
 80066b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <std+0x40>)
 80066b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <std+0x44>)
 80066bc:	6224      	str	r4, [r4, #32]
 80066be:	6323      	str	r3, [r4, #48]	; 0x30
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	bf00      	nop
 80066c4:	080062bd 	.word	0x080062bd
 80066c8:	080062df 	.word	0x080062df
 80066cc:	08006317 	.word	0x08006317
 80066d0:	0800633b 	.word	0x0800633b

080066d4 <_cleanup_r>:
 80066d4:	4901      	ldr	r1, [pc, #4]	; (80066dc <_cleanup_r+0x8>)
 80066d6:	f000 b8af 	b.w	8006838 <_fwalk_reent>
 80066da:	bf00      	nop
 80066dc:	08006615 	.word	0x08006615

080066e0 <__sfmoreglue>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	1e4a      	subs	r2, r1, #1
 80066e4:	2568      	movs	r5, #104	; 0x68
 80066e6:	4355      	muls	r5, r2
 80066e8:	460e      	mov	r6, r1
 80066ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066ee:	f7ff fced 	bl	80060cc <_malloc_r>
 80066f2:	4604      	mov	r4, r0
 80066f4:	b140      	cbz	r0, 8006708 <__sfmoreglue+0x28>
 80066f6:	2100      	movs	r1, #0
 80066f8:	e9c0 1600 	strd	r1, r6, [r0]
 80066fc:	300c      	adds	r0, #12
 80066fe:	60a0      	str	r0, [r4, #8]
 8006700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006704:	f7ff fc8a 	bl	800601c <memset>
 8006708:	4620      	mov	r0, r4
 800670a:	bd70      	pop	{r4, r5, r6, pc}

0800670c <__sfp_lock_acquire>:
 800670c:	4801      	ldr	r0, [pc, #4]	; (8006714 <__sfp_lock_acquire+0x8>)
 800670e:	f000 b8b3 	b.w	8006878 <__retarget_lock_acquire_recursive>
 8006712:	bf00      	nop
 8006714:	20000da4 	.word	0x20000da4

08006718 <__sfp_lock_release>:
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <__sfp_lock_release+0x8>)
 800671a:	f000 b8ae 	b.w	800687a <__retarget_lock_release_recursive>
 800671e:	bf00      	nop
 8006720:	20000da4 	.word	0x20000da4

08006724 <__sinit_lock_acquire>:
 8006724:	4801      	ldr	r0, [pc, #4]	; (800672c <__sinit_lock_acquire+0x8>)
 8006726:	f000 b8a7 	b.w	8006878 <__retarget_lock_acquire_recursive>
 800672a:	bf00      	nop
 800672c:	20000d9f 	.word	0x20000d9f

08006730 <__sinit_lock_release>:
 8006730:	4801      	ldr	r0, [pc, #4]	; (8006738 <__sinit_lock_release+0x8>)
 8006732:	f000 b8a2 	b.w	800687a <__retarget_lock_release_recursive>
 8006736:	bf00      	nop
 8006738:	20000d9f 	.word	0x20000d9f

0800673c <__sinit>:
 800673c:	b510      	push	{r4, lr}
 800673e:	4604      	mov	r4, r0
 8006740:	f7ff fff0 	bl	8006724 <__sinit_lock_acquire>
 8006744:	69a3      	ldr	r3, [r4, #24]
 8006746:	b11b      	cbz	r3, 8006750 <__sinit+0x14>
 8006748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800674c:	f7ff bff0 	b.w	8006730 <__sinit_lock_release>
 8006750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006754:	6523      	str	r3, [r4, #80]	; 0x50
 8006756:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <__sinit+0x68>)
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <__sinit+0x6c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	62a2      	str	r2, [r4, #40]	; 0x28
 800675e:	42a3      	cmp	r3, r4
 8006760:	bf04      	itt	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	61a3      	streq	r3, [r4, #24]
 8006766:	4620      	mov	r0, r4
 8006768:	f000 f820 	bl	80067ac <__sfp>
 800676c:	6060      	str	r0, [r4, #4]
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f81c 	bl	80067ac <__sfp>
 8006774:	60a0      	str	r0, [r4, #8]
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f818 	bl	80067ac <__sfp>
 800677c:	2200      	movs	r2, #0
 800677e:	60e0      	str	r0, [r4, #12]
 8006780:	2104      	movs	r1, #4
 8006782:	6860      	ldr	r0, [r4, #4]
 8006784:	f7ff ff82 	bl	800668c <std>
 8006788:	68a0      	ldr	r0, [r4, #8]
 800678a:	2201      	movs	r2, #1
 800678c:	2109      	movs	r1, #9
 800678e:	f7ff ff7d 	bl	800668c <std>
 8006792:	68e0      	ldr	r0, [r4, #12]
 8006794:	2202      	movs	r2, #2
 8006796:	2112      	movs	r1, #18
 8006798:	f7ff ff78 	bl	800668c <std>
 800679c:	2301      	movs	r3, #1
 800679e:	61a3      	str	r3, [r4, #24]
 80067a0:	e7d2      	b.n	8006748 <__sinit+0xc>
 80067a2:	bf00      	nop
 80067a4:	08007228 	.word	0x08007228
 80067a8:	080066d5 	.word	0x080066d5

080067ac <__sfp>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	4607      	mov	r7, r0
 80067b0:	f7ff ffac 	bl	800670c <__sfp_lock_acquire>
 80067b4:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <__sfp+0x84>)
 80067b6:	681e      	ldr	r6, [r3, #0]
 80067b8:	69b3      	ldr	r3, [r6, #24]
 80067ba:	b913      	cbnz	r3, 80067c2 <__sfp+0x16>
 80067bc:	4630      	mov	r0, r6
 80067be:	f7ff ffbd 	bl	800673c <__sinit>
 80067c2:	3648      	adds	r6, #72	; 0x48
 80067c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	d503      	bpl.n	80067d4 <__sfp+0x28>
 80067cc:	6833      	ldr	r3, [r6, #0]
 80067ce:	b30b      	cbz	r3, 8006814 <__sfp+0x68>
 80067d0:	6836      	ldr	r6, [r6, #0]
 80067d2:	e7f7      	b.n	80067c4 <__sfp+0x18>
 80067d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067d8:	b9d5      	cbnz	r5, 8006810 <__sfp+0x64>
 80067da:	4b16      	ldr	r3, [pc, #88]	; (8006834 <__sfp+0x88>)
 80067dc:	60e3      	str	r3, [r4, #12]
 80067de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067e2:	6665      	str	r5, [r4, #100]	; 0x64
 80067e4:	f000 f847 	bl	8006876 <__retarget_lock_init_recursive>
 80067e8:	f7ff ff96 	bl	8006718 <__sfp_lock_release>
 80067ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067f4:	6025      	str	r5, [r4, #0]
 80067f6:	61a5      	str	r5, [r4, #24]
 80067f8:	2208      	movs	r2, #8
 80067fa:	4629      	mov	r1, r5
 80067fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006800:	f7ff fc0c 	bl	800601c <memset>
 8006804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800680c:	4620      	mov	r0, r4
 800680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006810:	3468      	adds	r4, #104	; 0x68
 8006812:	e7d9      	b.n	80067c8 <__sfp+0x1c>
 8006814:	2104      	movs	r1, #4
 8006816:	4638      	mov	r0, r7
 8006818:	f7ff ff62 	bl	80066e0 <__sfmoreglue>
 800681c:	4604      	mov	r4, r0
 800681e:	6030      	str	r0, [r6, #0]
 8006820:	2800      	cmp	r0, #0
 8006822:	d1d5      	bne.n	80067d0 <__sfp+0x24>
 8006824:	f7ff ff78 	bl	8006718 <__sfp_lock_release>
 8006828:	230c      	movs	r3, #12
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	e7ee      	b.n	800680c <__sfp+0x60>
 800682e:	bf00      	nop
 8006830:	08007228 	.word	0x08007228
 8006834:	ffff0001 	.word	0xffff0001

08006838 <_fwalk_reent>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	4606      	mov	r6, r0
 800683e:	4688      	mov	r8, r1
 8006840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006844:	2700      	movs	r7, #0
 8006846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800684a:	f1b9 0901 	subs.w	r9, r9, #1
 800684e:	d505      	bpl.n	800685c <_fwalk_reent+0x24>
 8006850:	6824      	ldr	r4, [r4, #0]
 8006852:	2c00      	cmp	r4, #0
 8006854:	d1f7      	bne.n	8006846 <_fwalk_reent+0xe>
 8006856:	4638      	mov	r0, r7
 8006858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685c:	89ab      	ldrh	r3, [r5, #12]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d907      	bls.n	8006872 <_fwalk_reent+0x3a>
 8006862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006866:	3301      	adds	r3, #1
 8006868:	d003      	beq.n	8006872 <_fwalk_reent+0x3a>
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	47c0      	blx	r8
 8006870:	4307      	orrs	r7, r0
 8006872:	3568      	adds	r5, #104	; 0x68
 8006874:	e7e9      	b.n	800684a <_fwalk_reent+0x12>

08006876 <__retarget_lock_init_recursive>:
 8006876:	4770      	bx	lr

08006878 <__retarget_lock_acquire_recursive>:
 8006878:	4770      	bx	lr

0800687a <__retarget_lock_release_recursive>:
 800687a:	4770      	bx	lr

0800687c <_lseek_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4d07      	ldr	r5, [pc, #28]	; (800689c <_lseek_r+0x20>)
 8006880:	4604      	mov	r4, r0
 8006882:	4608      	mov	r0, r1
 8006884:	4611      	mov	r1, r2
 8006886:	2200      	movs	r2, #0
 8006888:	602a      	str	r2, [r5, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	f7fa fe38 	bl	8001500 <_lseek>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_lseek_r+0x1e>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_lseek_r+0x1e>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	20000da8 	.word	0x20000da8

080068a0 <__swhatbuf_r>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	460e      	mov	r6, r1
 80068a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a8:	2900      	cmp	r1, #0
 80068aa:	b096      	sub	sp, #88	; 0x58
 80068ac:	4614      	mov	r4, r2
 80068ae:	461d      	mov	r5, r3
 80068b0:	da07      	bge.n	80068c2 <__swhatbuf_r+0x22>
 80068b2:	2300      	movs	r3, #0
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	89b3      	ldrh	r3, [r6, #12]
 80068b8:	061a      	lsls	r2, r3, #24
 80068ba:	d410      	bmi.n	80068de <__swhatbuf_r+0x3e>
 80068bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068c0:	e00e      	b.n	80068e0 <__swhatbuf_r+0x40>
 80068c2:	466a      	mov	r2, sp
 80068c4:	f000 fb5c 	bl	8006f80 <_fstat_r>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	dbf2      	blt.n	80068b2 <__swhatbuf_r+0x12>
 80068cc:	9a01      	ldr	r2, [sp, #4]
 80068ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068d6:	425a      	negs	r2, r3
 80068d8:	415a      	adcs	r2, r3
 80068da:	602a      	str	r2, [r5, #0]
 80068dc:	e7ee      	b.n	80068bc <__swhatbuf_r+0x1c>
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	2000      	movs	r0, #0
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	b016      	add	sp, #88	; 0x58
 80068e6:	bd70      	pop	{r4, r5, r6, pc}

080068e8 <__smakebuf_r>:
 80068e8:	898b      	ldrh	r3, [r1, #12]
 80068ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068ec:	079d      	lsls	r5, r3, #30
 80068ee:	4606      	mov	r6, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	d507      	bpl.n	8006904 <__smakebuf_r+0x1c>
 80068f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	6123      	str	r3, [r4, #16]
 80068fc:	2301      	movs	r3, #1
 80068fe:	6163      	str	r3, [r4, #20]
 8006900:	b002      	add	sp, #8
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	ab01      	add	r3, sp, #4
 8006906:	466a      	mov	r2, sp
 8006908:	f7ff ffca 	bl	80068a0 <__swhatbuf_r>
 800690c:	9900      	ldr	r1, [sp, #0]
 800690e:	4605      	mov	r5, r0
 8006910:	4630      	mov	r0, r6
 8006912:	f7ff fbdb 	bl	80060cc <_malloc_r>
 8006916:	b948      	cbnz	r0, 800692c <__smakebuf_r+0x44>
 8006918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691c:	059a      	lsls	r2, r3, #22
 800691e:	d4ef      	bmi.n	8006900 <__smakebuf_r+0x18>
 8006920:	f023 0303 	bic.w	r3, r3, #3
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	e7e3      	b.n	80068f4 <__smakebuf_r+0xc>
 800692c:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <__smakebuf_r+0x7c>)
 800692e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	6020      	str	r0, [r4, #0]
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	9b00      	ldr	r3, [sp, #0]
 800693c:	6163      	str	r3, [r4, #20]
 800693e:	9b01      	ldr	r3, [sp, #4]
 8006940:	6120      	str	r0, [r4, #16]
 8006942:	b15b      	cbz	r3, 800695c <__smakebuf_r+0x74>
 8006944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006948:	4630      	mov	r0, r6
 800694a:	f000 fb2b 	bl	8006fa4 <_isatty_r>
 800694e:	b128      	cbz	r0, 800695c <__smakebuf_r+0x74>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	f043 0301 	orr.w	r3, r3, #1
 800695a:	81a3      	strh	r3, [r4, #12]
 800695c:	89a0      	ldrh	r0, [r4, #12]
 800695e:	4305      	orrs	r5, r0
 8006960:	81a5      	strh	r5, [r4, #12]
 8006962:	e7cd      	b.n	8006900 <__smakebuf_r+0x18>
 8006964:	080066d5 	.word	0x080066d5

08006968 <__malloc_lock>:
 8006968:	4801      	ldr	r0, [pc, #4]	; (8006970 <__malloc_lock+0x8>)
 800696a:	f7ff bf85 	b.w	8006878 <__retarget_lock_acquire_recursive>
 800696e:	bf00      	nop
 8006970:	20000da0 	.word	0x20000da0

08006974 <__malloc_unlock>:
 8006974:	4801      	ldr	r0, [pc, #4]	; (800697c <__malloc_unlock+0x8>)
 8006976:	f7ff bf80 	b.w	800687a <__retarget_lock_release_recursive>
 800697a:	bf00      	nop
 800697c:	20000da0 	.word	0x20000da0

08006980 <__sfputc_r>:
 8006980:	6893      	ldr	r3, [r2, #8]
 8006982:	3b01      	subs	r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	b410      	push	{r4}
 8006988:	6093      	str	r3, [r2, #8]
 800698a:	da08      	bge.n	800699e <__sfputc_r+0x1e>
 800698c:	6994      	ldr	r4, [r2, #24]
 800698e:	42a3      	cmp	r3, r4
 8006990:	db01      	blt.n	8006996 <__sfputc_r+0x16>
 8006992:	290a      	cmp	r1, #10
 8006994:	d103      	bne.n	800699e <__sfputc_r+0x1e>
 8006996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800699a:	f7ff bcd3 	b.w	8006344 <__swbuf_r>
 800699e:	6813      	ldr	r3, [r2, #0]
 80069a0:	1c58      	adds	r0, r3, #1
 80069a2:	6010      	str	r0, [r2, #0]
 80069a4:	7019      	strb	r1, [r3, #0]
 80069a6:	4608      	mov	r0, r1
 80069a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <__sfputs_r>:
 80069ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b0:	4606      	mov	r6, r0
 80069b2:	460f      	mov	r7, r1
 80069b4:	4614      	mov	r4, r2
 80069b6:	18d5      	adds	r5, r2, r3
 80069b8:	42ac      	cmp	r4, r5
 80069ba:	d101      	bne.n	80069c0 <__sfputs_r+0x12>
 80069bc:	2000      	movs	r0, #0
 80069be:	e007      	b.n	80069d0 <__sfputs_r+0x22>
 80069c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c4:	463a      	mov	r2, r7
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff ffda 	bl	8006980 <__sfputc_r>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d1f3      	bne.n	80069b8 <__sfputs_r+0xa>
 80069d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069d4 <_vfiprintf_r>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	460d      	mov	r5, r1
 80069da:	b09d      	sub	sp, #116	; 0x74
 80069dc:	4614      	mov	r4, r2
 80069de:	4698      	mov	r8, r3
 80069e0:	4606      	mov	r6, r0
 80069e2:	b118      	cbz	r0, 80069ec <_vfiprintf_r+0x18>
 80069e4:	6983      	ldr	r3, [r0, #24]
 80069e6:	b90b      	cbnz	r3, 80069ec <_vfiprintf_r+0x18>
 80069e8:	f7ff fea8 	bl	800673c <__sinit>
 80069ec:	4b89      	ldr	r3, [pc, #548]	; (8006c14 <_vfiprintf_r+0x240>)
 80069ee:	429d      	cmp	r5, r3
 80069f0:	d11b      	bne.n	8006a2a <_vfiprintf_r+0x56>
 80069f2:	6875      	ldr	r5, [r6, #4]
 80069f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f6:	07d9      	lsls	r1, r3, #31
 80069f8:	d405      	bmi.n	8006a06 <_vfiprintf_r+0x32>
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	059a      	lsls	r2, r3, #22
 80069fe:	d402      	bmi.n	8006a06 <_vfiprintf_r+0x32>
 8006a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a02:	f7ff ff39 	bl	8006878 <__retarget_lock_acquire_recursive>
 8006a06:	89ab      	ldrh	r3, [r5, #12]
 8006a08:	071b      	lsls	r3, r3, #28
 8006a0a:	d501      	bpl.n	8006a10 <_vfiprintf_r+0x3c>
 8006a0c:	692b      	ldr	r3, [r5, #16]
 8006a0e:	b9eb      	cbnz	r3, 8006a4c <_vfiprintf_r+0x78>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff fcfa 	bl	800640c <__swsetup_r>
 8006a18:	b1c0      	cbz	r0, 8006a4c <_vfiprintf_r+0x78>
 8006a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a1c:	07dc      	lsls	r4, r3, #31
 8006a1e:	d50e      	bpl.n	8006a3e <_vfiprintf_r+0x6a>
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	b01d      	add	sp, #116	; 0x74
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	4b7b      	ldr	r3, [pc, #492]	; (8006c18 <_vfiprintf_r+0x244>)
 8006a2c:	429d      	cmp	r5, r3
 8006a2e:	d101      	bne.n	8006a34 <_vfiprintf_r+0x60>
 8006a30:	68b5      	ldr	r5, [r6, #8]
 8006a32:	e7df      	b.n	80069f4 <_vfiprintf_r+0x20>
 8006a34:	4b79      	ldr	r3, [pc, #484]	; (8006c1c <_vfiprintf_r+0x248>)
 8006a36:	429d      	cmp	r5, r3
 8006a38:	bf08      	it	eq
 8006a3a:	68f5      	ldreq	r5, [r6, #12]
 8006a3c:	e7da      	b.n	80069f4 <_vfiprintf_r+0x20>
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	0598      	lsls	r0, r3, #22
 8006a42:	d4ed      	bmi.n	8006a20 <_vfiprintf_r+0x4c>
 8006a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a46:	f7ff ff18 	bl	800687a <__retarget_lock_release_recursive>
 8006a4a:	e7e9      	b.n	8006a20 <_vfiprintf_r+0x4c>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a50:	2320      	movs	r3, #32
 8006a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a5a:	2330      	movs	r3, #48	; 0x30
 8006a5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c20 <_vfiprintf_r+0x24c>
 8006a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a64:	f04f 0901 	mov.w	r9, #1
 8006a68:	4623      	mov	r3, r4
 8006a6a:	469a      	mov	sl, r3
 8006a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a70:	b10a      	cbz	r2, 8006a76 <_vfiprintf_r+0xa2>
 8006a72:	2a25      	cmp	r2, #37	; 0x25
 8006a74:	d1f9      	bne.n	8006a6a <_vfiprintf_r+0x96>
 8006a76:	ebba 0b04 	subs.w	fp, sl, r4
 8006a7a:	d00b      	beq.n	8006a94 <_vfiprintf_r+0xc0>
 8006a7c:	465b      	mov	r3, fp
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7ff ff93 	bl	80069ae <__sfputs_r>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f000 80aa 	beq.w	8006be2 <_vfiprintf_r+0x20e>
 8006a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a90:	445a      	add	r2, fp
 8006a92:	9209      	str	r2, [sp, #36]	; 0x24
 8006a94:	f89a 3000 	ldrb.w	r3, [sl]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80a2 	beq.w	8006be2 <_vfiprintf_r+0x20e>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa8:	f10a 0a01 	add.w	sl, sl, #1
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	9307      	str	r3, [sp, #28]
 8006ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ab6:	4654      	mov	r4, sl
 8006ab8:	2205      	movs	r2, #5
 8006aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006abe:	4858      	ldr	r0, [pc, #352]	; (8006c20 <_vfiprintf_r+0x24c>)
 8006ac0:	f7f9 fb96 	bl	80001f0 <memchr>
 8006ac4:	9a04      	ldr	r2, [sp, #16]
 8006ac6:	b9d8      	cbnz	r0, 8006b00 <_vfiprintf_r+0x12c>
 8006ac8:	06d1      	lsls	r1, r2, #27
 8006aca:	bf44      	itt	mi
 8006acc:	2320      	movmi	r3, #32
 8006ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad2:	0713      	lsls	r3, r2, #28
 8006ad4:	bf44      	itt	mi
 8006ad6:	232b      	movmi	r3, #43	; 0x2b
 8006ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006adc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae2:	d015      	beq.n	8006b10 <_vfiprintf_r+0x13c>
 8006ae4:	9a07      	ldr	r2, [sp, #28]
 8006ae6:	4654      	mov	r4, sl
 8006ae8:	2000      	movs	r0, #0
 8006aea:	f04f 0c0a 	mov.w	ip, #10
 8006aee:	4621      	mov	r1, r4
 8006af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af4:	3b30      	subs	r3, #48	; 0x30
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d94e      	bls.n	8006b98 <_vfiprintf_r+0x1c4>
 8006afa:	b1b0      	cbz	r0, 8006b2a <_vfiprintf_r+0x156>
 8006afc:	9207      	str	r2, [sp, #28]
 8006afe:	e014      	b.n	8006b2a <_vfiprintf_r+0x156>
 8006b00:	eba0 0308 	sub.w	r3, r0, r8
 8006b04:	fa09 f303 	lsl.w	r3, r9, r3
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	9304      	str	r3, [sp, #16]
 8006b0c:	46a2      	mov	sl, r4
 8006b0e:	e7d2      	b.n	8006ab6 <_vfiprintf_r+0xe2>
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	1d19      	adds	r1, r3, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	9103      	str	r1, [sp, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bfbb      	ittet	lt
 8006b1c:	425b      	neglt	r3, r3
 8006b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b22:	9307      	strge	r3, [sp, #28]
 8006b24:	9307      	strlt	r3, [sp, #28]
 8006b26:	bfb8      	it	lt
 8006b28:	9204      	strlt	r2, [sp, #16]
 8006b2a:	7823      	ldrb	r3, [r4, #0]
 8006b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b2e:	d10c      	bne.n	8006b4a <_vfiprintf_r+0x176>
 8006b30:	7863      	ldrb	r3, [r4, #1]
 8006b32:	2b2a      	cmp	r3, #42	; 0x2a
 8006b34:	d135      	bne.n	8006ba2 <_vfiprintf_r+0x1ce>
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	1d1a      	adds	r2, r3, #4
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	9203      	str	r2, [sp, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bfb8      	it	lt
 8006b42:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b46:	3402      	adds	r4, #2
 8006b48:	9305      	str	r3, [sp, #20]
 8006b4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c30 <_vfiprintf_r+0x25c>
 8006b4e:	7821      	ldrb	r1, [r4, #0]
 8006b50:	2203      	movs	r2, #3
 8006b52:	4650      	mov	r0, sl
 8006b54:	f7f9 fb4c 	bl	80001f0 <memchr>
 8006b58:	b140      	cbz	r0, 8006b6c <_vfiprintf_r+0x198>
 8006b5a:	2340      	movs	r3, #64	; 0x40
 8006b5c:	eba0 000a 	sub.w	r0, r0, sl
 8006b60:	fa03 f000 	lsl.w	r0, r3, r0
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	4303      	orrs	r3, r0
 8006b68:	3401      	adds	r4, #1
 8006b6a:	9304      	str	r3, [sp, #16]
 8006b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b70:	482c      	ldr	r0, [pc, #176]	; (8006c24 <_vfiprintf_r+0x250>)
 8006b72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b76:	2206      	movs	r2, #6
 8006b78:	f7f9 fb3a 	bl	80001f0 <memchr>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d03f      	beq.n	8006c00 <_vfiprintf_r+0x22c>
 8006b80:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <_vfiprintf_r+0x254>)
 8006b82:	bb1b      	cbnz	r3, 8006bcc <_vfiprintf_r+0x1f8>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	3307      	adds	r3, #7
 8006b88:	f023 0307 	bic.w	r3, r3, #7
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	9303      	str	r3, [sp, #12]
 8006b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b92:	443b      	add	r3, r7
 8006b94:	9309      	str	r3, [sp, #36]	; 0x24
 8006b96:	e767      	b.n	8006a68 <_vfiprintf_r+0x94>
 8006b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	e7a5      	b.n	8006aee <_vfiprintf_r+0x11a>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	3401      	adds	r4, #1
 8006ba6:	9305      	str	r3, [sp, #20]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f04f 0c0a 	mov.w	ip, #10
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb4:	3a30      	subs	r2, #48	; 0x30
 8006bb6:	2a09      	cmp	r2, #9
 8006bb8:	d903      	bls.n	8006bc2 <_vfiprintf_r+0x1ee>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0c5      	beq.n	8006b4a <_vfiprintf_r+0x176>
 8006bbe:	9105      	str	r1, [sp, #20]
 8006bc0:	e7c3      	b.n	8006b4a <_vfiprintf_r+0x176>
 8006bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e7f0      	b.n	8006bae <_vfiprintf_r+0x1da>
 8006bcc:	ab03      	add	r3, sp, #12
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <_vfiprintf_r+0x258>)
 8006bd4:	a904      	add	r1, sp, #16
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f3af 8000 	nop.w
 8006bdc:	4607      	mov	r7, r0
 8006bde:	1c78      	adds	r0, r7, #1
 8006be0:	d1d6      	bne.n	8006b90 <_vfiprintf_r+0x1bc>
 8006be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006be4:	07d9      	lsls	r1, r3, #31
 8006be6:	d405      	bmi.n	8006bf4 <_vfiprintf_r+0x220>
 8006be8:	89ab      	ldrh	r3, [r5, #12]
 8006bea:	059a      	lsls	r2, r3, #22
 8006bec:	d402      	bmi.n	8006bf4 <_vfiprintf_r+0x220>
 8006bee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bf0:	f7ff fe43 	bl	800687a <__retarget_lock_release_recursive>
 8006bf4:	89ab      	ldrh	r3, [r5, #12]
 8006bf6:	065b      	lsls	r3, r3, #25
 8006bf8:	f53f af12 	bmi.w	8006a20 <_vfiprintf_r+0x4c>
 8006bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfe:	e711      	b.n	8006a24 <_vfiprintf_r+0x50>
 8006c00:	ab03      	add	r3, sp, #12
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	462a      	mov	r2, r5
 8006c06:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <_vfiprintf_r+0x258>)
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f880 	bl	8006d10 <_printf_i>
 8006c10:	e7e4      	b.n	8006bdc <_vfiprintf_r+0x208>
 8006c12:	bf00      	nop
 8006c14:	0800724c 	.word	0x0800724c
 8006c18:	0800726c 	.word	0x0800726c
 8006c1c:	0800722c 	.word	0x0800722c
 8006c20:	0800728c 	.word	0x0800728c
 8006c24:	08007296 	.word	0x08007296
 8006c28:	00000000 	.word	0x00000000
 8006c2c:	080069af 	.word	0x080069af
 8006c30:	08007292 	.word	0x08007292

08006c34 <_printf_common>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	4616      	mov	r6, r2
 8006c3a:	4699      	mov	r9, r3
 8006c3c:	688a      	ldr	r2, [r1, #8]
 8006c3e:	690b      	ldr	r3, [r1, #16]
 8006c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	bfb8      	it	lt
 8006c48:	4613      	movlt	r3, r2
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c50:	4607      	mov	r7, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b10a      	cbz	r2, 8006c5a <_printf_common+0x26>
 8006c56:	3301      	adds	r3, #1
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0699      	lsls	r1, r3, #26
 8006c5e:	bf42      	ittt	mi
 8006c60:	6833      	ldrmi	r3, [r6, #0]
 8006c62:	3302      	addmi	r3, #2
 8006c64:	6033      	strmi	r3, [r6, #0]
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	f015 0506 	ands.w	r5, r5, #6
 8006c6c:	d106      	bne.n	8006c7c <_printf_common+0x48>
 8006c6e:	f104 0a19 	add.w	sl, r4, #25
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc26      	bgt.n	8006cca <_printf_common+0x96>
 8006c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c80:	1e13      	subs	r3, r2, #0
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	bf18      	it	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	0692      	lsls	r2, r2, #26
 8006c8a:	d42b      	bmi.n	8006ce4 <_printf_common+0xb0>
 8006c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c90:	4649      	mov	r1, r9
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c0      	blx	r8
 8006c96:	3001      	adds	r0, #1
 8006c98:	d01e      	beq.n	8006cd8 <_printf_common+0xa4>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	68e5      	ldr	r5, [r4, #12]
 8006c9e:	6832      	ldr	r2, [r6, #0]
 8006ca0:	f003 0306 	and.w	r3, r3, #6
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	bf08      	it	eq
 8006ca8:	1aad      	subeq	r5, r5, r2
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	6922      	ldr	r2, [r4, #16]
 8006cae:	bf0c      	ite	eq
 8006cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb4:	2500      	movne	r5, #0
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	bfc4      	itt	gt
 8006cba:	1a9b      	subgt	r3, r3, r2
 8006cbc:	18ed      	addgt	r5, r5, r3
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	341a      	adds	r4, #26
 8006cc2:	42b5      	cmp	r5, r6
 8006cc4:	d11a      	bne.n	8006cfc <_printf_common+0xc8>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e008      	b.n	8006cdc <_printf_common+0xa8>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4652      	mov	r2, sl
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	47c0      	blx	r8
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d103      	bne.n	8006ce0 <_printf_common+0xac>
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	e7c6      	b.n	8006c72 <_printf_common+0x3e>
 8006ce4:	18e1      	adds	r1, r4, r3
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	2030      	movs	r0, #48	; 0x30
 8006cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cee:	4422      	add	r2, r4
 8006cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	e7c7      	b.n	8006c8c <_printf_common+0x58>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4649      	mov	r1, r9
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d0e6      	beq.n	8006cd8 <_printf_common+0xa4>
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7d9      	b.n	8006cc2 <_printf_common+0x8e>
	...

08006d10 <_printf_i>:
 8006d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	460c      	mov	r4, r1
 8006d16:	4691      	mov	r9, r2
 8006d18:	7e27      	ldrb	r7, [r4, #24]
 8006d1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d1c:	2f78      	cmp	r7, #120	; 0x78
 8006d1e:	4680      	mov	r8, r0
 8006d20:	469a      	mov	sl, r3
 8006d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d26:	d807      	bhi.n	8006d38 <_printf_i+0x28>
 8006d28:	2f62      	cmp	r7, #98	; 0x62
 8006d2a:	d80a      	bhi.n	8006d42 <_printf_i+0x32>
 8006d2c:	2f00      	cmp	r7, #0
 8006d2e:	f000 80d8 	beq.w	8006ee2 <_printf_i+0x1d2>
 8006d32:	2f58      	cmp	r7, #88	; 0x58
 8006d34:	f000 80a3 	beq.w	8006e7e <_printf_i+0x16e>
 8006d38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d40:	e03a      	b.n	8006db8 <_printf_i+0xa8>
 8006d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d46:	2b15      	cmp	r3, #21
 8006d48:	d8f6      	bhi.n	8006d38 <_printf_i+0x28>
 8006d4a:	a001      	add	r0, pc, #4	; (adr r0, 8006d50 <_printf_i+0x40>)
 8006d4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d50:	08006da9 	.word	0x08006da9
 8006d54:	08006dbd 	.word	0x08006dbd
 8006d58:	08006d39 	.word	0x08006d39
 8006d5c:	08006d39 	.word	0x08006d39
 8006d60:	08006d39 	.word	0x08006d39
 8006d64:	08006d39 	.word	0x08006d39
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006d39 	.word	0x08006d39
 8006d70:	08006d39 	.word	0x08006d39
 8006d74:	08006d39 	.word	0x08006d39
 8006d78:	08006d39 	.word	0x08006d39
 8006d7c:	08006ec9 	.word	0x08006ec9
 8006d80:	08006ded 	.word	0x08006ded
 8006d84:	08006eab 	.word	0x08006eab
 8006d88:	08006d39 	.word	0x08006d39
 8006d8c:	08006d39 	.word	0x08006d39
 8006d90:	08006eeb 	.word	0x08006eeb
 8006d94:	08006d39 	.word	0x08006d39
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006d39 	.word	0x08006d39
 8006da0:	08006d39 	.word	0x08006d39
 8006da4:	08006eb3 	.word	0x08006eb3
 8006da8:	680b      	ldr	r3, [r1, #0]
 8006daa:	1d1a      	adds	r2, r3, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	600a      	str	r2, [r1, #0]
 8006db0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0a3      	b.n	8006f04 <_printf_i+0x1f4>
 8006dbc:	6825      	ldr	r5, [r4, #0]
 8006dbe:	6808      	ldr	r0, [r1, #0]
 8006dc0:	062e      	lsls	r6, r5, #24
 8006dc2:	f100 0304 	add.w	r3, r0, #4
 8006dc6:	d50a      	bpl.n	8006dde <_printf_i+0xce>
 8006dc8:	6805      	ldr	r5, [r0, #0]
 8006dca:	600b      	str	r3, [r1, #0]
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	da03      	bge.n	8006dd8 <_printf_i+0xc8>
 8006dd0:	232d      	movs	r3, #45	; 0x2d
 8006dd2:	426d      	negs	r5, r5
 8006dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd8:	485e      	ldr	r0, [pc, #376]	; (8006f54 <_printf_i+0x244>)
 8006dda:	230a      	movs	r3, #10
 8006ddc:	e019      	b.n	8006e12 <_printf_i+0x102>
 8006dde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006de2:	6805      	ldr	r5, [r0, #0]
 8006de4:	600b      	str	r3, [r1, #0]
 8006de6:	bf18      	it	ne
 8006de8:	b22d      	sxthne	r5, r5
 8006dea:	e7ef      	b.n	8006dcc <_printf_i+0xbc>
 8006dec:	680b      	ldr	r3, [r1, #0]
 8006dee:	6825      	ldr	r5, [r4, #0]
 8006df0:	1d18      	adds	r0, r3, #4
 8006df2:	6008      	str	r0, [r1, #0]
 8006df4:	0628      	lsls	r0, r5, #24
 8006df6:	d501      	bpl.n	8006dfc <_printf_i+0xec>
 8006df8:	681d      	ldr	r5, [r3, #0]
 8006dfa:	e002      	b.n	8006e02 <_printf_i+0xf2>
 8006dfc:	0669      	lsls	r1, r5, #25
 8006dfe:	d5fb      	bpl.n	8006df8 <_printf_i+0xe8>
 8006e00:	881d      	ldrh	r5, [r3, #0]
 8006e02:	4854      	ldr	r0, [pc, #336]	; (8006f54 <_printf_i+0x244>)
 8006e04:	2f6f      	cmp	r7, #111	; 0x6f
 8006e06:	bf0c      	ite	eq
 8006e08:	2308      	moveq	r3, #8
 8006e0a:	230a      	movne	r3, #10
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e12:	6866      	ldr	r6, [r4, #4]
 8006e14:	60a6      	str	r6, [r4, #8]
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	bfa2      	ittt	ge
 8006e1a:	6821      	ldrge	r1, [r4, #0]
 8006e1c:	f021 0104 	bicge.w	r1, r1, #4
 8006e20:	6021      	strge	r1, [r4, #0]
 8006e22:	b90d      	cbnz	r5, 8006e28 <_printf_i+0x118>
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	d04d      	beq.n	8006ec4 <_printf_i+0x1b4>
 8006e28:	4616      	mov	r6, r2
 8006e2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e2e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e32:	5dc7      	ldrb	r7, [r0, r7]
 8006e34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e38:	462f      	mov	r7, r5
 8006e3a:	42bb      	cmp	r3, r7
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	d9f4      	bls.n	8006e2a <_printf_i+0x11a>
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d10b      	bne.n	8006e5c <_printf_i+0x14c>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	07df      	lsls	r7, r3, #31
 8006e48:	d508      	bpl.n	8006e5c <_printf_i+0x14c>
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	6861      	ldr	r1, [r4, #4]
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	bfde      	ittt	le
 8006e52:	2330      	movle	r3, #48	; 0x30
 8006e54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e5c:	1b92      	subs	r2, r2, r6
 8006e5e:	6122      	str	r2, [r4, #16]
 8006e60:	f8cd a000 	str.w	sl, [sp]
 8006e64:	464b      	mov	r3, r9
 8006e66:	aa03      	add	r2, sp, #12
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	f7ff fee2 	bl	8006c34 <_printf_common>
 8006e70:	3001      	adds	r0, #1
 8006e72:	d14c      	bne.n	8006f0e <_printf_i+0x1fe>
 8006e74:	f04f 30ff 	mov.w	r0, #4294967295
 8006e78:	b004      	add	sp, #16
 8006e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7e:	4835      	ldr	r0, [pc, #212]	; (8006f54 <_printf_i+0x244>)
 8006e80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	680e      	ldr	r6, [r1, #0]
 8006e88:	061f      	lsls	r7, r3, #24
 8006e8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e8e:	600e      	str	r6, [r1, #0]
 8006e90:	d514      	bpl.n	8006ebc <_printf_i+0x1ac>
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	bf44      	itt	mi
 8006e96:	f043 0320 	orrmi.w	r3, r3, #32
 8006e9a:	6023      	strmi	r3, [r4, #0]
 8006e9c:	b91d      	cbnz	r5, 8006ea6 <_printf_i+0x196>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	f023 0320 	bic.w	r3, r3, #32
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	2310      	movs	r3, #16
 8006ea8:	e7b0      	b.n	8006e0c <_printf_i+0xfc>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	f043 0320 	orr.w	r3, r3, #32
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	2378      	movs	r3, #120	; 0x78
 8006eb4:	4828      	ldr	r0, [pc, #160]	; (8006f58 <_printf_i+0x248>)
 8006eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006eba:	e7e3      	b.n	8006e84 <_printf_i+0x174>
 8006ebc:	065e      	lsls	r6, r3, #25
 8006ebe:	bf48      	it	mi
 8006ec0:	b2ad      	uxthmi	r5, r5
 8006ec2:	e7e6      	b.n	8006e92 <_printf_i+0x182>
 8006ec4:	4616      	mov	r6, r2
 8006ec6:	e7bb      	b.n	8006e40 <_printf_i+0x130>
 8006ec8:	680b      	ldr	r3, [r1, #0]
 8006eca:	6826      	ldr	r6, [r4, #0]
 8006ecc:	6960      	ldr	r0, [r4, #20]
 8006ece:	1d1d      	adds	r5, r3, #4
 8006ed0:	600d      	str	r5, [r1, #0]
 8006ed2:	0635      	lsls	r5, r6, #24
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	d501      	bpl.n	8006edc <_printf_i+0x1cc>
 8006ed8:	6018      	str	r0, [r3, #0]
 8006eda:	e002      	b.n	8006ee2 <_printf_i+0x1d2>
 8006edc:	0671      	lsls	r1, r6, #25
 8006ede:	d5fb      	bpl.n	8006ed8 <_printf_i+0x1c8>
 8006ee0:	8018      	strh	r0, [r3, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	4616      	mov	r6, r2
 8006ee8:	e7ba      	b.n	8006e60 <_printf_i+0x150>
 8006eea:	680b      	ldr	r3, [r1, #0]
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	600a      	str	r2, [r1, #0]
 8006ef0:	681e      	ldr	r6, [r3, #0]
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f7f9 f97a 	bl	80001f0 <memchr>
 8006efc:	b108      	cbz	r0, 8006f02 <_printf_i+0x1f2>
 8006efe:	1b80      	subs	r0, r0, r6
 8006f00:	6060      	str	r0, [r4, #4]
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	2300      	movs	r3, #0
 8006f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0c:	e7a8      	b.n	8006e60 <_printf_i+0x150>
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	4632      	mov	r2, r6
 8006f12:	4649      	mov	r1, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	47d0      	blx	sl
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d0ab      	beq.n	8006e74 <_printf_i+0x164>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	079b      	lsls	r3, r3, #30
 8006f20:	d413      	bmi.n	8006f4a <_printf_i+0x23a>
 8006f22:	68e0      	ldr	r0, [r4, #12]
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	4298      	cmp	r0, r3
 8006f28:	bfb8      	it	lt
 8006f2a:	4618      	movlt	r0, r3
 8006f2c:	e7a4      	b.n	8006e78 <_printf_i+0x168>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4632      	mov	r2, r6
 8006f32:	4649      	mov	r1, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	47d0      	blx	sl
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d09b      	beq.n	8006e74 <_printf_i+0x164>
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	9903      	ldr	r1, [sp, #12]
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	42ab      	cmp	r3, r5
 8006f46:	dcf2      	bgt.n	8006f2e <_printf_i+0x21e>
 8006f48:	e7eb      	b.n	8006f22 <_printf_i+0x212>
 8006f4a:	2500      	movs	r5, #0
 8006f4c:	f104 0619 	add.w	r6, r4, #25
 8006f50:	e7f5      	b.n	8006f3e <_printf_i+0x22e>
 8006f52:	bf00      	nop
 8006f54:	0800729d 	.word	0x0800729d
 8006f58:	080072ae 	.word	0x080072ae

08006f5c <_read_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_read_r+0x20>)
 8006f60:	4604      	mov	r4, r0
 8006f62:	4608      	mov	r0, r1
 8006f64:	4611      	mov	r1, r2
 8006f66:	2200      	movs	r2, #0
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fa fa68 	bl	8001440 <_read>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_read_r+0x1e>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_read_r+0x1e>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20000da8 	.word	0x20000da8

08006f80 <_fstat_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d07      	ldr	r5, [pc, #28]	; (8006fa0 <_fstat_r+0x20>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	f7fa fa9c 	bl	80014ca <_fstat>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d102      	bne.n	8006f9c <_fstat_r+0x1c>
 8006f96:	682b      	ldr	r3, [r5, #0]
 8006f98:	b103      	cbz	r3, 8006f9c <_fstat_r+0x1c>
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000da8 	.word	0x20000da8

08006fa4 <_isatty_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d06      	ldr	r5, [pc, #24]	; (8006fc0 <_isatty_r+0x1c>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	602b      	str	r3, [r5, #0]
 8006fb0:	f7fa fa9b 	bl	80014ea <_isatty>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_isatty_r+0x1a>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_isatty_r+0x1a>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20000da8 	.word	0x20000da8

08006fc4 <_init>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr

08006fd0 <_fini>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr
